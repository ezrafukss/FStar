../../../bin/fstar.exe --cache_off --odir _output --cache_dir _cache Bench.MiniParse.Size4.Factor1.Seed00.Goal.fst --include ..
../../../bin/fstar.exe --cache_off --odir _output --cache_dir _cache Bench.MiniParse.Size7.Factor1.Seed00.Goal.fst --include ..
../../../bin/fstar.exe --cache_off --odir _output --cache_dir _cache Bench.MiniParse.Size10.Factor1.Seed00.Goal.fst --include ..
/home/guido/r/fstar/examples/miniparse/MiniParse.Spec.List.fst(106,54-106,65): (Warning 288) FStar.Seq.Base.createEmpty is deprecated, use Seq.empty instead
/home/guido/r/fstar/examples/miniparse/MiniParse.Spec.List.fst(106,54-106,65): (Warning 288) FStar.Seq.Base.createEmpty is deprecated, use Seq.empty instead
TAC>> Unfolded definition: MiniParse.Tac.Spec.t
TAC>> Unfolded definition: MiniParse.Tac.Spec.u8
TAC>> Unfolded definition: MiniParse.Tac.Spec.u8
TAC>> Unfolded definition: MiniParse.Tac.Spec.u8
TAC>> No goals left
/home/guido/r/fstar/examples/miniparse/MiniParse.Spec.List.fst(106,54-106,65): (Warning 288) FStar.Seq.Base.createEmpty is deprecated, use Seq.empty instead
TAC>> Unfolded definition: MiniParse.Tac.Spec.t
TAC>> Unfolded definition: MiniParse.Tac.Spec.u8
TAC>> Unfolded definition: MiniParse.Tac.Spec.u8
TAC>> Unfolded definition: MiniParse.Tac.Spec.u8
TAC>> No goals left
TAC>> Unfolded definition: MiniParse.Tac.Spec.t
TAC>> Unfolded definition: MiniParse.Tac.Spec.u8
TAC>> Unfolded definition: MiniParse.Tac.Spec.u8
TAC>> Unfolded definition: MiniParse.Tac.Spec.u8
TAC>> No goals left
TAC>> Unfolded definition: MiniParse.Tac.Impl.p
TAC>> No goals left
TAC>> gen_parser_impl spits:
TAC>> MiniParse.Impl.Combinators.parse_nondep_then_impl MiniParse.Impl.Int.parse_u8_impl
  (MiniParse.Impl.Combinators.parse_ret_impl 42)
TAC>> Unfolded definition: MiniParse.Tac.Impl.p'
TAC>> Unfolded definition: MiniParse.Tac.Impl.p
TAC>> No goals left
TAC>> gen_parser_impl spits:
TAC>> MiniParse.Impl.Combinators.parse_nondep_then_impl #(FStar.UInt8.t * Prims.int)
  #MiniParse.Tac.Impl.p
  (MiniParse.Impl.Combinators.parse_nondep_then_impl #FStar.UInt8.t
      #MiniParse.Spec.Int.parse_u8
      MiniParse.Impl.Int.parse_u8_impl
      #Prims.int
      #(MiniParse.Spec.Combinators.parse_ret #Prims.int 42)
      (MiniParse.Impl.Combinators.parse_ret_impl #Prims.int 42))
  #FStar.UInt8.t
  #MiniParse.Spec.Int.parse_u8
  MiniParse.Impl.Int.parse_u8_impl
TAC>> Unfolded definition: MiniParse.Tac.Impl.r
TAC>> No goals left
TAC>> gen_parser_impl spits:
TAC>> MiniParse.Impl.Combinators.parse_synth_impl #Prims.int
  #Prims.int
  #(MiniParse.Spec.Combinators.parse_ret #Prims.int 42)
  (MiniParse.Impl.Combinators.parse_ret_impl #Prims.int 42)
  (fun x -> x + 1)
  (fun x0 -> (fun x -> x + 1) x0)
  (fun x -> x - 1)
  ()
TAC>> Unfolded definition: MiniParse.Tac.Impl.j
TAC>> Unfolded definition: MiniParse.Tac.Spec.p
TAC>> No goals left
TAC>> gen_parser_impl spits:
TAC>> MiniParse.Impl.Combinators.parse_nondep_then_impl #MiniParse.Tac.Spec.u8
  #MiniParse.Spec.Int.parse_u8
  MiniParse.Impl.Int.parse_u8_impl
  #(MiniParse.Spec.List.nlist 79 MiniParse.Tac.Spec.u8 * MiniParse.Tac.Spec.u8)
  #(MiniParse.Spec.Combinators.nondep_then #(MiniParse.Spec.List.nlist 79 MiniParse.Tac.Spec.u8)
      (MiniParse.Spec.List.parse_nlist 79 #MiniParse.Tac.Spec.u8 MiniParse.Spec.Int.parse_u8)
      #MiniParse.Tac.Spec.u8
      MiniParse.Spec.Int.parse_u8)
  (MiniParse.Impl.Combinators.parse_nondep_then_impl #(MiniParse.Spec.List.nlist 79
          MiniParse.Tac.Spec.u8)
      #(MiniParse.Spec.List.parse_nlist 79 #MiniParse.Tac.Spec.u8 MiniParse.Spec.Int.parse_u8)
      (MiniParse.Impl.List.parse_nlist_impl 79
          (MiniParse.Tac.Impl.mk_u32 79)
          #MiniParse.Tac.Spec.u8
          #MiniParse.Spec.Int.parse_u8
          MiniParse.Impl.Int.parse_u8_impl)
      #MiniParse.Tac.Spec.u8
      #MiniParse.Spec.Int.parse_u8
      MiniParse.Impl.Int.parse_u8_impl)
TAC>> Unfolded definition: MiniParse.Tac.Impl.p
TAC>> No goals left
TAC>> gen_parser_impl spits:
TAC>> MiniParse.Impl.Combinators.parse_nondep_then_impl MiniParse.Impl.Int.parse_u8_impl
  (MiniParse.Impl.Combinators.parse_ret_impl 42)
TAC>> Unfolded definition: MiniParse.Tac.Impl.p'
TAC>> Unfolded definition: MiniParse.Tac.Impl.p
TAC>> No goals left
TAC>> gen_parser_impl spits:
TAC>> MiniParse.Impl.Combinators.parse_nondep_then_impl #(FStar.UInt8.t * Prims.int)
  #MiniParse.Tac.Impl.p
  (MiniParse.Impl.Combinators.parse_nondep_then_impl #FStar.UInt8.t
      #MiniParse.Spec.Int.parse_u8
      MiniParse.Impl.Int.parse_u8_impl
      #Prims.int
      #(MiniParse.Spec.Combinators.parse_ret #Prims.int 42)
      (MiniParse.Impl.Combinators.parse_ret_impl #Prims.int 42))
  #FStar.UInt8.t
  #MiniParse.Spec.Int.parse_u8
  MiniParse.Impl.Int.parse_u8_impl
TAC>> Unfolded definition: MiniParse.Tac.Impl.r
TAC>> No goals left
TAC>> gen_parser_impl spits:
TAC>> MiniParse.Impl.Combinators.parse_synth_impl #Prims.int
  #Prims.int
  #(MiniParse.Spec.Combinators.parse_ret #Prims.int 42)
  (MiniParse.Impl.Combinators.parse_ret_impl #Prims.int 42)
  (fun x -> x + 1)
  (fun x0 -> (fun x -> x + 1) x0)
  (fun x -> x - 1)
  ()
TAC>> Unfolded definition: MiniParse.Tac.Impl.j
TAC>> Unfolded definition: MiniParse.Tac.Spec.p
TAC>> Inductive type with 10
TAC>> No goals left
TAC>> gen_parser_impl spits:
TAC>> MiniParse.Impl.Combinators.parse_nondep_then_impl #MiniParse.Tac.Spec.u8
  #MiniParse.Spec.Int.parse_u8
  MiniParse.Impl.Int.parse_u8_impl
  #(MiniParse.Spec.List.nlist 79 MiniParse.Tac.Spec.u8 * MiniParse.Tac.Spec.u8)
  #(MiniParse.Spec.Combinators.nondep_then #(MiniParse.Spec.List.nlist 79 MiniParse.Tac.Spec.u8)
      (MiniParse.Spec.List.parse_nlist 79 #MiniParse.Tac.Spec.u8 MiniParse.Spec.Int.parse_u8)
      #MiniParse.Tac.Spec.u8
      MiniParse.Spec.Int.parse_u8)
  (MiniParse.Impl.Combinators.parse_nondep_then_impl #(MiniParse.Spec.List.nlist 79
          MiniParse.Tac.Spec.u8)
      #(MiniParse.Spec.List.parse_nlist 79 #MiniParse.Tac.Spec.u8 MiniParse.Spec.Int.parse_u8)
      (MiniParse.Impl.List.parse_nlist_impl 79
          (MiniParse.Tac.Impl.mk_u32 79)
          #MiniParse.Tac.Spec.u8
          #MiniParse.Spec.Int.parse_u8
          MiniParse.Impl.Int.parse_u8_impl)
      #MiniParse.Tac.Spec.u8
      #MiniParse.Spec.Int.parse_u8
      MiniParse.Impl.Int.parse_u8_impl)
TAC>> function
| Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10 ->
  MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10
| Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9 ->
  MiniParse.Spec.Int.mk_u16 8 <: MiniParse.Spec.Int.bounded_u16 10
| Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8 ->
  MiniParse.Spec.Int.mk_u16 7 <: MiniParse.Spec.Int.bounded_u16 10
| Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7 ->
  MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 10
| Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6 ->
  MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 10
| Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5 ->
  MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 10
| Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4 ->
  MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 10
| Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3 ->
  MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 10
| Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2 ->
  MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 10
| Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1 ->
  MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 10
| _ -> MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10
TAC>> Inductive type with 7
TAC>> function
| Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7 ->
  MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7
| Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6 ->
  MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 7
| Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5 ->
  MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 7
| Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4 ->
  MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 7
| Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3 ->
  MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 7
| Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2 ->
  MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 7
| Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1 ->
  MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 7
| _ -> MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7
TAC>> Unfolded definition: MiniParse.Tac.Impl.p
TAC>> No goals left
TAC>> gen_parser_impl spits:
TAC>> MiniParse.Impl.Combinators.parse_nondep_then_impl MiniParse.Impl.Int.parse_u8_impl
  (MiniParse.Impl.Combinators.parse_ret_impl 42)
TAC>> Unfolded definition: MiniParse.Tac.Impl.p'
TAC>> Unfolded definition: MiniParse.Tac.Impl.p
TAC>> No goals left
TAC>> gen_parser_impl spits:
TAC>> MiniParse.Impl.Combinators.parse_nondep_then_impl #(FStar.UInt8.t * Prims.int)
  #MiniParse.Tac.Impl.p
  (MiniParse.Impl.Combinators.parse_nondep_then_impl #FStar.UInt8.t
      #MiniParse.Spec.Int.parse_u8
      MiniParse.Impl.Int.parse_u8_impl
      #Prims.int
      #(MiniParse.Spec.Combinators.parse_ret #Prims.int 42)
      (MiniParse.Impl.Combinators.parse_ret_impl #Prims.int 42))
  #FStar.UInt8.t
  #MiniParse.Spec.Int.parse_u8
  MiniParse.Impl.Int.parse_u8_impl
TAC>> Unfolded definition: MiniParse.Tac.Impl.r
TAC>> No goals left
TAC>> gen_parser_impl spits:
TAC>> MiniParse.Impl.Combinators.parse_synth_impl #Prims.int
  #Prims.int
  #(MiniParse.Spec.Combinators.parse_ret #Prims.int 42)
  (MiniParse.Impl.Combinators.parse_ret_impl #Prims.int 42)
  (fun x -> x + 1)
  (fun x0 -> (fun x -> x + 1) x0)
  (fun x -> x - 1)
  ()
TAC>> Unfolded definition: MiniParse.Tac.Impl.j
TAC>> Unfolded definition: MiniParse.Tac.Spec.p
proof-state: State dump @ depth 2 (Some goals left):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Tac.Base.fst(169,4-169,28)
ACTIVE goals (1):
 |- _ : Prims.squash ((forall (x2: MiniParse.Spec.Int.bounded_u16 7).
        (*could not prove post-condition*)
        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
        (forall (return_val: MiniParse.Spec.Int.bounded_u16 7).
            return_val == MiniParse.Spec.Int.mk_u16 0 ==>
            (forall (any_result: Prims.bool).
                MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0) == any_result ==>
                (forall (any_result:
                    (
                        x1:
                        (
                            _:
                            MiniParse.Tac.Base.ctest true
                              (MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0)) ->
                            Prims.Tot Bench.MiniParse.Size7.Factor1.Seed00.Goal.test) ->
                        x2:
                        (
                            _:
                            MiniParse.Tac.Base.ctest false
                              (MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0)) ->
                            Prims.Tot Bench.MiniParse.Size7.Factor1.Seed00.Goal.test) ->
                        Prims.Tot Bench.MiniParse.Size7.Factor1.Seed00.Goal.test)).
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
                    (forall (any_result:
                        (
                            _:
                            MiniParse.Tac.Base.ctest true
                              (MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0)) ->
                            Prims.Tot Bench.MiniParse.Size7.Factor1.Seed00.Goal.test)).
                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1) == any_result ==>
                        (forall (any_result:
                            (
                                x2:
                                (
                                    _:
                                    MiniParse.Tac.Base.ctest false
                                      (MiniParse.Spec.Int.bounded_u16_eq 7
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 0)) ->
                                    Prims.Tot Bench.MiniParse.Size7.Factor1.Seed00.Goal.test) ->
                                Prims.Tot Bench.MiniParse.Size7.Factor1.Seed00.Goal.test)).
                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
                            (forall (x14:
                                MiniParse.Tac.Base.ctest false
                                  (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 0))).
                                (*could not prove post-condition*)
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7 /\
                                (forall (return_val: MiniParse.Spec.Int.bounded_u16 7).
                                    return_val == MiniParse.Spec.Int.mk_u16 1 ==>
                                    (forall (any_result: Prims.bool).
                                        MiniParse.Spec.Int.bounded_u16_eq 7
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 1) ==
                                        any_result ==>
                                        (forall (any_result:
                                            (
                                                x1:
                                                (
                                                    _:
                                                    MiniParse.Tac.Base.ctest true
                                                      (MiniParse.Spec.Int.bounded_u16_eq 7
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 1)) ->
                                                    Prims.Tot
                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.test) ->
                                                x2:
                                                (
                                                    _:
                                                    MiniParse.Tac.Base.ctest false
                                                      (MiniParse.Spec.Int.bounded_u16_eq 7
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 1)) ->
                                                    Prims.Tot
                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.test) ->
                                                Prims.Tot
                                                Bench.MiniParse.Size7.Factor1.Seed00.Goal.test)).
                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7 /\
                                            (forall (any_result:
                                                (
                                                    _:
                                                    MiniParse.Tac.Base.ctest true
                                                      (MiniParse.Spec.Int.bounded_u16_eq 7
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 1)) ->
                                                    Prims.Tot
                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.test))
                                              .
                                                (fun _ ->
                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2) ==
                                                any_result ==>
                                                (forall (any_result:
                                                    (
                                                        x2:
                                                        (
                                                            _:
                                                            MiniParse.Tac.Base.ctest false
                                                              (MiniParse.Spec.Int.bounded_u16_eq 7
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 1)) ->
                                                            Prims.Tot
                                                            Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                        ) ->
                                                        Prims.Tot
                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                    )).
                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7 /\
                                                    (forall (x12:
                                                        MiniParse.Tac.Base.ctest false
                                                          (MiniParse.Spec.Int.bounded_u16_eq 7
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 1))).
                                                        (*could not prove post-condition*)
                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) <
                                                        7 /\
                                                        (forall (return_val:
                                                            MiniParse.Spec.Int.bounded_u16 7).
                                                            return_val ==
                                                            MiniParse.Spec.Int.mk_u16 2 ==>
                                                            (forall (any_result: Prims.bool).
                                                                MiniParse.Spec.Int.bounded_u16_eq 7
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 2) ==
                                                                any_result ==>
                                                                (forall (any_result:
                                                                    (
                                                                        x1:
                                                                        (
                                                                            _:
                                                                            MiniParse.Tac.Base.ctest 
                                                                              true
                                                                              (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  7
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      2)) ->
                                                                            Prims.Tot
                                                                            Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                        ) ->
                                                                        x2:
                                                                        (
                                                                            _:
                                                                            MiniParse.Tac.Base.ctest 
                                                                              false
                                                                              (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  7
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      2)) ->
                                                                            Prims.Tot
                                                                            Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                        ) ->
                                                                        Prims.Tot
                                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                    )).
                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                          2) <
                                                                    7 /\
                                                                    (forall (any_result:
                                                                        (
                                                                            _:
                                                                            MiniParse.Tac.Base.ctest 
                                                                              true
                                                                              (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  7
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      2)) ->
                                                                            Prims.Tot
                                                                            Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                        )).
                                                                        (fun _ ->
                                                                            Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3
                                                                        ) ==
                                                                        any_result ==>
                                                                        (forall (any_result:
                                                                            (
                                                                                x2:
                                                                                (
                                                                                    _:
                                                                                    MiniParse.Tac.Base.ctest 
                                                                                      false
                                                                                      (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                          7
                                                                                          x2
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              2)) ->
                                                                                    Prims.Tot
                                                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                                ) ->
                                                                                Prims.Tot
                                                                                Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                            )).
                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                  2) <
                                                                            7 /\
                                                                            (forall (x10:
                                                                                MiniParse.Tac.Base.ctest 
                                                                                  false
                                                                                  (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                      7
                                                                                      x2
                                                                                      (MiniParse.Spec.Int.mk_u16 
                                                                                          2))).
                                                                                (*could not prove post-condition*)
                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                      3) <
                                                                                7 /\
                                                                                (forall (return_val:
                                                                                    MiniParse.Spec.Int.bounded_u16 
                                                                                      7).
                                                                                    return_val ==
                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                      3 ==>
                                                                                    (forall (any_result:
                                                                                        Prims.bool).
                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                          7
                                                                                          x2
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              3) ==
                                                                                        any_result ==>
                                                                                        (forall (any_result:
                                                                                            (
                                                                                                x1:
                                                                                                (
                                                                                                    _:
                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                      true
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                          7
                                                                                                          x2
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              3
                                                                                                            
                                                                                                          )
                                                                                                        
                                                                                                      )
                                                                                                     ->
                                                                                                    Prims.Tot
                                                                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                                                ) ->
                                                                                                x2:
                                                                                                (
                                                                                                    _:
                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                      false
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                          7
                                                                                                          x2
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              3
                                                                                                            
                                                                                                          )
                                                                                                        
                                                                                                      )
                                                                                                     ->
                                                                                                    Prims.Tot
                                                                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                                                ) ->
                                                                                                Prims.Tot
                                                                                                Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                                            )).
                                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                            FStar.UInt16.v 
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  3) <
                                                                                            7 /\
                                                                                            (forall (any_result:
                                                                                                (
                                                                                                    _:
                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                      true
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                          7
                                                                                                          x2
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              3
                                                                                                            
                                                                                                          )
                                                                                                        
                                                                                                      )
                                                                                                     ->
                                                                                                    Prims.Tot
                                                                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                                                )).
                                                                                                (fun
                                                                                                    _
                                                                                                    ->
                                                                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4
                                                                                                ) ==
                                                                                                any_result ==>
                                                                                                (forall 
                                                                                                    (any_result:
                                                                                                    (
                                                                                                      
                                                                                                        x2:
                                                                                                        (
                                                                                                          
                                                                                                            _:
                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                              false
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                  7
                                                                                                                  x2
                                                                                                                  (
                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                      3
                                                                                                                    
                                                                                                                  )
                                                                                                                
                                                                                                              )
                                                                                                             ->
                                                                                                            Prims.Tot
                                                                                                            Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                                                        ) ->
                                                                                                        Prims.Tot
                                                                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                                                    ))
                                                                                                  .
                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                    FStar.UInt16.v 
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                          3
                                                                                                        
                                                                                                      )
                                                                                                     <
                                                                                                    7 /\
                                                                                                    (
                                                                                                      forall 
                                                                                                        (x8:
                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                          false
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                              7
                                                                                                              x2
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                  3
                                                                                                                
                                                                                                              )
                                                                                                            
                                                                                                          )
                                                                                                        )
                                                                                                      .
                                                                                                        (*could not prove post-condition*)
                                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                        FStar.UInt16.v 
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              4
                                                                                                            
                                                                                                          )
                                                                                                         <
                                                                                                        7 /\
                                                                                                        (
                                                                                                          forall 
                                                                                                            (return_val:
                                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                                              7
                                                                                                            )
                                                                                                          .
                                                                                                            return_val ==
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              4
                                                                                                             ==>
                                                                                                            (
                                                                                                              forall 
                                                                                                                (any_result:
                                                                                                                Prims.bool)
                                                                                                              .
                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                  7
                                                                                                                  x2
                                                                                                                  (
                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                      4
                                                                                                                    
                                                                                                                  )
                                                                                                                 ==
                                                                                                                any_result ==>
                                                                                                                (
                                                                                                                  forall 
                                                                                                                    (any_result:
                                                                                                                    (
                                                                                                                      
                                                                                                                        x1:
                                                                                                                        (
                                                                                                                          
                                                                                                                            _:
                                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                                              true
                                                                                                                              (
                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                  7
                                                                                                                                  x2
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      4
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                
                                                                                                                              )
                                                                                                                             ->
                                                                                                                            Prims.Tot
                                                                                                                            Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                                                                        ) ->
                                                                                                                        x2:
                                                                                                                        (
                                                                                                                          
                                                                                                                            _:
                                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                                              false
                                                                                                                              (
                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                  7
                                                                                                                                  x2
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      4
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                
                                                                                                                              )
                                                                                                                             ->
                                                                                                                            Prims.Tot
                                                                                                                            Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                                                                        ) ->
                                                                                                                        Prims.Tot
                                                                                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                                                                    ))
                                                                                                                  .
                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                                    FStar.UInt16.v 
                                                                                                                      (
                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                          4
                                                                                                                        
                                                                                                                      )
                                                                                                                     <
                                                                                                                    7 /\
                                                                                                                    (
                                                                                                                      forall 
                                                                                                                        (any_result:
                                                                                                                        (
                                                                                                                          
                                                                                                                            _:
                                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                                              true
                                                                                                                              (
                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                  7
                                                                                                                                  x2
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      4
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                
                                                                                                                              )
                                                                                                                             ->
                                                                                                                            Prims.Tot
                                                                                                                            Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                                                                        ))
                                                                                                                      .
                                                                                                                        (
                                                                                                                          fun
                                                                                                                            _
                                                                                                                            ->
                                                                                                                            Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5
                                                                                                                        ) ==
                                                                                                                        any_result ==>
                                                                                                                        (
                                                                                                                          forall 
                                                                                                                            (any_result:
                                                                                                                            (
                                                                                                                              
                                                                                                                                x2:
                                                                                                                                (
                                                                                                                                  
                                                                                                                                    _:
                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                      false
                                                                                                                                      (
                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                          7
                                                                                                                                          x2
                                                                                                                                          (
                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                              4
                                                                                                                                            
                                                                                                                                          )
                                                                                                                                        
                                                                                                                                      )
                                                                                                                                     ->
                                                                                                                                    Prims.Tot
                                                                                                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                                                                                ) ->
                                                                                                                                Prims.Tot
                                                                                                                                Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                                                                            ))
                                                                                                                          .
                                                                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                                            FStar.UInt16.v 
                                                                                                                              (
                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                  4
                                                                                                                                
                                                                                                                              )
                                                                                                                             <
                                                                                                                            7 /\
                                                                                                                            (
                                                                                                                              forall 
                                                                                                                                (x6:
                                                                                                                                MiniParse.Tac.Base.ctest 
                                                                                                                                  false
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                      7
                                                                                                                                      x2
                                                                                                                                      (
                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                          4
                                                                                                                                        
                                                                                                                                      )
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                )
                                                                                                                              .
                                                                                                                                (*could not prove post-condition*)
                                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                                                FStar.UInt16.v 
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      5
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                 <
                                                                                                                                7 /\
                                                                                                                                (
                                                                                                                                  forall 
                                                                                                                                    (return_val:
                                                                                                                                    MiniParse.Spec.Int.bounded_u16 
                                                                                                                                      7
                                                                                                                                    )
                                                                                                                                  .
                                                                                                                                    return_val ==
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      5
                                                                                                                                     ==>
                                                                                                                                    (
                                                                                                                                      forall 
                                                                                                                                        (any_result:
                                                                                                                                        Prims.bool)
                                                                                                                                      .
                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                          7
                                                                                                                                          x2
                                                                                                                                          (
                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                              5
                                                                                                                                            
                                                                                                                                          )
                                                                                                                                         ==
                                                                                                                                        any_result ==>
                                                                                                                                        (
                                                                                                                                          forall 
                                                                                                                                            (any_result:
                                                                                                                                            (
                                                                                                                                              
                                                                                                                                                x1:
                                                                                                                                                (
                                     proof-state: State dump @ depth 2 (Some goals left):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Tac.Base.fst(169,4-169,28)
ACTIVE goals (1):
 |- _ : Prims.squash ((forall (x2: MiniParse.Spec.Int.bounded_u16 10).
        (*could not prove post-condition*)
        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10 /\
        (forall (return_val: MiniParse.Spec.Int.bounded_u16 10).
            return_val == MiniParse.Spec.Int.mk_u16 0 ==>
            (forall (any_result: Prims.bool).
                MiniParse.Spec.Int.bounded_u16_eq 10 x2 (MiniParse.Spec.Int.mk_u16 0) == any_result ==>
                (forall (any_result:
                    (
                        x1:
                        (
                            _:
                            MiniParse.Tac.Base.ctest true
                              (MiniParse.Spec.Int.bounded_u16_eq 10 x2 (MiniParse.Spec.Int.mk_u16 0)
                              ) ->
                            Prims.Tot Bench.MiniParse.Size10.Factor1.Seed00.Goal.test) ->
                        x2:
                        (
                            _:
                            MiniParse.Tac.Base.ctest false
                              (MiniParse.Spec.Int.bounded_u16_eq 10 x2 (MiniParse.Spec.Int.mk_u16 0)
                              ) ->
                            Prims.Tot Bench.MiniParse.Size10.Factor1.Seed00.Goal.test) ->
                        Prims.Tot Bench.MiniParse.Size10.Factor1.Seed00.Goal.test)).
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10 /\
                    (forall (any_result:
                        (
                            _:
                            MiniParse.Tac.Base.ctest true
                              (MiniParse.Spec.Int.bounded_u16_eq 10 x2 (MiniParse.Spec.Int.mk_u16 0)
                              ) ->
                            Prims.Tot Bench.MiniParse.Size10.Factor1.Seed00.Goal.test)).
                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1) == any_result ==>
                        (forall (any_result:
                            (
                                x2:
                                (
                                    _:
                                    MiniParse.Tac.Base.ctest false
                                      (MiniParse.Spec.Int.bounded_u16_eq 10
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 0)) ->
                                    Prims.Tot Bench.MiniParse.Size10.Factor1.Seed00.Goal.test) ->
                                Prims.Tot Bench.MiniParse.Size10.Factor1.Seed00.Goal.test)).
                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10 /\
                            (forall (x20:
                                MiniParse.Tac.Base.ctest false
                                  (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 0))).
                                (*could not prove post-condition*)
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                                (forall (return_val: MiniParse.Spec.Int.bounded_u16 10).
                                    return_val == MiniParse.Spec.Int.mk_u16 1 ==>
                                    (forall (any_result: Prims.bool).
                                        MiniParse.Spec.Int.bounded_u16_eq 10
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 1) ==
                                        any_result ==>
                                        (forall (any_result:
                                            (
                                                x1:
                                                (
                                                    _:
                                                    MiniParse.Tac.Base.ctest true
                                                      (MiniParse.Spec.Int.bounded_u16_eq 10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 1)) ->
                                                    Prims.Tot
                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.test) ->
                                                x2:
                                                (
                                                    _:
                                                    MiniParse.Tac.Base.ctest false
                                                      (MiniParse.Spec.Int.bounded_u16_eq 10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 1)) ->
                                                    Prims.Tot
                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.test) ->
                                                Prims.Tot
                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.test)).
                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                                            (forall (any_result:
                                                (
                                                    _:
                                                    MiniParse.Tac.Base.ctest true
                                                      (MiniParse.Spec.Int.bounded_u16_eq 10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 1)) ->
                                                    Prims.Tot
                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.test))
                                              .
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2) ==
                                                any_result ==>
                                                (forall (any_result:
                                                    (
                                                        x2:
                                                        (
                                                            _:
                                                            MiniParse.Tac.Base.ctest false
                                                              (MiniParse.Spec.Int.bounded_u16_eq 10
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 1)) ->
                                                            Prims.Tot
                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                        ) ->
                                                        Prims.Tot
                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                    )).
                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) <
                                                    10 /\
                                                    (forall (x18:
                                                        MiniParse.Tac.Base.ctest false
                                                          (MiniParse.Spec.Int.bounded_u16_eq 10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 1))).
                                                        (*could not prove post-condition*)
                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) <
                                                        10 /\
                                                        (forall (return_val:
                                                            MiniParse.Spec.Int.bounded_u16 10).
                                                            return_val ==
                                                            MiniParse.Spec.Int.mk_u16 2 ==>
                                                            (forall (any_result: Prims.bool).
                                                                MiniParse.Spec.Int.bounded_u16_eq 10
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 2) ==
                                                                any_result ==>
                                                                (forall (any_result:
                                                                    (
                                                                        x1:
                                                                        (
                                                                            _:
                                                                            MiniParse.Tac.Base.ctest 
                                                                              true
                                                                              (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  10
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      2)) ->
                                                                            Prims.Tot
                                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                        ) ->
                                                                        x2:
                                                                        (
                                                                            _:
                                                                            MiniParse.Tac.Base.ctest 
                                                                              false
                                                                              (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  10
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      2)) ->
                                                                            Prims.Tot
                                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                        ) ->
                                                                        Prims.Tot
                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                    )).
                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                          2) <
                                                                    10 /\
                                                                    (forall (any_result:
                                                                        (
                                                                            _:
                                                                            MiniParse.Tac.Base.ctest 
                                                                              true
                                                                              (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  10
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      2)) ->
                                                                            Prims.Tot
                                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                        )).
                                                                        (fun _ ->
                                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3
                                                                        ) ==
                                                                        any_result ==>
                                                                        (forall (any_result:
                                                                            (
                                                                                x2:
                                                                                (
                                                                                    _:
                                                                                    MiniParse.Tac.Base.ctest 
                                                                                      false
                                                                                      (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                          10
                                                                                          x2
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              2)) ->
                                                                                    Prims.Tot
                                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                ) ->
                                                                                Prims.Tot
                                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                            )).
                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                  2) <
                                                                            10 /\
                                                                            (forall (x16:
                                                                                MiniParse.Tac.Base.ctest 
                                                                                  false
                                                                                  (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                      10
                                                                                      x2
                                                                                      (MiniParse.Spec.Int.mk_u16 
                                                                                          2))).
                                                                                (*could not prove post-condition*)
                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                      3) <
                                                                                10 /\
                                                                                (forall (return_val:
                                                                                    MiniParse.Spec.Int.bounded_u16 
                                                                                      10).
                                                                                    return_val ==
                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                      3 ==>
                                                                                    (forall (any_result:
                                                                                        Prims.bool).
                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                          10
                                                                                          x2
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              3) ==
                                                                                        any_result ==>
                                                                                        (forall (any_result:
                                                                                            (
                                                                                                x1:
                                                                                                (
                                                                                                    _:
                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                      true
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                          10
                                                                                                          x2
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              3
                                                                                                            
                                                                                                          )
                                                                                                        
                                                                                                      )
                                                                                                     ->
                                                                                                    Prims.Tot
                                                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                ) ->
                                                                                                x2:
                                                                                                (
                                                                                                    _:
                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                      false
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                          10
                                                                                                          x2
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              3
                                                                                                            
                                                                                                          )
                                                                                                        
                                                                                                      )
                                                                                                     ->
                                                                                                    Prims.Tot
                                                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                ) ->
                                                                                                Prims.Tot
                                                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                            )).
                                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                            FStar.UInt16.v 
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  3) <
                                                                                            10 /\
                                                                                            (forall (any_result:
                                                                                                (
                                                                                                    _:
                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                      true
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                          10
                                                                                                          x2
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              3
                                                                                                            
                                                                                                          )
                                                                                                        
                                                                                                      )
                                                                                                     ->
                                                                                                    Prims.Tot
                                                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                )).
                                                                                                (fun
                                                                                                    _
                                                                                                    ->
                                                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4
                                                                                                ) ==
                                                                                                any_result ==>
                                                                                                (forall 
                                                                                                    (any_result:
                                                                                                    (
                                                                                                      
                                                                                                        x2:
                                                                                                        (
                                                                                                          
                                                                                                            _:
                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                              false
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                  10
                                                                                                                  x2
                                                                                                                  (
                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                      3
                                                                                                                    
                                                                                                                  )
                                                                                                                
                                                                                                              )
                                                                                                             ->
                                                                                                            Prims.Tot
                                                                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                        ) ->
                                                                                                        Prims.Tot
                                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                    ))
                                                                                                  .
                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                    FStar.UInt16.v 
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                          3
                                                                                                        
                                                                                                      )
                                                                                                     <
                                                                                                    10 /\
                                                                                                    (
                                                                                                      forall 
                                                                                                        (x14:
                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                          false
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                              10
                                                                                                              x2
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                  3
                                                                                                                
                                                                                                              )
                                                                                                            
                                                                                                          )
                                                                                                        )
                                                                                                      .
                                                                                                        (*could not prove post-condition*)
                                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                        FStar.UInt16.v 
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              4
                                                                                                            
                                                                                                          )
                                                                                                         <
                                                                                                        10 /\
                                                                                                        (
                                                                                                          forall 
                                                                                                            (return_val:
                                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                                              10
                                                                                                            )
                                                                                                          .
                                                                                                            return_val ==
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              4
                                                                                                             ==>
                                                                                                            (
                                                                                                              forall 
                                                                                                                (any_result:
                                                                                                                Prims.bool)
                                                                                                              .
                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                  10
                                                                                                                  x2
                                                                                                                  (
                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                      4
                                                                                                                    
                                                                                                                  )
                                                                                                                 ==
                                                                                                                any_result ==>
                                                                                                                (
                                                                                                                  forall 
                                                                                                                    (any_result:
                                                                                                                    (
                                                                                                                      
                                                                                                                        x1:
                                                                                                                        (
                                                                                                                          
                                                                                                                            _:
                                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                                              true
                                                                                                                              (
                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                  10
                                                                                                                                  x2
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      4
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                
                                                                                                                              )
                                                                                                                             ->
                                                                                                                            Prims.Tot
                                                                                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                        ) ->
                                                                                                                        x2:
                                                                                                                        (
                                                                                                                          
                                                                                                                            _:
                                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                                              false
                                                                                                                              (
                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                  10
                                                                                                                                  x2
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      4
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                
                                                                                                                              )
                                                                                                                             ->
                                                                                                                            Prims.Tot
                                                                                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                        ) ->
                                                                                                                        Prims.Tot
                                                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                    ))
                                                                                                                  .
                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                    FStar.UInt16.v 
                                                                                                                      (
                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                          4
                                                                                                                        
                                                                                                                      )
                                                                                                                     <
                                                                                                                    10 /\
                                                                                                                    (
                                                                                                                      forall 
                                                                                                                        (any_result:
                                                                                                                        (
                                                                                                                          
                                                                                                                            _:
                                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                                              true
                                                                                                                              (
                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                  10
                                                                                                                                  x2
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      4
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                
                                                                                                                              )
                                                                                                                             ->
                                                                                                                            Prims.Tot
                                                                                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                        ))
                                                                                                                      .
                                                                                                                        (
                                                                                                                          fun
                                                                                                                            _
                                                                                                                            ->
                                                                                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5
                                                                                                                        ) ==
                                                                                                                        any_result ==>
                                                                                                                        (
                                                                                                                          forall 
                                                                                                                            (any_result:
                                                                                                                            (
                                                                                                                              
                                                                                                                                x2:
                                                                                                                                (
                                                                                                                                  
                                                                                                                                    _:
                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                      false
                                                                                                                                      (
                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                          10
                                                                                                                                          x2
                                                                                                                                          (
                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                              4
                                                                                                                                            
                                                                                                                                          )
                                                                                                                                        
                                                                                                                                      )
                                                                                                                                     ->
                                                                                                                                    Prims.Tot
                                                                                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                ) ->
                                                                                                                                Prims.Tot
                                                                                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                            ))
                                                                                                                          .
                                                                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                            FStar.UInt16.v 
                                                                                                                              (
                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                  4
                                                                                                                                
                                                                                                                              )
                                                                                                                             <
                                                                                                                            10 /\
                                                                                                                            (
                                                                                                                              forall 
                                                                                                                                (x12:
                                                                                                                                MiniParse.Tac.Base.ctest 
                                                                                                                                  false
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                      10
                                                                                                                                      x2
                                                                                                                                      (
                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                          4
                                                                                                                                        
                                                                                                                                      )
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                )
                                                                                                                              .
                                                                                                                                (*could not prove post-condition*)
                                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                FStar.UInt16.v 
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      5
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                 <
                                                                                                                                10 /\
                                                                                                                                (
                                                                                                                                  forall 
                                                                                                                                    (return_val:
                                                                                                                                    MiniParse.Spec.Int.bounded_u16 
                                                                                                                                      10
                                                                                                                                    )
                                                                                                                                  .
                                                                                                                                    return_val ==
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      5
                                                                                                                                     ==>
                                                                                                                                    (
                                                                                                                                      forall 
                                                                                                                                        (any_result:
                                                                                                                                        Prims.bool)
                                                                                                                                      .
                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                          10
                                                                                                                                          x2
                                                                                                                                          (
                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                              5
                                                                                                                                            
                                                                                                                                          )
                                                                                                                                         ==
                                                                                                                                        any_result ==>
                                                                                                                                        (
                                                                                                                                          forall 
                                                                                                                                            (any_result:
                                                                                                                                            (
                                                                                                                                              
                                                                                                                                                x1:
                                                                                                                                                (
                                                                                                                                                  
                                                                                                                                                    _:
                                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                                      true
                                                                                                                                                      (
                                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                          10
                                                                                                                                                          x2
                                                                                                                                                          (
                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                              5
                                                                                                                                                            
                                                                                                                                                          )
                                                                                                                                                        
                                                                                                                                                      )
                                                                                                                                                     ->
                                                                                                                                                    Prims.Tot
                                                                                                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                                ) ->
                                                                                                                                                x2:
                                                                                                                                                (
                                                                                                                                                  
                                                                                                                                                    _:
                                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                                      false
                                                                                                                                                      (
                                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                          10
                                                                                                                                                          x2
                                                                                                                                                          (
                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                              5
                                                                                                                                                            
                                                                                                                                                          )
                                                                                                                                                        
                                                                                                                                                      )
                                                                                                                                                     ->
                                                                                                                                                    Prims.Tot
                                                                                                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                                ) ->
                                                                                                                                                Prims.Tot
                                                                                                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                            ))
                                                                                                                                          .
                                                                                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                            FStar.UInt16.v 
                                                                                                                                              (
                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                  5
                                                                                                                                                
                                                                                                                                              )
                                                                                                                                             <
                                                                                                                                            10 /\
                                                                                                                                            (
                                                                                                                                              forall 
                                                                                                                                                (any_result:
                                                                                                                                                (
                                                                                                                                                  
                                                                                                                                                    _:
                                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                                      true
                                                                                                                                                      (
                                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                          10
                                                                                                                                                          x2
                                                                                                                                                          (
                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                              5
                                                                                                                                                            
                                                                                                                                                          )
                                                                                                                                                        
                                                                                                                                                      )
                                                                                                                                                     ->
                                                                                                                                                    Prims.Tot
                                                                                                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                                ))
                                                                                                                                              .
                                                                                                                                                (
                                                                                                                                                  fun
                                                                                                                                                    _
                                                                                                                                                    ->
                                                                                                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6
                                                                                                                                                ) ==
                                                                                                                                                any_result ==>
                                                                                                                                                (
                                                                                                                                                  forall 
                                                                                                                                                    (any_result:
                                                                                                                                                    (
                                                                                                                                                      
                                                                                                                                                        x2:
                                                                                                                                                        (
                                                                                                                                                          
                                                                                                                                                            _:
                                                                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                                                                              false
                                                                                                                                                              (
                                                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                  10
                                                                                                                                                                  x2
                                                                                                                                                                  (
                                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                      5
                                                                                                                                                                    
                                                                                                                                                                  )
                                                                                                                                                                
                                                                                                                                                              )
                                                                                                                                                             ->
                                                                                                                                                            Prims.Tot
                                                                                                                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                                        ) ->
                                                                                                                                                        Prims.Tot
                                                                                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                                    ))
                                                                                                                                                  .
                                                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                    FStar.UInt16.v 
                                                                                                                                                      (
                                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                                          5
                                                                                                                                                        
                                                                                                                                                      )
                                                                                                                                                     <
                                                                                                                                                    10 /\
                                                                                                                                                    (
                                                                                                                                                      forall 
                                                                                                                                                        (x10:
                                                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                                                          false
                                                                                                                                                          (
                                                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                              10
                                                                                                                                                              x2
                                                                                                                                                              (
                                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                  5
                                                                                                                                                                
                                                                                                                                                              )
                                                                                                                                                            
                                                                                                                                                          )
                                                                                                                                                        )
                                                                                                                                                      .
                                                                                                                                                        (*could not prove post-condition*)
                                                                                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                        FStar.UInt16.v 
                                                                                                                                                          (
                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                              6
                                                                                                                                                            
                                                                                                                                                          )
                                                                                                                                                         <
                                                                                                                                                        10 /\
                                                                                                                                                        (
                                                                                                                                                          forall 
                                                                                                                                                            (return_val:
                                                                                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                                                                                              10
                                                                                                                                                            )
                                                                                                                                                          .
                                                                                                                                                            return_val ==
                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                              6
                                                                                                                                                             ==>
                                                                                                                                                            (
                                                                                                                                                              forall 
                                                                                                                                                                (any_result:
                                                                                                                                                                Prims.bool)
                                                                                                                                                              .
                                                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                  10
                                                                                                                                                                  x2
                                                                                                                                                                  (
                                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                      6
                                                                                                                                                                    
                                                                                                                                                                  )
                                                                                                                                                                 ==
                                                                                                                                                                any_result ==>
                                                                                                                                                                (
                                                                                                                                                                  forall 
                                                                                                                                                                    (any_result:
                                                                                                                                                                    (
                                                                                                                                                                      
                                                                                                                                                                        x1:
                                                                                                                                                                        (
                                                                                                                                                                          
                                                                                                                                                                            _:
                                                                                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                                                                                              true
                                                                                                                                                                              (
                                                                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                                  10
                                                                                                                                                                                  x2
                                                                                                                                                                                  (
                                                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                      6
                                                                                                                                                                                    
                                                                                                                                                                                  )
                                                                                                                                                                                
                                                                                                                                                                              )
                                                                                                                                                                             ->
                                                                                                                                                                            Prims.Tot
                                                                                                                                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                                                        ) ->
                                                                                                                                                                        x2:
                                                                                                                                                                        (
                                                                                                                                                                          
                                                                                                                                                                            _:
                                                                                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                                                                                              false
                                                                                                                                                                              (
                                                                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                                  10
                                                                                                                                                                                  x2
                                                                                                                                                                                  (
                                                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                      6
                                                                                                                                                                                    
                                                                                                                                                                                  )
                                                                                                                                                                                
                                                                                                                                                                              )
                                                                                                                                                                             ->
                                                                                                                                                                            Prims.Tot
                                                                                                                                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                                                        ) ->
                                                                                                                                                                        Prims.Tot
                                                                                                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                                                    ))
                                                                                                                                                                  .
                                                                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                                    FStar.UInt16.v 
                                                                                                                                                                      (
                                                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                          6
                                                                                                                                                                        
                                                                                                                                                                      )
                                                                                                                                                                     <
                                                                                                                                                                    10 /\
                                                                                                                                                                    (
                                                                                                                                                                      forall 
                                                                                                                                                                        (any_result:
                                                                                                                                                                        (
                                                                                                                                                                          
                                                                                                                                                                            _:
                                                                                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                                                                                              true
                                                                                                                                                                              (
                                                                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                                  10
                                                                                                                                                                                  x2
                                                                                                                                                                                  (
                                                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                      6
                                                                                                                                                                                    
                                                                                                                                                                                  )
                                                                                                                                                                                
                                                                                                                                                                              )
                                                                                                                                                                             ->
                                                                                                                                                                            Prims.Tot
                                                                                                                                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                                                        ))
                                                                                                                                                                      .
                                                                                                                                                                        (
                                                                                                                                                                          fun
                                                                                                                                                                            _
                                                                                                                                                                            ->
                                                                                                                                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                                                                                                                                        ) ==
                                                                                                                                                                        any_result ==>
                                                                                                                                                                        (
                                                                                                                                                                          forall 
                                                                                                                                                                            (any_result:
                                                                                                                                                                            (
                                                                                                                                                                              
                                                                                                                                                                                x2:
                                                                                                                                                                                (
                                                                                                                                                                                  
                                                                                                                                                                                    _:
                                                                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                                                                      false
                                                                                                                                                                                      (
                                                                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                                          10
                                                                                                                                                                                          x2
                                                                                                                                                                                          (
                                                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                              6
                                                                                                                                                                                            
                                                                                                                                                                                          )
                                                                                                                                                                                        
                                                                                                                                                                                      )
                                                                                                                                                                                     ->
                                                                                                                                                                                    Prims.Tot
                                                                                                                                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                                                                ) ->
                                                                                                                                                                                Prims.Tot
                                                                                                                                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                                                            ))
                                                                                                                                                                          .
                                                                                                                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                                            FStar.UInt16.v 
                                                                                                                                                                              (
                                                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                  6
                                                                                                                                                                                
                                                                                                                                                                              )
                                                                                                                                                                             <
                                                                                                                                                                            10 /\
                                                                                                                                                                            (
                                                                                                                                                                              forall 
                                                                                                                                                                                (x8:
                                                                                                                                                                                MiniParse.Tac.Base.ctest 
                                                                                                                                                                                  false
                                                                                                                                                                                  (
                                                                                                                                                                                    MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                                      10
                                                                                                                                                                                      x2
                                                                                                                                                                                      (
                                                                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                          6
                                                                                                                                                                                        
                                                                                                                                                                                      )
                                                                                                                                                                                    
                                                                                                                                                                                  )
                                                                                                                                                                                )
                                                                                                                                                                              .
                                                                                                                                                                                (*could not prove post-condition*)
                                                                                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                                                FStar.UInt16.v 
                                                                                                                                                                                  (
                                                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                      7
                                                                                                                                                                                    
                                                                                                                                                                                  )
                                                                                                                                                                                 <
                                                                                                                                                                                10 /\
                                                                                                                                                                                (
                                                                                                                                                                                  forall 
                                                                                                                                                                                    (return_val:
                                                                                                                                                                                    MiniParse.Spec.Int.bounded_u16 
                                                                                                                                                                                      10
                                                                                                                                                                                    )
                                                                                                                                                                                  .
                                                                                                                                                                                    return_val ==
                                                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                      7
                                                                                                                                                                                     ==>
                                                                                                                                                                                    (
                                                                                                                                                                                      forall 
                                                                                                                                                                                        (any_result:
                                                                                                                                                                                        Prims.bool)
                                                                                                                                                                                      .
                                                                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                                          10
                                                                                                                                                                                          x2
                                                                                                                                                                                          (
                                                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                              7
                                                                                                                                                                                            
                                                                                                                                                                                          )
                                                                                                                                                                                         ==
                                                                                                                                                                                        any_result ==>
                                                                                                                                                                                        (
                                                                                                                                                                                          forall 
                                                                                                                                                                                            (any_result:
                                                                                                                                                                                            (
                                                                                                                                                                                              
                                                                                                                                                                                                x1:
                                                                                                                                                                                                (
                                                                                                                                                                                                  
                                                                                                                                                                                                    _:
                                                                                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                                                                                      true
                                                                                                                                                                                                      (
                                                                                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                                                          10
                                                                                                                                                                                                          x2
                                                                                                                                                                                                          (
                                                                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                                              7
                                                                                                                                                                                                            
                                                                                                                                                                                                          )
                                                                                                                                                                                                        
                                                                                                                                                                                                      )
                                                                                                                                                                                                     ->
                                                                                                                                                                                                    Prims.Tot
                                                                                                                                                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                                                                                ) ->
                                                                                                                                                                                                x2:
                                                                                                                                                                                                (
                                                                                                                                                                                                  
                                                                                                                                                                                                    _:
                                                                                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                                                                                      false
                                                                                                                                                                                                      (
                                                                                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                                                          10
                                                                                                                                                                                                          x2
                                                                                                                                                                                                          (
                                                                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                                              7
                                                                                                                                                                                                            
                                                                                                                                                                                                          )
                                                                                                                                                                                                        
                                                                                                                                                                                                      )
                                                                                                                                                                                                     ->
                                                                                                                                                                                                    Prims.Tot
                                                                                                                                                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                                                                                ) ->
                                                                                                                                                                                                Prims.Tot
                                                                                                                                                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                                                                            ))
                                                                                                                                                                                          .
                                                                                                                                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                                                            FStar.UInt16.v 
                                                                                                                                                                                              (
                                                                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                                  7
                                                                                                                                                                                                
                                                                                                                                                                                              )
                                                                                                                                                                                             <
                                                                                                                                                                                            10 /\
                                                                                                                                                                                            (
                                                                                                                                                                                              forall 
                                                                                                                                                                                                (any_result:
                                                                                                                                                                                                (
                                                                                                                                                                                                  
                                                                                                                                                                                                    _:
                                                                                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                                                                                      true
                                                                                                                                                                                                      (
                                                                                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                                                          10
                                                                                                                                                                                                          x2
                                                                                                                                                                                                          (
                                                                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                                              7
                                                                                                                                                                                                            
                                                                                                                                                                                                          )
                                                                                                                                                                                                        
                                                                                                                                                                                                      )
                                                                                                                                                                                                     ->
                                                                                                                                                                                                    Prims.Tot
                                                                                                                                                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                                                                                ))
                                                                                                                                                                                              .
                                                                                                                                                                                                (
                                                                                                                                                                                                  fun
                                                                                                                                                                                                    _
                                                                                                                                                                                                    ->
                                                                                                                                                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                                                                                                                                                                ) ==
                                                                                                                                                                                                any_result ==>
                                                                                                                                                                                                (
                                                                                                                                                                                                  forall 
                                                                                                                                                                                                    (any_result:
                                                                                                                                                                                                    (
                                                                                                                                                                                                      
                                                                                                                                                                                                        x2:
                                                                                                                                                                                                        (
                                                                                                                                                                                                          
                                                                                                                                                                                                            _:
                                                                                                                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                                                                                                                              false
                                                                                                                                                                                                              (
                                                                                                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                                                                  10
                                                                                                                                                                                                                  x2
                                                                                                                                                                                                                  (
                                                                                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                                                      7
                                                                                                                                                                                                                    
                                                                                                                                                                                                                  )
                                                                                                                                                                                                                
                                                                                                                                                                                                              )
                                                                                                                                                                                                             ->
                                                                                                                                                                                                            Prims.Tot
                                                                                                                                                                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                                                                                        ) ->
                                                                                                                                                                                                        Prims.Tot
                                                                                                                                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                                                                                    ))
                                                                                                                                                                                                  .
                                                                                                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                                                                    FStar.UInt16.v 
                                                                                                                                                                                                      (
                                                                                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                                          7
                                                                                                                                                                                                        
                                                                                                                                                                                                      )
                                                                                                                                                                                                     <
                                                                                                                                                                                                    10 /\
                                                                                                                                                                                                    (
                                                                                                                                                                                                      forall 
                                                                                                                                                                                                        (x6:
                                                                                                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                                                                                                          false
                                                                                                                                                                                                          (
                                                                                                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                                                              10
                                                                                                                                                                                                              x2
                                                                                                                                                                                                              (
                                                                                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                                                  7
                                                                                                                                                                                                                
                                                                                                                                                                                                              )
                                                                                                                                                                                                            
                                                                                                                                                                                                          )
                                                                                                                                                                                                        )
                                                                                                                                                                                                      .
                                                                                                                                                                                                        (*could not prove post-condition*)
                                                                                                                                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                                                                        FStar.UInt16.v 
                                                                                                                                                                                                          (
                                                                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                                              8
                                                                                                                                                                                                            
                                                                                                                                                                                                          )
                                                                                                                                                                                                         <
                                                                                                                                                                                                        10 /\
                                                                                                                                                                                                        (
                                                                                                                                                                                                          forall 
                                                                                                                                                                                                            (return_val:
                                                                                                                                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                                                                                                                                              10
                                                                                                                                                                                                            )
                                                                                                                                                                                                          .
                                                                                                                                                                                                            return_val ==
                                                                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                                              8
                                                                                                                                                                                                             ==>
                                                                                                                                                                                                            (
                                                                                                                                                                                                              forall 
                                                                                                                                                                                                                (any_result:
                                                                                                                                                                                                                Prims.bool)
                                                                                                                                                                                                              .
                                                                                                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                                                                  10
                                                                                                                                                                                                                  x2
                                                                                                                                                                                                                  (
                                                                                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                                                      8
                                                                                                                                                                                                                    
                                                                                                                                                                                                                  )
                                                                                                                                                                                                                 ==
                                                                                                                                                                                                                any_result ==>
                                                                                                                                                                                                                (
                                                                                                                                                                                                                  forall 
                                                                                                                                                                                                                    (any_result:
                                                                                                                                                                                                                    (
                                                                                                                                                                                                                      
                                                                                                                                                                                                                        x1:
                                                                                                                                                                                                                        (
                                                                                                                                                                                                                          
                                                                                                                                                                                                                            _:
                                                                                                                                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                                                                                                                                              true
                                                                                                                                                                                                                              (
                                                                                                                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                                                                                  10
                                                                                                                                                                                                                                  x2
                                                                                                                                                                                                                                  (
                                                                                                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                                                                      8
                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                
                                                                                                                                                                                                                              )
                                                                                                                                                                                                                             ->
                                                                                                                                                                                                                            Prims.Tot
                                                                                                                                                                                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                                                                                                        ) ->
                                                                                                                                                                                                                        x2:
                                                                                                                                                                                                                        (
                                                                                                                                                                                                                          
                                                                                                                                                                                                                            _:
                                                                                                                                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                                                                                                                                              false
                                                                                                                                                                                                                              (
                                                                                                                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                                                                                  10
                                                                                                                                                                                                                                  x2
                                                                                                                                                                                                                                  (
                                                                                                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                                                                      8
                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                
                                                                                                                                                                                                                              )
                                                                                                                                                                                                                             ->
                                                                                                                                                                                                                            Prims.Tot
                                                                                                                                                                                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                                                                                                        ) ->
                                                                                                                                                                                                                        Prims.Tot
                                                                                                                                                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                                                                                                    ))
                                                                                                                                                                                                                  .
                                                                                                                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                                                                                    FStar.UInt16.v 
                                                                                                                                                                                                                      (
                                                                                                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                                                          8
                                                                                                                                                                                                                        
                                                                                                                                                                                                                      )
                                                                                                                                                                                                                     <
                                                                                                                                                                                                                    10 /\
                                                                                                                                                                                                                    (
                                                                                                                                                                                                                      forall 
                                                                                                                                                                                                                        (any_result:
                                                                                                                                                                                                                        (
                                                                                                                                                                                                                          
                                                                                                                                                                                                                            _:
                                                                                                                                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                                                                                                                                              true
                                                                                                                                                                                                                              (
                                                                                                                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                                                                                  10
                                                                                                                                                                                                                                  x2
                                                                                                                                                                                                                                  (
                                                                                                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                                                                      8
                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                
                                                                                                                                                                                                                              )
                                                                                                                                                                                                                             ->
                                                                                                                                                                                                                            Prims.Tot
                                                                                                                                                                                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                                                                                                        ))
                                                                                                                                                                                                                      .
                                                                                                                                                                                                                        (
                                                                                                                                                                                                                          fun
                                                                                                                                                                                                                            _
                                                                                                                                                                                                                            ->
                                                                                                                                                                                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                                                                                                                                                                        ) ==
                                                                                                                                                                                                                        any_result ==>
                                                                                                                                                                                                                        (
                                                                                                                                                                                                                          forall 
                                                                                                                                                                                                                            (any_result:
                                                                                                                                                                                                                            (
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                x2:
                                                                                                                                                                                                                                (
                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                    _:
                                                                                                                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                                                                                                                      false
                                                                                                                                                                                                                                      (
                                                                                                                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                                                                                          10
                                                                                                                                                                                                                                          x2
                                                                                                                                                                                                                                          (
                                                                                                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                                                                              8
                                                                                                                                                                                                                                            
                                                                                                                                                                                                                                          )
                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                      )
                                                                                                                                                                                                                                     ->
                                                                                                                                                                                                                                    Prims.Tot
                                                                                                                                                                                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                                                                                                                ) ->
                                                                                                                                                                                                                                Prims.Tot
                                                                                                                                                                                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                                                                                                            ))
                                                                                                                                                                                                                          .
                                                                                                                                                                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                                                                                            FStar.UInt16.v 
                                                                                                                                                                                                                              (
                                                                                                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                 TAC>> No goals left
TAC>> gen_parser_impl spits:
TAC>> MiniParse.Impl.Combinators.parse_nondep_then_impl #MiniParse.Tac.Spec.u8
  #MiniParse.Spec.Int.parse_u8
  MiniParse.Impl.Int.parse_u8_impl
  #(MiniParse.Spec.List.nlist 79 MiniParse.Tac.Spec.u8 * MiniParse.Tac.Spec.u8)
  #(MiniParse.Spec.Combinators.nondep_then #(MiniParse.Spec.List.nlist 79 MiniParse.Tac.Spec.u8)
      (MiniParse.Spec.List.parse_nlist 79 #MiniParse.Tac.Spec.u8 MiniParse.Spec.Int.parse_u8)
      #MiniParse.Tac.Spec.u8
      MiniParse.Spec.Int.parse_u8)
  (MiniParse.Impl.Combinators.parse_nondep_then_impl #(MiniParse.Spec.List.nlist 79
          MiniParse.Tac.Spec.u8)
      #(MiniParse.Spec.List.parse_nlist 79 #MiniParse.Tac.Spec.u8 MiniParse.Spec.Int.parse_u8)
      (MiniParse.Impl.List.parse_nlist_impl 79
          (MiniParse.Tac.Impl.mk_u32 79)
          #MiniParse.Tac.Spec.u8
          #MiniParse.Spec.Int.parse_u8
          MiniParse.Impl.Int.parse_u8_impl)
      #MiniParse.Tac.Spec.u8
      #MiniParse.Spec.Int.parse_u8
      MiniParse.Impl.Int.parse_u8_impl)
TAC>> Inductive type with 4
TAC>> function
| Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4 ->
  MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4
| Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3 ->
  MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 4
| Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2 ->
  MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 4
| Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1 ->
  MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 4
| _ -> MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4
                                                                                                             
                                                                                                                                                    _:
                                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                                      true
                                                                                                                                                      (
                                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                          7
                                                                                                                                                          x2
                                                                                                                                                          (
                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                              5
                                                                                                                                                            
                                                                                                                                                          )
                                                                                                                                                        
                                                                                                                                                      )
                                                                                                                                                     ->
                                                                                                                                                    Prims.Tot
                                                                                                                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                                                                                                ) ->
                                                                                                                                                x2:
                                                                                                                                                (
                                                                                                                                                  
                                                                                                                                                    _:
                                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                                      false
                                                                                                                                                      (
                                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                          7
                                                                                                                                                          x2
                                                                                                                                                          (
                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                              5
                                                                                                                                                            
                                                                                                                                                          )
                                                                                                                                                        
                                                                                                                                                      )
                                                                                                                                                     ->
                                                                                                                                                    Prims.Tot
                                                                                                                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                                                                                                ) ->
                                                                                                                                                Prims.Tot
                                                                                                                                                Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                                                                                            ))
                                                                                                                                          .
                                                                                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                                                            FStar.UInt16.v 
                                                                                                                                              (
                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                  5
                                                                                                                                                
                                                                                                                                              )
                                                                                                                                             <
                                                                                                                                            7 /\
                                                                                                                                            (
                                                                                                                                              forall 
                                                                                                                                                (any_result:
                                                                                                                                                (
                                                                                                                                                  
                                                                                                                                                    _:
                                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                                      true
                                                                                                                                                      (
                                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                          7
                                                                                                                                                          x2
                                                                                                                                                          (
                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                              5
                                                                                                                                                            
                                                                                                                                                          )
                                                                                                                                                        
                                                                                                                                                      )
                                                                                                                                                     ->
                                                                                                                                                    Prims.Tot
                                                                                                                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                                                                                                ))
                                                                                                                                              .
                                                                                                                                                (
                                                                                                                                                  fun
                                                                                                                                                    _
                                                                                                                                                    ->
                                                                                                                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6
                                                                                                                                                ) ==
                                                                                                                                                any_result ==>
                                                                                                                                                (
                                                                                                                                                  forall 
                                                                                                                                                    (any_result:
                                                                                                                                                    (
                                                                                                                                                      
                                                                                                                                                        x2:
                                                                                                                                                        (
                                                                                                                                                          
                                                                                                                                                            _:
                                                                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                                                                              false
                                                                                                                                                              (
                                                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                  7
                                                                                                                                                                  x2
                                                                                                                                                                  (
                                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                      5
                                                                                                                                                                    
                                                                                                                                                                  )
                                                                                                                                                                
                                                                                                                                                              )
                                                                                                                                                             ->
                                                                                                                                                            Prims.Tot
                                                                                                                                                            Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                                                                                                        ) ->
                                                                                                                                                        Prims.Tot
                                                                                                                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                                                                                                    ))
                                                                                                                                                  .
                                                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                                                                    FStar.UInt16.v 
                                                                                                                                                      (
                                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                                          5
                                                                                                                                                        
                                                                                                                                                      )
                                                                                                                                                     <
                                                                                                                                                    7
                                                                                                                                                )
                                                                                                                                            )
                                                                                                                                        )
                                                                                                                                    )
                                                                                                                                )
                                                                                                                            )
                                                                                                                        )
                                                                                                                    )
                                                                                                                )
                                                                                                            )
                                                                                                        )
                                                                                                    )
                                                                                                ))))
                                                                                )))))))))))))))))))) /\
    (forall (any_result:
        (_: MiniParse.Spec.Int.bounded_u16 7 ->
            Prims.GTot Bench.MiniParse.Size7.Factor1.Seed00.Goal.test)).
        (fun x2 ->
            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                  x2
                  (MiniParse.Spec.Int.mk_u16 0))
              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
              (fun _ ->
                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                        x2
                        (MiniParse.Spec.Int.mk_u16 1))
                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                    (fun _ ->
                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                              x2
                              (MiniParse.Spec.Int.mk_u16 2))
                          (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                          (fun _ ->
                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                    x2
                                    (MiniParse.Spec.Int.mk_u16 3))
                                (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                                (fun _ ->
                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 4))
                                      (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                                      (fun _ ->
                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                7
                                                x2
                                                (MiniParse.Spec.Int.mk_u16 5))
                                            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6)
                                            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7))
                                ))))) ==
        any_result ==>
        (forall (any_result:
            (
                g1:
                (_: Bench.MiniParse.Size7.Factor1.Seed00.Goal.test ->
                    Prims.GTot (MiniParse.Spec.Int.bounded_u16 7)) ->
                Prims.Pure
                  (MiniParse.Spec.Base.parser_spec Bench.MiniParse.Size7.Factor1.Seed00.Goal.test)
                  (MiniParse.Spec.Combinators.synth_inverse g1
                      (fun x2 ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x2
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 3))
                                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4
                                              )
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        7
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 4))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              7
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 5))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6
                                                          )
                                                          (fun _ ->
                                                              Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7
                                                          ))))))))
                  (fun _ -> Prims.l_True))).
            (forall (x1: Bench.MiniParse.Size7.Factor1.Seed00.Goal.test).
                (*could not prove post-condition*)
                C7? x1 == true ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 6) < 7 /\
                ~(C7? x1 == true) ==>
                (C6? x1 == true ==>
                  (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                  FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 5) < 7) /\
                (~(C6? x1 == true) ==>
                  C5? x1 == true ==>
                  (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                  FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 4) < 7 /\
                  ~(C5? x1 == true) ==>
                  (C4? x1 == true ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) < 7) /\
                  (~(C4? x1 == true) ==>
                    C3? x1 == true ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 7 /\
                    ~(C3? x1 == true) ==>
                    (C2? x1 == true ==>
                      (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                      FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7) /\
                    (~(C2? x1 == true) ==>
                      C1? x1 == true ==>
                      (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                      FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
                      ~(C1? x1 == true) ==>
                      (forall (b: Bench.MiniParse.Size7.Factor1.Seed00.Goal.test).
                          x1 == b ==>
                          (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                          FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 6) < 7))))) /\
            (forall (any_result:
                (_: Bench.MiniParse.Size7.Factor1.Seed00.Goal.test ->
                    Prims.GTot (MiniParse.Spec.Int.bounded_u16 7))).
                (fun x1 ->
                    (match x1 with
                      | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7 ->
                        MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7
                      | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6 ->
                        MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 7
                      | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5 ->
                        MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 7
                      | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4 ->
                        MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 7
                      | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3 ->
                        MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 7
                      | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2 ->
                        MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 7
                      | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1 ->
                        MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 7
                      | _ -> MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7)
                    <:
                    MiniParse.Spec.Int.bounded_u16 7) ==
                any_result ==>
                MiniParse.Spec.Combinators.synth_inverse (fun x1 ->
                      (match x1 with
                        | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7 ->
                          MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7
                        | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6 ->
                          MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 7
                        | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5 ->
                          MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 7
                        | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4 ->
                          MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 7
                        | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3 ->
                          MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 7
                        | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2 ->
                          MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 7
                        | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1 ->
                          MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 7
                        | _ -> MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7)
                      <:
                      MiniParse.Spec.Int.bounded_u16 7)
                  (fun x2 ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 0))
                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 1))
                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 2))
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 3))
                                          (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    7
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 4))
                                                (fun _ ->
                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          7
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 5))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6
                                                      )
                                                      (fun _ ->
                                                          Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7
                                                      )))))))))))
SMT goals (0):

TAC>> Applied: forall_intro
proof-state: State dump @ depth 2 (Some goals left):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Tac.Base.fst(169,4-169,28)
ACTIVE goals (1):
 |- _ : Prims.squash ((forall (x2: MiniParse.Spec.Int.bounded_u16 4).
        (*could not prove post-condition*)
        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4 /\
        (forall (return_val: MiniParse.Spec.Int.bounded_u16 4).
            return_val == MiniParse.Spec.Int.mk_u16 0 ==>
            (forall (any_result: Prims.bool).
                MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0) == any_result ==>
                (forall (any_result:
                    (
                        x1:
                        (
                            _:
                            MiniParse.Tac.Base.ctest true
                              (MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0)) ->
                            Prims.Tot Bench.MiniParse.Size4.Factor1.Seed00.Goal.test) ->
                        x2:
                        (
                            _:
                            MiniParse.Tac.Base.ctest false
                              (MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0)) ->
                            Prims.Tot Bench.MiniParse.Size4.Factor1.Seed00.Goal.test) ->
                        Prims.Tot Bench.MiniParse.Size4.Factor1.Seed00.Goal.test)).
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4 /\
                    (forall (any_result:
                        (
                            _:
                            MiniParse.Tac.Base.ctest true
                              (MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0)) ->
                            Prims.Tot Bench.MiniParse.Size4.Factor1.Seed00.Goal.test)).
                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1) == any_result ==>
                        (forall (any_result:
                            (
                                x2:
                                (
                                    _:
                                    MiniParse.Tac.Base.ctest false
                                      (MiniParse.Spec.Int.bounded_u16_eq 4
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 0)) ->
                                    Prims.Tot Bench.MiniParse.Size4.Factor1.Seed00.Goal.test) ->
                                Prims.Tot Bench.MiniParse.Size4.Factor1.Seed00.Goal.test)).
                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4 /\
                            (forall (x8:
                                MiniParse.Tac.Base.ctest false
                                  (MiniParse.Spec.Int.bounded_u16_eq 4
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 0))).
                                (*could not prove post-condition*)
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                                (forall (return_val: MiniParse.Spec.Int.bounded_u16 4).
                                    return_val == MiniParse.Spec.Int.mk_u16 1 ==>
                                    (forall (any_result: Prims.bool).
                                        MiniParse.Spec.Int.bounded_u16_eq 4
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 1) ==
                                        any_result ==>
                                        (forall (any_result:
                                            (
                                                x1:
                                                (
                                                    _:
                                                    MiniParse.Tac.Base.ctest true
                                                      (MiniParse.Spec.Int.bounded_u16_eq 4
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 1)) ->
                                                    Prims.Tot
                                                    Bench.MiniParse.Size4.Factor1.Seed00.Goal.test) ->
                                                x2:
                                                (
                                                    _:
                                                    MiniParse.Tac.Base.ctest false
                                                      (MiniParse.Spec.Int.bounded_u16_eq 4
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 1)) ->
                                                    Prims.Tot
                                                    Bench.MiniParse.Size4.Factor1.Seed00.Goal.test) ->
                                                Prims.Tot
                                                Bench.MiniParse.Size4.Factor1.Seed00.Goal.test)).
                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                                            (forall (any_result:
                                                (
                                                    _:
                                                    MiniParse.Tac.Base.ctest true
                                                      (MiniParse.Spec.Int.bounded_u16_eq 4
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 1)) ->
                                                    Prims.Tot
                                                    Bench.MiniParse.Size4.Factor1.Seed00.Goal.test))
                                              .
                                                (fun _ ->
                                                    Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2) ==
                                                any_result ==>
                                                (forall (any_result:
                                                    (
                                                        x2:
                                                        (
                                                            _:
                                                            MiniParse.Tac.Base.ctest false
                                                              (MiniParse.Spec.Int.bounded_u16_eq 4
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 1)) ->
                                                            Prims.Tot
                                                            Bench.MiniParse.Size4.Factor1.Seed00.Goal.test
                                                        ) ->
                                                        Prims.Tot
                                                        Bench.MiniParse.Size4.Factor1.Seed00.Goal.test
                                                    )).
                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                                                    (forall (x6:
                                                        MiniParse.Tac.Base.ctest false
                                                          (MiniParse.Spec.Int.bounded_u16_eq 4
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 1))).
                                                        (*could not prove post-condition*)
                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) <
                                                        4 /\
                                                        (forall (return_val:
                                                            MiniParse.Spec.Int.bounded_u16 4).
                                                            return_val ==
                                                            MiniParse.Spec.Int.mk_u16 2 ==>
                                                            (forall (any_result: Prims.bool).
                                                                MiniParse.Spec.Int.bounded_u16_eq 4
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 2) ==
                                                                any_result ==>
                                                                (forall (any_result:
                                                                    (
                                                                        x1:
                                                                        (
                                                                            _:
                                                                            MiniParse.Tac.Base.ctest 
                                                                              true
                                                                              (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  4
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      2)) ->
                                                                            Prims.Tot
                                                                            Bench.MiniParse.Size4.Factor1.Seed00.Goal.test
                                                                        ) ->
                                                                        x2:
                                                                        (
                                                                            _:
                                                                            MiniParse.Tac.Base.ctest 
                                                                              false
                                                                              (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  4
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      2)) ->
                                                                            Prims.Tot
                                                                            Bench.MiniParse.Size4.Factor1.Seed00.Goal.test
                                                                        ) ->
                                                                        Prims.Tot
                                                                        Bench.MiniParse.Size4.Factor1.Seed00.Goal.test
                                                                    )).
                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                          2) <
                                                                    4 /\
                                                                    (forall (any_result:
                                                                        (
                                                                            _:
                                                                            MiniParse.Tac.Base.ctest 
                                                                              true
                                                                              (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  4
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      2)) ->
                                                                            Prims.Tot
                                                                            Bench.MiniParse.Size4.Factor1.Seed00.Goal.test
                                                                        )).
                                                                        (fun _ ->
                                                                            Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3
                                                                        ) ==
                                                                        any_result ==>
                                                                        (forall (any_result:
                                                                            (
                                                                                x2:
                                                                                (
                                                                                    _:
                                                                                    MiniParse.Tac.Base.ctest 
                                                                                      false
                                                                                      (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                          4
                                                                                          x2
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              2)) ->
                                                                                    Prims.Tot
                                                                                    Bench.MiniParse.Size4.Factor1.Seed00.Goal.test
                                                                                ) ->
                                                                                Prims.Tot
                                                                                Bench.MiniParse.Size4.Factor1.Seed00.Goal.test
                                                                            )).
                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                                                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                  2) <
                                                                            4)))))))))))))))))) /\
    (forall (any_result:
        (_: MiniParse.Spec.Int.bounded_u16 4 ->
            Prims.GTot Bench.MiniParse.Size4.Factor1.Seed00.Goal.test)).
        (fun x2 ->
            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                  x2
                  (MiniParse.Spec.Int.mk_u16 0))
              (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
              (fun _ ->
                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                        x2
                        (MiniParse.Spec.Int.mk_u16 1))
                    (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                    (fun _ ->
                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                              x2
                              (MiniParse.Spec.Int.mk_u16 2))
                          (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                          (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4)))) ==
        any_result ==>
        (forall (any_result:
            (
                g1:
                (_: Bench.MiniParse.Size4.Factor1.Seed00.Goal.test ->
                    Prims.GTot (MiniParse.Spec.Int.bounded_u16 4)) ->
                Prims.Pure
                  (MiniParse.Spec.Base.parser_spec Bench.MiniParse.Size4.Factor1.Seed00.Goal.test)
                  (MiniParse.Spec.Combinators.synth_inverse g1
                      (fun x2 ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x2
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4)))))
                  (fun _ -> Prims.l_True))).
            (forall (x1: Bench.MiniParse.Size4.Factor1.Seed00.Goal.test).
                (*could not prove post-condition*)
                C4? x1 == true ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) < 4 /\
                ~(C4? x1 == true) ==>
                (C3? x1 == true ==>
                  (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                  FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 4) /\
                (~(C3? x1 == true) ==>
                  C2? x1 == true ==>
                  (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                  FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                  ~(C2? x1 == true) ==>
                  (C1? x1 == true ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4) /\
                  (~(C1? x1 == true) ==>
                    (forall (b: Bench.MiniParse.Size4.Factor1.Seed00.Goal.test).
                        x1 == b ==>
                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) < 4)))) /\
            (forall (any_result:
                (_: Bench.MiniParse.Size4.Factor1.Seed00.Goal.test ->
                    Prims.GTot (MiniParse.Spec.Int.bounded_u16 4))).
                (fun x1 ->
                    (match x1 with
                      | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4 ->
                        MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4
                      | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3 ->
                        MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 4
                      | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2 ->
                        MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 4
                      | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1 ->
                        MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 4
                      | _ -> MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4)
                    <:
                    MiniParse.Spec.Int.bounded_u16 4) ==
                any_result ==>
                MiniParse.Spec.Combinators.synth_inverse (fun x1 ->
                      (match x1 with
                        | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4 ->
                          MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4
                        | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3 ->
                          MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 4
                        | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2 ->
                          MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 4
                        | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1 ->
                          MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 4
                        | _ -> MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4)
                      <:
                      MiniParse.Spec.Int.bounded_u16 4)
                  (fun x2 ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                            x2
                            (MiniParse.Spec.Int.mk_u16 0))
                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 1))
                              (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 2))
                                    (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                                    (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4))))))))
SMT goals (0):

TAC>> Applied: forall_intro
                                                                                                                                                                                 8
                                                                                                                                                                                                                                
                                                                                                                                                                                                                              )
                                                                                                                                                                                                                             <
                                                                                                                                                                                                                            10
                                                                                                                                                                                                                        )
                                                                                                                                                                                                                    )
                                                                                                                                                                                                                )
                                                                                                                                                                                                            )
                                                                                                                                                                                                        )
                                                                                                                                                                                                    )
                                                                                                                                                                                                )
                                                                                                                                                                                            )
                                                                                                                                                                                        )
                                                                                                                                                                                    )
                                                                                                                                                                                )
                                                                                                                                                                            )
                                                                                                                                                                        )
                                                                                                                                                                    )
                                                                                                                                                                )
                                                                                                                                                            )
                                                                                                                                                        )
                                                                                                                                                    )
                                                                                                                                                )
                                                                                                                                            )
                                                                                                                                        )
                                                                                                                                    )
                                                                                                                                )
                                                                                                                            )
                                                                                                                        )
                                                                                                                    )
                                                                                                                )
                                                                                                            )
                                                                                                        )
                                                                                                    )
                                                                                                ))))
                                                                                )))))))))))))))))))) /\
    (forall (any_result:
        (_: MiniParse.Spec.Int.bounded_u16 10 ->
            Prims.GTot Bench.MiniParse.Size10.Factor1.Seed00.Goal.test)).
        (fun x2 ->
            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                  x2
                  (MiniParse.Spec.Int.mk_u16 0))
              (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
              (fun _ ->
                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                        x2
                        (MiniParse.Spec.Int.mk_u16 1))
                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                    (fun _ ->
                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                              x2
                              (MiniParse.Spec.Int.mk_u16 2))
                          (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                          (fun _ ->
                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                    x2
                                    (MiniParse.Spec.Int.mk_u16 3))
                                (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                                (fun _ ->
                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 4))
                                      (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                                      (fun _ ->
                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                10
                                                x2
                                                (MiniParse.Spec.Int.mk_u16 5))
                                            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                            (fun _ ->
                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                      10
                                                      x2
                                                      (MiniParse.Spec.Int.mk_u16 6))
                                                  (fun _ ->
                                                      Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7)
                                                  (fun _ ->
                                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                            10
                                                            x2
                                                            (MiniParse.Spec.Int.mk_u16 7))
                                                        (fun _ ->
                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                        )
                                                        (fun _ ->
                                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                  10
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 8))
                                                              (fun _ ->
                                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                              )
                                                              (fun _ ->
                                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                              )))))))))) ==
        any_result ==>
        (forall (any_result:
            (
                g1:
                (_: Bench.MiniParse.Size10.Factor1.Seed00.Goal.test ->
                    Prims.GTot (MiniParse.Spec.Int.bounded_u16 10)) ->
                Prims.Pure
                  (MiniParse.Spec.Base.parser_spec Bench.MiniParse.Size10.Factor1.Seed00.Goal.test)
                  (MiniParse.Spec.Combinators.synth_inverse g1
                      (fun x2 ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x2
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 3))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 4))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 5))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x2
                                                                    (MiniParse.Spec.Int.mk_u16 6))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                                )
                                                                (fun _ ->
                                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          10
                                                                          x2
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              7))
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                                      )
                                                                      (fun _ ->
                                                                          MiniParse.Tac.Base.mk_if_t 
                                                                            (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                10
                                                                                x2
                                                                                (MiniParse.Spec.Int.mk_u16 
                                                                                    8))
                                                                            (fun _ ->
                                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                            )
                                                                            (fun _ ->
                                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                                            )))))))))))
                  (fun _ -> Prims.l_True))).
            (forall (x1: Bench.MiniParse.Size10.Factor1.Seed00.Goal.test).
                (*could not prove post-condition*)
                C10? x1 == true ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 9) < 10 /\
                ~(C10? x1 == true) ==>
                (C9? x1 == true ==>
                  (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                  FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 8) < 10) /\
                (~(C9? x1 == true) ==>
                  C8? x1 == true ==>
                  (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                  FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 7) < 10 /\
                  ~(C8? x1 == true) ==>
                  (C7? x1 == true ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 6) < 10) /\
                  (~(C7? x1 == true) ==>
                    C6? x1 == true ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 5) < 10 /\
                    ~(C6? x1 == true) ==>
                    (C5? x1 == true ==>
                      (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                      FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 4) < 10) /\
                    (~(C5? x1 == true) ==>
                      C4? x1 == true ==>
                      (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                      FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) < 10 /\
                      ~(C4? x1 == true) ==>
                      (C3? x1 == true ==>
                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 10) /\
                      (~(C3? x1 == true) ==>
                        C2? x1 == true ==>
                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                        ~(C2? x1 == true) ==>
                        (C1? x1 == true ==>
                          (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                          FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10) /\
                        (~(C1? x1 == true) ==>
                          (forall (b: Bench.MiniParse.Size10.Factor1.Seed00.Goal.test).
                              x1 == b ==>
                              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 9) < 10))))))) /\
            (forall (any_result:
                (_: Bench.MiniParse.Size10.Factor1.Seed00.Goal.test ->
                    Prims.GTot (MiniParse.Spec.Int.bounded_u16 10))).
                (fun x1 ->
                    (match x1 with
                      | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10 ->
                        MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10
                      | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9 ->
                        MiniParse.Spec.Int.mk_u16 8 <: MiniParse.Spec.Int.bounded_u16 10
                      | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8 ->
                        MiniParse.Spec.Int.mk_u16 7 <: MiniParse.Spec.Int.bounded_u16 10
                      | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7 ->
                        MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 10
                      | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6 ->
                        MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 10
                      | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5 ->
                        MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 10
                      | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4 ->
                        MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 10
                      | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3 ->
                        MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 10
                      | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2 ->
                        MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 10
                      | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1 ->
                        MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 10
                      | _ -> MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10)
                    <:
                    MiniParse.Spec.Int.bounded_u16 10) ==
                any_result ==>
                MiniParse.Spec.Combinators.synth_inverse (fun x1 ->
                      (match x1 with
                        | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10 ->
                          MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10
                        | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9 ->
                          MiniParse.Spec.Int.mk_u16 8 <: MiniParse.Spec.Int.bounded_u16 10
                        | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8 ->
                          MiniParse.Spec.Int.mk_u16 7 <: MiniParse.Spec.Int.bounded_u16 10
                        | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7 ->
                          MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 10
                        | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6 ->
                          MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 10
                        | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5 ->
                          MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 10
                        | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4 ->
                          MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 10
                        | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3 ->
                          MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 10
                        | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2 ->
                          MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 10
                        | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1 ->
                          MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 10
                        | _ -> MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10)
                      <:
                      MiniParse.Spec.Int.bounded_u16 10)
                  (fun x2 ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 0))
                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 1))
                              (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 2))
                                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 3))
                                          (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 4))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 5))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 6))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                            )
                                                            (fun _ ->
                                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                      10
                                                                      x2
                                                                      (MiniParse.Spec.Int.mk_u16 7))
                                                                  (fun _ ->
                                                                      Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                                  )
                                                                  (fun _ ->
                                                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                            10
                                                                            x2
                                                                            (MiniParse.Spec.Int.mk_u16 
                                                                                8))
                                                                        (fun _ ->
                                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                        )
                                                                        (fun _ ->
                                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                                        ))))))))))))))
SMT goals (0):

TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: synth_inverse_forall_bounded_u16_solve, main goal
TAC>> Success: synth_inverse_forall_bounded_u16_solve, main goal
TAC>> Applied: forall_intro
proof-state: State dump @ depth 28 (Some goals left):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Tac.Base.fst(169,4-169,28)
ACTIVE goals (1):
(x:
(_: MiniParse.Spec.Int.bounded_u16 4 -> Prims.GTot Bench.MiniParse.Size4.Factor1.Seed00.Goal.test)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4)))) ==
x), (x:
(
    g1:
    (_: Bench.MiniParse.Size4.Factor1.Seed00.Goal.test ->
        Prims.GTot (MiniParse.Spec.Int.bounded_u16 4)) ->
    Prims.Pure (MiniParse.Spec.Base.parser_spec Bench.MiniParse.Size4.Factor1.Seed00.Goal.test)
      (MiniParse.Spec.Combinators.synth_inverse g1
          (fun x2 ->
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                    x2
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                          x2
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x2
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4)))))
      (fun _ -> Prims.l_True))), (x:
(_: Bench.MiniParse.Size4.Factor1.Seed00.Goal.test -> Prims.GTot (MiniParse.Spec.Int.bounded_u16 4))), (_:
(fun x1 ->
    (match x1 with
      | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4 ->
        MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4
      | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3 ->
        MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 4
      | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2 ->
        MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 4
      | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1 ->
        MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 4
      | _ -> MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4)
    <:
    MiniParse.Spec.Int.bounded_u16 4) ==
x) |- _ : Prims.squash ((forall (x2: MiniParse.Spec.Int.bounded_u16 4).
        (*could not prove post-condition*)
        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4 /\
        (forall (return_val: MiniParse.Spec.Int.bounded_u16 4).
            return_val == MiniParse.Spec.Int.mk_u16 0 ==>
            (forall (any_result: Prims.bool).
                MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0) == any_result ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4 /\
                (forall (any_result:
                    (
                        _:
                        MiniParse.Tac.Base.ctest true
                          (MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0)) ->
                        Prims.Tot Bench.MiniParse.Size4.Factor1.Seed00.Goal.test)).
                    (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1) == any_result ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4 /\
                    (forall (x8:
                        MiniParse.Tac.Base.ctest false
                          (MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0))).
                        (*could not prove post-condition*)
                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 4).
                            return_val == MiniParse.Spec.Int.mk_u16 1 ==>
                            (forall (any_result: Prims.bool).
                                MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 1) ==
                                any_result ==>
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                                (forall (any_result:
                                    (
                                        _:
                                        MiniParse.Tac.Base.ctest true
                                          (MiniParse.Spec.Int.bounded_u16_eq 4
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1)) ->
                                        Prims.Tot Bench.MiniParse.Size4.Factor1.Seed00.Goal.test)).
                                    (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2) ==
                                    any_result ==>
                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                                    (forall (x6:
                                        MiniParse.Tac.Base.ctest false
                                          (MiniParse.Spec.Int.bounded_u16_eq 4
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1))).
                                        (*could not prove post-condition*)
                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 4 /\
                                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 4).
                                            return_val == MiniParse.Spec.Int.mk_u16 2 ==>
                                            (forall (any_result: Prims.bool).
                                                MiniParse.Spec.Int.bounded_u16_eq 4
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 2) ==
                                                any_result ==>
                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 4 /\
                                                (forall (any_result:
                                                    (
                                                        _:
                                                        MiniParse.Tac.Base.ctest true
                                                          (MiniParse.Spec.Int.bounded_u16_eq 4
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2)) ->
                                                        Prims.Tot
                                                        Bench.MiniParse.Size4.Factor1.Seed00.Goal.test
                                                    )).
                                                    (fun _ ->
                                                        Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3
                                                    ) ==
                                                    any_result ==>
                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 4
                                                )))))))))))) /\
    (forall (any_result:
        (_: MiniParse.Spec.Int.bounded_u16 4 ->
            Prims.GTot Bench.MiniParse.Size4.Factor1.Seed00.Goal.test)).
        (fun x2 ->
            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                  x2
                  (MiniParse.Spec.Int.mk_u16 0))
              (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
              (fun _ ->
                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                        x2
                        (MiniParse.Spec.Int.mk_u16 1))
                    (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                    (fun _ ->
                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                              x2
                              (MiniParse.Spec.Int.mk_u16 2))
                          (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                          (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4)))) ==
        any_result ==>
        (forall (any_result:
            (
                f2:
                (_: Bench.MiniParse.Size4.Factor1.Seed00.Goal.test ->
                    Prims.GTot (MiniParse.Spec.Int.bounded_u16 4)) ->
                u98476:
                Prims.squash (MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16' 4
                      Bench.MiniParse.Size4.Factor1.Seed00.Goal.test
                      (fun x2 ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x2
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4))))
                      f2) ->
                Prims.Tot
                (Prims.squash (MiniParse.Spec.Combinators.synth_inverse f2
                        (fun x2 ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 0))
                              (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 1))
                                    (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              4
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 2))
                                          (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                                          (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4))))
                    ))))
            (x1: Bench.MiniParse.Size4.Factor1.Seed00.Goal.test).
            (*could not prove post-condition*)
            C4? x1 == true ==>
            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) < 4 /\
            ~(C4? x1 == true) ==>
            (C3? x1 == true ==>
              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 4) /\
            (~(C3? x1 == true) ==>
              C2? x1 == true ==>
              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
              ~(C2? x1 == true) ==>
              (C1? x1 == true ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4) /\
              (~(C1? x1 == true) ==>
                (forall (b: Bench.MiniParse.Size4.Factor1.Seed00.Goal.test).
                    x1 == b ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) < 4))))))
SMT goals (0):

TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> No goals left
TAC>> Checking success for: synth_inverse_forall_bounded_u16_solve
TAC>> Success: synth_inverse_forall_bounded_u16_solve
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: synth_inverse_forall_bounded_u16_solve, main goal
TAC>> Success: synth_inverse_forall_bounded_u16_solve, main goal
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
proof-state: State dump @ depth 28 (Some goals left):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Tac.Base.fst(169,4-169,28)
ACTIVE goals (1):
(x:
(_: MiniParse.Spec.Int.bounded_u16 7 -> Prims.GTot Bench.MiniParse.Size7.Factor1.Seed00.Goal.test)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6)
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7))))))) ==
x), (x:
(
    g1:
    (_: Bench.MiniParse.Size7.Factor1.Seed00.Goal.test ->
        Prims.GTot (MiniParse.Spec.Int.bounded_u16 7)) ->
    Prims.Pure (MiniParse.Spec.Base.parser_spec Bench.MiniParse.Size7.Factor1.Seed00.Goal.test)
      (MiniParse.Spec.Combinators.synth_inverse g1
          (fun x2 ->
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                    x2
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                          x2
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x2
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 3))
                                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 4))
                                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 5))
                                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6
                                              )
                                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7
                                              ))))))))
      (fun _ -> Prims.l_True))), (x:
(_: Bench.MiniParse.Size7.Factor1.Seed00.Goal.test -> Prims.GTot (MiniParse.Spec.Int.bounded_u16 7))), (_:
(fun x1 ->
    (match x1 with
      | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7 ->
        MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7
      | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6 ->
        MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 7
      | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5 ->
        MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 7
      | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4 ->
        MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 7
      | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3 ->
        MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 7
      | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2 ->
        MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 7
      | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1 ->
        MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 7
      | _ -> MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7)
    <:
    MiniParse.Spec.Int.bounded_u16 7) ==
x) |- _ : Prims.squash ((forall (x2: MiniParse.Spec.Int.bounded_u16 7).
        (*could not prove post-condition*)
        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
        (forall (return_val: MiniParse.Spec.Int.bounded_u16 7).
            return_val == MiniParse.Spec.Int.mk_u16 0 ==>
            (forall (any_result: Prims.bool).
                MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0) == any_result ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
                (forall (any_result:
                    (
                        _:
                        MiniParse.Tac.Base.ctest true
                          (MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0)) ->
                        Prims.Tot Bench.MiniParse.Size7.Factor1.Seed00.Goal.test)).
                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1) == any_result ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
                    (forall (x14:
                        MiniParse.Tac.Base.ctest false
                          (MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0))).
                        (*could not prove post-condition*)
                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7 /\
                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 7).
                            return_val == MiniParse.Spec.Int.mk_u16 1 ==>
                            (forall (any_result: Prims.bool).
                                MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 1) ==
                                any_result ==>
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7 /\
                                (forall (any_result:
                                    (
                                        _:
                                        MiniParse.Tac.Base.ctest true
                                          (MiniParse.Spec.Int.bounded_u16_eq 7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1)) ->
                                        Prims.Tot Bench.MiniParse.Size7.Factor1.Seed00.Goal.test)).
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2) ==
                                    any_result ==>
                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7 /\
                                    (forall (x12:
                                        MiniParse.Tac.Base.ctest false
                                          (MiniParse.Spec.Int.bounded_u16_eq 7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1))).
                                        (*could not prove post-condition*)
                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 7 /\
                                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 7).
                                            return_val == MiniParse.Spec.Int.mk_u16 2 ==>
                                            (forall (any_result: Prims.bool).
                                                MiniParse.Spec.Int.bounded_u16_eq 7
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 2) ==
                                                any_result ==>
                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 7 /\
                                                (forall (any_result:
                                                    (
                                                        _:
                                                        MiniParse.Tac.Base.ctest true
                                                          (MiniParse.Spec.Int.bounded_u16_eq 7
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2)) ->
                                                        Prims.Tot
                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                    )).
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3
                                                    ) ==
                                                    any_result ==>
                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 7 /\
                                                    (forall (x10:
                                                        MiniParse.Tac.Base.ctest false
                                                          (MiniParse.Spec.Int.bounded_u16_eq 7
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2))).
                                                        (*could not prove post-condition*)
                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) <
                                                        7 /\
                                                        (forall (return_val:
                                                            MiniParse.Spec.Int.bounded_u16 7).
                                                            return_val ==
                                                            MiniParse.Spec.Int.mk_u16 3 ==>
                                                            (forall (any_result: Prims.bool).
                                                                MiniParse.Spec.Int.bounded_u16_eq 7
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 3) ==
                                                                any_result ==>
                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                      3) <
                                                                7 /\
                                                                (forall (any_result:
                                                                    (
                                                                        _:
                                                                        MiniParse.Tac.Base.ctest true
                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                              7
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  3)) ->
                                                                        Prims.Tot
                                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                    )).
                                                                    (fun _ ->
                                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4
                                                                    ) ==
                                                                    any_result ==>
                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                          3) <
                                                                    7 /\
                                                                    (forall (x8:
                                                                        MiniParse.Tac.Base.ctest false
                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                              7
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  3))).
                                                                        (*could not prove post-condition*)
                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                              4) <
                                                                        7 /\
                                                                        (forall (return_val:
                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                              7).
                                                                            return_val ==
                                                                            MiniParse.Spec.Int.mk_u16 
                                                                              4 ==>
                                                                            (forall (any_result:
                                                                                Prims.bool).
                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  7
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      4) ==
                                                                                any_result ==>
                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                      4) <
                                                                                7 /\
                                                                                (forall (any_result:
                                                                                    (
                                                                                        _:
                                                                                        MiniParse.Tac.Base.ctest 
                                                                                          true
                                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                              7
                                                                                              x2
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  4)
                                                                                          ) ->
                                                                                        Prims.Tot
                                                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                                    )).
                                                                                    (fun _ ->
                                                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5
                                                                                    ) ==
                                                                                    any_result ==>
                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                          4) <
                                                                                    7 /\
                                                                                    (forall (x6:
                                                                                        MiniParse.Tac.Base.ctest 
                                                                                          false
                                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                              7
                                                                                              x2
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  4)
                                                                                          )).
                                                                                        (*could not prove post-condition*)
                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                        FStar.UInt16.v 
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              5) <
                                                                                        7 /\
                                                                                        (forall (return_val:
                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                              7).
                                                                                            return_val ==
                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                              5 ==>
                                                                                            (forall (any_result:
                                                                                                Prims.bool)
                                                                                              .
                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                  7
                                                                                                  x2
                                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                                      5
                                                                                                    
                                                                                                  ) ==
                                                                                                any_result ==>
                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                FStar.UInt16.v 
                                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                                      5
                                                                                                    
                                                                                                  ) <
                                                                                                7 /\
                                                                                                (forall 
                                                                                                    (any_result:
                                                                                                    (
                                                                                                      
                                                                                                        _:
                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                          true
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                              7
                                                                                                              x2
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                  5
                                                                                                                
                                                                                                              )
                                                                                                            
                                                                                                          )
                                                                                                         ->
                                                                                                        Prims.Tot
                                                                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                                                    ))
                                                                                                  .
                                                                                                    (
                                                                                                      fun
                                                                                                        _
                                                                                                        ->
                                                                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6
                                                                                                    ) ==
                                                                                                    any_result ==>
                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                    FStar.UInt16.v 
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                          5
                                                                                                        
                                                                                                      )
                                                                                                     <
                                                                                                    7
                                                                                                ))))
                                                                                )))))))))))))))))))) /\
    (forall (any_result:
        (_: MiniParse.Spec.Int.bounded_u16 7 ->
            Prims.GTot Bench.MiniParse.Size7.Factor1.Seed00.Goal.test)).
        (fun x2 ->
            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                  x2
                  (MiniParse.Spec.Int.mk_u16 0))
              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
              (fun _ ->
                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                        x2
                        (MiniParse.Spec.Int.mk_u16 1))
                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                    (fun _ ->
                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                              x2
                              (MiniParse.Spec.Int.mk_u16 2))
                          (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                          (fun _ ->
                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                    x2
                                    (MiniParse.Spec.Int.mk_u16 3))
                                (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                                (fun _ ->
                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 4))
                                      (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                                      (fun _ ->
                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                7
                                                x2
                                                (MiniParse.Spec.Int.mk_u16 5))
                                            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6)
                                            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7))
                                ))))) ==
        any_result ==>
        (forall (any_result:
            (
                f2:
                (_: Bench.MiniParse.Size7.Factor1.Seed00.Goal.test ->
                    Prims.GTot (MiniParse.Spec.Int.bounded_u16 7)) ->
                u283984:
                Prims.squash (MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16' 7
                      Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                      (fun x2 ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x2
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 3))
                                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4
                                              )
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        7
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 4))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              7
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 5))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6
                                                          )
                                                          (fun _ ->
                                                              Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7
                                                          )))))))
                      f2) ->
                Prims.Tot
                (Prims.squash (MiniParse.Spec.Combinators.synth_inverse f2
                        (fun x2 ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 0))
                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 1))
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 2))
                                          (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    7
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 3))
                                                (fun _ ->
                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          7
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 4))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                7
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 5))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6
                                                            )
                                                            (fun _ ->
                                                                Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7
                                                            )))))))))))
            (x1: Bench.MiniParse.Size7.Factor1.Seed00.Goal.test).
            (*could not prove post-condition*)
            C7? x1 == true ==>
            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 6) < 7 /\
            ~(C7? x1 == true) ==>
            (C6? x1 == true ==>
              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 5) < 7) /\
            (~(C6? x1 == true) ==>
              C5? x1 == true ==>
              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 4) < 7 /\
              ~(C5? x1 == true) ==>
              (C4? x1 == true ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) < 7) /\
              (~(C4? x1 == true) ==>
                C3? x1 == true ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 7 /\
                ~(C3? x1 == true) ==>
                (C2? x1 == true ==>
                  (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                  FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7) /\
                (~(C2? x1 == true) ==>
                  C1? x1 == true ==>
                  (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                  FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
                  ~(C1? x1 == true) ==>
                  (forall (b: Bench.MiniParse.Size7.Factor1.Seed00.Goal.test).
                      x1 == b ==>
                      (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                      FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 6) < 7)))))))
SMT goals (0):

TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> No goals left
Tactic fun _ ->
  MiniParse.Spec.TEnum.gen_enum_parser (FStar.Tactics.Types.Goal)
    (`Bench.MiniParse.Size4.Factor1.Seed00.Goal.test)
  <:
  FStar.Tactics.Effect.TAC Prims.unit ran in 11760 ms (Goal)
TAC>> Unfolded definition: Bench.MiniParse.Size4.Factor1.Seed00.Goal.pBenchMiniParseSize4Factor1Seed00Goal
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
proof-state: State dump @ depth 3 (Some goals left):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Tac.Base.fst(169,4-169,28)
ACTIVE goals (1):
 |- _ : Prims.squash ((forall (x2: MiniParse.Spec.Int.bounded_u16 4).
        (*could not prove post-condition*)
        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4 /\
        (forall (return_val: MiniParse.Spec.Int.bounded_u16 4).
            return_val == MiniParse.Spec.Int.mk_u16 0 ==>
            (forall (any_result: Prims.bool).
                MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0) == any_result ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4 /\
                (forall (any_result:
                    (
                        _:
                        MiniParse.Tac.Base.ctest true
                          (MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0)) ->
                        Prims.Tot Bench.MiniParse.Size4.Factor1.Seed00.Goal.test)).
                    (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1) == any_result ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4 /\
                    (forall (x8:
                        MiniParse.Tac.Base.ctest false
                          (MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0))).
                        (*could not prove post-condition*)
                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 4).
                            return_val == MiniParse.Spec.Int.mk_u16 1 ==>
                            (forall (any_result: Prims.bool).
                                MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 1) ==
                                any_result ==>
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                                (forall (any_result:
                                    (
                                        _:
                                        MiniParse.Tac.Base.ctest true
                                          (MiniParse.Spec.Int.bounded_u16_eq 4
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1)) ->
                                        Prims.Tot Bench.MiniParse.Size4.Factor1.Seed00.Goal.test)).
                                    (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2) ==
                                    any_result ==>
                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                                    (forall (x6:
                                        MiniParse.Tac.Base.ctest false
                                          (MiniParse.Spec.Int.bounded_u16_eq 4
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1))).
                                        (*could not prove post-condition*)
                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 4 /\
                                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 4).
                                            return_val == MiniParse.Spec.Int.mk_u16 2 ==>
                                            (forall (any_result: Prims.bool).
                                                MiniParse.Spec.Int.bounded_u16_eq 4
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 2) ==
                                                any_result ==>
                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 4 /\
                                                (forall (any_result:
                                                    (
                                                        _:
                                                        MiniParse.Tac.Base.ctest true
                                                          (MiniParse.Spec.Int.bounded_u16_eq 4
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2)) ->
                                                        Prims.Tot
                                                        Bench.MiniParse.Size4.Factor1.Seed00.Goal.test
                                                    )).
                                                    (fun _ ->
                                                        Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3
                                                    ) ==
                                                    any_result ==>
                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 4
                                                )))))))))))) /\
    (forall (any_result:
        (_: MiniParse.Spec.Int.bounded_u16 4 ->
            Prims.GTot Bench.MiniParse.Size4.Factor1.Seed00.Goal.test)).
        (fun x2 ->
            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                  x2
                  (MiniParse.Spec.Int.mk_u16 0))
              (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
              (fun _ ->
                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                        x2
                        (MiniParse.Spec.Int.mk_u16 1))
                    (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                    (fun _ ->
                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                              x2
                              (MiniParse.Spec.Int.mk_u16 2))
                          (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                          (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4)))) ==
        any_result ==>
        (forall (any_result:
            (
                f2':
                (x: MiniParse.Spec.Int.bounded_u16 4 ->
                    Prims.Tot
                    (y:
                      Bench.MiniParse.Size4.Factor1.Seed00.Goal.test
                        { y ==
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                      x
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                            x
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4))) })
                ) ->
                g1:
                (_: Bench.MiniParse.Size4.Factor1.Seed00.Goal.test ->
                    Prims.GTot (MiniParse.Spec.Int.bounded_u16 4)) ->
                u295390:
                u295407:
                Prims.unit
                  { MiniParse.Spec.Combinators.synth_inverse g1
                      (fun x2 ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x2
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4)))) } ->
                Prims.Tot
                (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                            4)
                        (fun x2 ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 0))
                              (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 1))
                                    (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              4
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 2))
                                          (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                                          (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4))))
                        g1)))).
            (forall (x0: MiniParse.Spec.Int.bounded_u16 4).
                (*could not prove post-condition*)
                (forall (x2: MiniParse.Spec.Int.bounded_u16 4).
                    (*could not prove post-condition*)
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4 /\
                    (forall (return_val: MiniParse.Spec.Int.bounded_u16 4).
                        return_val == MiniParse.Spec.Int.mk_u16 0 ==>
                        (forall (any_result: Prims.bool).
                            MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0) ==
                            any_result ==>
                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4 /\
                            (forall (any_result:
                                (
                                    _:
                                    MiniParse.Tac.Base.ctest true
                                      (MiniParse.Spec.Int.bounded_u16_eq 4
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 0)) ->
                                    Prims.Tot Bench.MiniParse.Size4.Factor1.Seed00.Goal.test)).
                                (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1) ==
                                any_result ==>
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4 /\
                                (forall (x8:
                                    MiniParse.Tac.Base.ctest false
                                      (MiniParse.Spec.Int.bounded_u16_eq 4
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 0))).
                                    (*could not prove post-condition*)
                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                                    (forall (return_val: MiniParse.Spec.Int.bounded_u16 4).
                                        return_val == MiniParse.Spec.Int.mk_u16 1 ==>
                                        (forall (any_result: Prims.bool).
                                            MiniParse.Spec.Int.bounded_u16_eq 4
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1) ==
                                            any_result ==>
                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                                            (forall (any_result:
                                                (
                                                    _:
                                                    MiniParse.Tac.Base.ctest true
                                                      (MiniParse.Spec.Int.bounded_u16_eq 4
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 1)) ->
                                                    Prims.Tot
                                                    Bench.MiniParse.Size4.Factor1.Seed00.Goal.test))
                                              .
                                                (fun _ ->
                                                    Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2) ==
                                                any_result ==>
                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                                                (forall (x6:
                                                    MiniParse.Tac.Base.ctest false
                                                      (MiniParse.Spec.Int.bounded_u16_eq 4
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 1))).
                                                    (*could not prove post-condition*)
                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 4 /\
                                                    (forall (return_val:
                                                        MiniParse.Spec.Int.bounded_u16 4).
                                                        return_val == MiniParse.Spec.Int.mk_u16 2 ==>
                                                        (forall (any_result: Prims.bool).
                                                            MiniParse.Spec.Int.bounded_u16_eq 4
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2) ==
                                                            any_result ==>
                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                  2) <
                                                            4 /\
                                                            (forall (any_result:
                                                                (
                                                                    _:
                                                                    MiniParse.Tac.Base.ctest true
                                                                      (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          4
                                                                          x2
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              2)) ->
                                                                    Prims.Tot
                                                                    Bench.MiniParse.Size4.Factor1.Seed00.Goal.test
                                                                )).
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3
                                                                ) ==
                                                                any_result ==>
                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                      2) <
                                                                4)))))))))))) /\
                (forall (any_result:
                    (x2: MiniParse.Spec.Int.bounded_u16 4 ->
                        Prims.Tot Bench.MiniParse.Size4.Factor1.Seed00.Goal.test))
                    (any_result: Bench.MiniParse.Size4.Factor1.Seed00.Goal.test).
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                          x0
                          (MiniParse.Spec.Int.mk_u16 0))
                      (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x0
                                (MiniParse.Spec.Int.mk_u16 1))
                            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                      x0
                                      (MiniParse.Spec.Int.mk_u16 2))
                                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4))) ==
                    any_result ==>
                    (*Subtyping check failed; expected type y:
Bench.MiniParse.Size4.Factor1.Seed00.Goal.test
  { y ==
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4 x0 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x0
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x0
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4))) }; got type Bench.MiniParse.Size4.Factor1.Seed00.Goal.test*)
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                          x0
                          (MiniParse.Spec.Int.mk_u16 0))
                      (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x0
                                (MiniParse.Spec.Int.mk_u16 1))
                            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                      x0
                                      (MiniParse.Spec.Int.mk_u16 2))
                                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4))) ==
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                          x0
                          (MiniParse.Spec.Int.mk_u16 0))
                      (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x0
                                (MiniParse.Spec.Int.mk_u16 1))
                            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                      x0
                                      (MiniParse.Spec.Int.mk_u16 2))
                                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4))))) /\
            (forall (any_result:
                (x: MiniParse.Spec.Int.bounded_u16 4 ->
                    Prims.Tot
                    (y:
                      Bench.MiniParse.Size4.Factor1.Seed00.Goal.test
                        { y ==
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                      x
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                            x
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4))) })
                )).
                (fun x0 ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                          x0
                          (MiniParse.Spec.Int.mk_u16 0))
                      (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x0
                                (MiniParse.Spec.Int.mk_u16 1))
                            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                      x0
                                      (MiniParse.Spec.Int.mk_u16 2))
                                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4)))) ==
                any_result ==>
                (forall (any_result:
                    (
                        g1:
                        (_: Bench.MiniParse.Size4.Factor1.Seed00.Goal.test ->
                            Prims.GTot (MiniParse.Spec.Int.bounded_u16 4)) ->
                        u295473:
                        u295482:
                        Prims.unit
                          { MiniParse.Spec.Combinators.synth_inverse g1
                              (fun x2 ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 0))
                                    (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              4
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1))
                                          (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    4
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 2))
                                                (fun _ ->
                                                    Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                                                (fun _ ->
                                                    Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4))))
                          } ->
                        Prims.Tot
                        (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                                    4)
                                (fun x2 ->
                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 0))
                                      (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
                                      (fun _ ->
                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                4
                                                x2
                                                (MiniParse.Spec.Int.mk_u16 1))
                                            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                                            (fun _ ->
                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                      4
                                                      x2
                                                      (MiniParse.Spec.Int.mk_u16 2))
                                                  (fun _ ->
                                                      Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                                                  (fun _ ->
                                                      Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4))
                                      ))
                                g1)))).
                    (forall (x1: Bench.MiniParse.Size4.Factor1.Seed00.Goal.test).
                        (*could not prove post-condition*)
                        C4? x1 == true ==>
                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) < 4 /\
                        ~(C4? x1 == true) ==>
                        (C3? x1 == true ==>
                          (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                          FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 4) /\
                        (~(C3? x1 == true) ==>
                          C2? x1 == true ==>
                          (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                          FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                          ~(C2? x1 == true) ==>
                          (C1? x1 == true ==>
                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4) /\
                          (~(C1? x1 == true) ==>
                            (forall (b: Bench.MiniParse.Size4.Factor1.Seed00.Goal.test).
                                x1 == b ==>
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) < 4)))) /\
                    (forall (any_result:
                        (_: Bench.MiniParse.Size4.Factor1.Seed00.Goal.test ->
                            Prims.GTot (MiniParse.Spec.Int.bounded_u16 4))).
                        (fun x1 ->
                            (match x1 with
                              | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4 ->
                                MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4
                              | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3 ->
                                MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 4
                              | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2 ->
                                MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 4
                              | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1 ->
                                MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 4
                              | _ -> MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4
                            )
                            <:
                            MiniParse.Spec.Int.bounded_u16 4) ==
                        any_result ==>
                        (forall (any_result:
                            (
                                u295497:
                                u295507:
                                Prims.unit
                                  { MiniParse.Spec.Combinators.synth_inverse (fun x1 ->
                                          (match x1 with
                                            | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4 ->
                                              MiniParse.Spec.Int.mk_u16 3
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 4
                                            | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3 ->
                                              MiniParse.Spec.Int.mk_u16 2
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 4
                                            | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2 ->
                                              MiniParse.Spec.Int.mk_u16 1
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 4
                                            | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1 ->
                                              MiniParse.Spec.Int.mk_u16 0
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 4
                                            | _ ->
                                              MiniParse.Spec.Int.mk_u16 3
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 4)
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 4)
                                      (fun x2 ->
                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                4
                                                x2
                                                (MiniParse.Spec.Int.mk_u16 0))
                                            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
                                            (fun _ ->
                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                      4
                                                      x2
                                                      (MiniParse.Spec.Int.mk_u16 1))
                                                  (fun _ ->
                                                      Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                                                  (fun _ ->
                                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                            4
                                                            x2
                                                            (MiniParse.Spec.Int.mk_u16 2))
                                                        (fun _ ->
                                                            Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3
                                                        )
                                                        (fun _ ->
                                                            Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4
                                                        )))) } ->
                                Prims.Tot
                                (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth 
                                        (MiniParse.Spec.Int.parse_bounded_u16 4)
                                        (fun x2 ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  4
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 0))
                                              (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1
                                              )
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        4
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 1))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              4
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3
                                                          )
                                                          (fun _ ->
                                                              Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4
                                                          ))))
                                        (fun x1 ->
                                            (match x1 with
                                              | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4 ->
                                                MiniParse.Spec.Int.mk_u16 3
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 4
                                              | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3 ->
                                                MiniParse.Spec.Int.mk_u16 2
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 4
                                              | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2 ->
                                                MiniParse.Spec.Int.mk_u16 1
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 4
                                              | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1 ->
                                                MiniParse.Spec.Int.mk_u16 0
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 4
                                              | _ ->
                                                MiniParse.Spec.Int.mk_u16 3
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 4)
                                            <:
                                            MiniParse.Spec.Int.bounded_u16 4))))).
                            (*Subtyping check failed; expected type u292124:
Prims.unit
  { MiniParse.Spec.Combinators.synth_inverse (fun x1 ->
          (match x1 with
            | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4 ->
              MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4
            | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3 ->
              MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 4
            | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2 ->
              MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 4
            | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1 ->
              MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 4
            | _ -> MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4)
          <:
          MiniParse.Spec.Int.bounded_u16 4)
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4)))) }; got type Prims.unit*)
                            Prims.auto_squash (MiniParse.Spec.Combinators.synth_inverse (fun x1 ->
                                      (match x1 with
                                        | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4 ->
                                          MiniParse.Spec.Int.mk_u16 3
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 4
                                        | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3 ->
                                          MiniParse.Spec.Int.mk_u16 2
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 4
                                        | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2 ->
                                          MiniParse.Spec.Int.mk_u16 1
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 4
                                        | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1 ->
                                          MiniParse.Spec.Int.mk_u16 0
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 4
                                        | _ ->
                                          MiniParse.Spec.Int.mk_u16 3
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 4)
                                      <:
                                      MiniParse.Spec.Int.bounded_u16 4)
                                  (fun x2 ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 0))
                                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  4
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 1))
                                              (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2
                                              )
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        4
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 2))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3
                                                    )
                                                    (fun _ ->
                                                        Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4
                                                    ))))))))))))
SMT goals (0):

TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: reflexivity
TAC>> Success: reflexivity
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: synth_inverse_forall_bounded_u16_solve, main goal
TAC>> Success: synth_inverse_forall_bounded_u16_solve, main goal
TAC>> Checking success for: synth_inverse_forall_bounded_u16_solve, main goal
TAC>> Success: synth_inverse_forall_bounded_u16_solve, main goal
proof-state: State dump @ depth 28 (Some goals left):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Tac.Base.fst(169,4-169,28)
ACTIVE goals (1):
(x:
(_: MiniParse.Spec.Int.bounded_u16 10 -> Prims.GTot Bench.MiniParse.Size10.Factor1.Seed00.Goal.test)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
          x2
          (MiniParse.Spec.Int.mk_u16 0))
      (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 6))
                                          (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 7))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 8))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                      )
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                      )))))))))) ==
x), (x:
(
    g1:
    (_: Bench.MiniParse.Size10.Factor1.Seed00.Goal.test ->
        Prims.GTot (MiniParse.Spec.Int.bounded_u16 10)) ->
    Prims.Pure (MiniParse.Spec.Base.parser_spec Bench.MiniParse.Size10.Factor1.Seed00.Goal.test)
      (MiniParse.Spec.Combinators.synth_inverse g1
          (fun x2 ->
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                    x2
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                          x2
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x2
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 3))
                                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 4))
                                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 5))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 6))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 7))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x2
                                                                    (MiniParse.Spec.Int.mk_u16 8))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                )
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                                )))))))))))
      (fun _ -> Prims.l_True))), (x:
(_: Bench.MiniParse.Size10.Factor1.Seed00.Goal.test ->
    Prims.GTot (MiniParse.Spec.Int.bounded_u16 10))), (_:
(fun x1 ->
    (match x1 with
      | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10 ->
        MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9 ->
        MiniParse.Spec.Int.mk_u16 8 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8 ->
        MiniParse.Spec.Int.mk_u16 7 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7 ->
        MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6 ->
        MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5 ->
        MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4 ->
        MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3 ->
        MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2 ->
        MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1 ->
        MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 10
      | _ -> MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10)
    <:
    MiniParse.Spec.Int.bounded_u16 10) ==
x) |- _ : Prims.squash ((forall (x2: MiniParse.Spec.Int.bounded_u16 10).
        (*could not prove post-condition*)
        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10 /\
        (forall (return_val: MiniParse.Spec.Int.bounded_u16 10).
            return_val == MiniParse.Spec.Int.mk_u16 0 ==>
            (forall (any_result: Prims.bool).
                MiniParse.Spec.Int.bounded_u16_eq 10 x2 (MiniParse.Spec.Int.mk_u16 0) == any_result ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10 /\
                (forall (any_result:
                    (
                        _:
                        MiniParse.Tac.Base.ctest true
                          (MiniParse.Spec.Int.bounded_u16_eq 10 x2 (MiniParse.Spec.Int.mk_u16 0)) ->
                        Prims.Tot Bench.MiniParse.Size10.Factor1.Seed00.Goal.test)).
                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1) == any_result ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10 /\
                    (forall (x20:
                        MiniParse.Tac.Base.ctest false
                          (MiniParse.Spec.Int.bounded_u16_eq 10 x2 (MiniParse.Spec.Int.mk_u16 0))).
                        (*could not prove post-condition*)
                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 10).
                            return_val == MiniParse.Spec.Int.mk_u16 1 ==>
                            (forall (any_result: Prims.bool).
                                MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 1) ==
                                any_result ==>
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                                (forall (any_result:
                                    (
                                        _:
                                        MiniParse.Tac.Base.ctest true
                                          (MiniParse.Spec.Int.bounded_u16_eq 10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1)) ->
                                        Prims.Tot Bench.MiniParse.Size10.Factor1.Seed00.Goal.test)).
                                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2) ==
                                    any_result ==>
                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                                    (forall (x18:
                                        MiniParse.Tac.Base.ctest false
                                          (MiniParse.Spec.Int.bounded_u16_eq 10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1))).
                                        (*could not prove post-condition*)
                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 10 /\
                                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 10).
                                            return_val == MiniParse.Spec.Int.mk_u16 2 ==>
                                            (forall (any_result: Prims.bool).
                                                MiniParse.Spec.Int.bounded_u16_eq 10
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 2) ==
                                                any_result ==>
                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 10 /\
                                                (forall (any_result:
                                                    (
                                                        _:
                                                        MiniParse.Tac.Base.ctest true
                                                          (MiniParse.Spec.Int.bounded_u16_eq 10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2)) ->
                                                        Prims.Tot
                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                    )).
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3
                                                    ) ==
                                                    any_result ==>
                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) <
                                                    10 /\
                                                    (forall (x16:
                                                        MiniParse.Tac.Base.ctest false
                                                          (MiniParse.Spec.Int.bounded_u16_eq 10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2))).
                                                        (*could not prove post-condition*)
                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) <
                                                        10 /\
                                                        (forall (return_val:
                                                            MiniParse.Spec.Int.bounded_u16 10).
                                                            return_val ==
                                                            MiniParse.Spec.Int.mk_u16 3 ==>
                                                            (forall (any_result: Prims.bool).
                                                                MiniParse.Spec.Int.bounded_u16_eq 10
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 3) ==
                                                                any_result ==>
                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                      3) <
                                                                10 /\
                                                                (forall (any_result:
                                                                    (
                                                                        _:
                                                                        MiniParse.Tac.Base.ctest true
                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                              10
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  3)) ->
                                                                        Prims.Tot
                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                    )).
                                                                    (fun _ ->
                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4
                                                                    ) ==
                                                                    any_result ==>
                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                          3) <
                                                                    10 /\
                                                                    (forall (x14:
                                                                        MiniParse.Tac.Base.ctest false
                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                              10
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  3))).
                                                                        (*could not prove post-condition*)
                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                              4) <
                                                                        10 /\
                                                                        (forall (return_val:
                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                              10).
                                                                            return_val ==
                                                                            MiniParse.Spec.Int.mk_u16 
                                                                              4 ==>
                                                                            (forall (any_result:
                                                                                Prims.bool).
                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  10
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      4) ==
                                                                                any_result ==>
                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                      4) <
                                                                                10 /\
                                                                                (forall (any_result:
                                                                                    (
                                                                                        _:
                                                                                        MiniParse.Tac.Base.ctest 
                                                                                          true
                                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                              10
                                                                                              x2
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  4)
                                                                                          ) ->
                                                                                        Prims.Tot
                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                    )).
                                                                                    (fun _ ->
                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5
                                                                                    ) ==
                                                                                    any_result ==>
                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                          4) <
                                                                                    10 /\
                                                                                    (forall (x12:
                                                                                        MiniParse.Tac.Base.ctest 
                                                                                          false
                                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                              10
                                                                                              x2
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  4)
                                                                                          )).
                                                                                        (*could not prove post-condition*)
                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                        FStar.UInt16.v 
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              5) <
                                                                                        10 /\
                                                                                        (forall (return_val:
                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                              10).
                                                                                            return_val ==
                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                              5 ==>
                                                                                            (forall (any_result:
                                                                                                Prims.bool)
                                                                                              .
                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                  10
                                                                                                  x2
                                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                                      5
                                                                                                    
                                                                                                  ) ==
                                                                                                any_result ==>
                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                FStar.UInt16.v 
                                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                                      5
                                                                                                    
                                                                                                  ) <
                                                                                                10 /\
                                                                                                (forall 
                                                                                                    (any_result:
                                                                                                    (
                                                                                                      
                                                                                                        _:
                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                          true
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                              10
                                                                                                              x2
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                  5
                                                                                                                
                                                                                                              )
                                                                                                            
                                                                                                          )
                                                                                                         ->
                                                                                                        Prims.Tot
                                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                    ))
                                                                                                  .
                                                                                                    (
                                                                                                      fun
                                                                                                        _
                                                                                                        ->
                                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6
                                                                                                    ) ==
                                                                                                    any_result ==>
                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                    FStar.UInt16.v 
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                          5
                                                                                                        
                                                                                                      )
                                                                                                     <
                                                                                                    10 /\
                                                                                                    (
                                                                                                      forall 
                                                                                                        (x10:
                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                          false
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                              10
                                                                                                              x2
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                  5
                                                                                                                
                                                                                                              )
                                                                                                            
                                                                                                          )
                                                                                                        )
                                                                                                      .
                                                                                                        (*could not prove post-condition*)
                                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                        FStar.UInt16.v 
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              6
                                                                                                            
                                                                                                          )
                                                                                                         <
                                                                                                        10 /\
                                                                                                        (
                                                                                                          forall 
                                                                                                            (return_val:
                                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                                              10
                                                                                                            )
                                                                                                          .
                                                                                                            return_val ==
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              6
                                                                                                             ==>
                                                                                                            (
                                                                                                              forall 
                                                                                                                (any_result:
                                                                                                                Prims.bool)
                                                                                                              .
                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                  10
                                                                                                                  x2
                                                                                                                  (
                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                      6
                                                                                                                    
                                                                                                                  )
                                                                                                                 ==
                                                                                                                any_result ==>
                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                FStar.UInt16.v 
                                                                                                                  (
                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                      6
                                                                                                                    
                                                                                                                  )
                                                                                                                 <
                                                                                                                10 /\
                                                                                                                (
                                                                                                                  forall 
                                                                                                                    (any_result:
                                                                                                                    (
                                                                                                                      
                                                                                                                        _:
                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                          true
                                                                                                                          (
                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                              10
                                                                                                                              x2
                                                                                                                              (
                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                  6
                                                                                                                                
                                                                                                                              )
                                                                                                                            
                                                                                                                          )
                                                                                                                         ->
                                                                                                                        Prims.Tot
                                                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                    ))
                                                                                                                  .
                                                                                                                    (
                                                                                                                      fun
                                                                                                                        _
                                                                                                                        ->
                                                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                                                                                    ) ==
                                                                                                                    any_result ==>
                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                    FStar.UInt16.v 
                                                                                                                      (
                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                          6
                                                                                                                        
                                                                                                                      )
                                                                                                                     <
                                                                                                                    10 /\
                                                                                                                    (
                                                                                                                      forall 
                                                                                                                        (x8:
                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                          false
                                                                                                                          (
                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                              10
                                                                                                                              x2
                                                                                                                              (
                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                  6
                                                                                                                                
                                                                                                                              )
                                                                                                                            
                                                                                                                          )
                                                                                                                        )
                                                                                                                      .
                                                                                                                        (*could not prove post-condition*)
                                                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                        FStar.UInt16.v 
                                                                                                                          (
                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                              7
                                                                                                                            
                                                                                                                          )
                                                                                                                         <
                                                                                                                        10 /\
                                                                                                                        (
                                                                                                                          forall 
                                                                                                                            (return_val:
                                                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                                                              10
                                                                                                                            )
                                                                                                                          .
                                                                                                                            return_val ==
                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                              7
                                                                                                                             ==>
                                                                                                                            (
                                                                                                                              forall 
                                                                                                                                (any_result:
                                                                                                                                Prims.bool)
                                                                                                                              .
                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                  10
                                                                                                                                  x2
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      7
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                 ==
                                                                                                                                any_result ==>
                                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                FStar.UInt16.v 
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      7
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                 <
                                                                                                                                10 /\
                                                                                                                                (
                                                                                                                                  forall 
                                                                                                                                    (any_result:
                                                                                                                                    (
                                                                                                                                      
                                                                                                                                        _:
                                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                                          true
                                                                                                                                          (
                                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                              10
                                                                                                                                              x2
                                                                                                                                              (
                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                  7
                                                                                                                                                
                                                                                                                                              )
                                                                                                                                            
                                                                                                                                          )
                                                                                                                                         ->
                                                                                                                                        Prims.Tot
                                                                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                    ))
                                                                                                                                  .
                                                                                                                                    (
                                                                                                                                      fun
                                                                                                                                        _
                                                                                                                                        ->
                                                                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                                                                                                    ) ==
                                                                                                                                    any_result ==>
                                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                    FStar.UInt16.v 
                                                                                                                                      (
                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                          7
                                                                                                                                        
                                                                                                                                      )
                                                                                                                                     <
                                                                                                                                    10 /\
                                                                                                                                    (
                                                                                                                                      forall 
                                                                                                                                        (x6:
                                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                                          false
                                                                                                                                          (
                                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                              10
                                                                                                                                              x2
                                                                                                                                              (
                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                  7
                                                                                                                                                
                                                                                                                                              )
                                                                                                                                            
                                                                                                                                          )
                                                                                                                                        )
                                                                                                                                      .
                                                                                                                                        (*could not prove post-condition*)
                                                                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                        FStar.UInt16.v 
                                                                                                                                          (
                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                              8
                                                                                                                                            
                                                                                                                                          )
                                                                                                                                         <
                                                      TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
proof-state: State dump @ depth 46 (Some goals left):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Tac.Base.fst(169,4-169,28)
ACTIVE goals (1):
(x:
(_: MiniParse.Spec.Int.bounded_u16 4 -> Prims.GTot Bench.MiniParse.Size4.Factor1.Seed00.Goal.test)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4)))) ==
x), (x:
(
    f2':
    (x: MiniParse.Spec.Int.bounded_u16 4 ->
        Prims.Tot
        (y:
          Bench.MiniParse.Size4.Factor1.Seed00.Goal.test
            { y ==
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                    x
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                          x
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4))) })) ->
    g1:
    (_: Bench.MiniParse.Size4.Factor1.Seed00.Goal.test ->
        Prims.GTot (MiniParse.Spec.Int.bounded_u16 4)) ->
    u491272:
    u491289:
    Prims.unit
      { MiniParse.Spec.Combinators.synth_inverse g1
          (fun x2 ->
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                    x2
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                          x2
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x2
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4)))) } ->
    Prims.Tot
    (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                4)
            (fun x2 ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x2
                      (MiniParse.Spec.Int.mk_u16 0))
                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                            x2
                            (MiniParse.Spec.Int.mk_u16 1))
                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 2))
                              (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                              (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4))))
            g1)))), (x:
(x: MiniParse.Spec.Int.bounded_u16 4 ->
    Prims.Tot
    (y:
      Bench.MiniParse.Size4.Factor1.Seed00.Goal.test
        { y ==
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                            x
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4))) }))), (_:
(fun x0 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4 x0 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x0
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x0
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4)))) ==
x), (x:
(
    g1:
    (_: Bench.MiniParse.Size4.Factor1.Seed00.Goal.test ->
        Prims.GTot (MiniParse.Spec.Int.bounded_u16 4)) ->
    u491313:
    u491322:
    Prims.unit
      { MiniParse.Spec.Combinators.synth_inverse g1
          (fun x2 ->
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                    x2
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                          x2
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x2
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4)))) } ->
    Prims.Tot
    (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                4)
            (fun x2 ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x2
                      (MiniParse.Spec.Int.mk_u16 0))
                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                            x2
                            (MiniParse.Spec.Int.mk_u16 1))
                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 2))
                              (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                              (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4))))
            g1)))), (x:
(_: Bench.MiniParse.Size4.Factor1.Seed00.Goal.test -> Prims.GTot (MiniParse.Spec.Int.bounded_u16 4))), (_:
(fun x1 ->
    (match x1 with
      | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4 ->
        MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4
      | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3 ->
        MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 4
      | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2 ->
        MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 4
      | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1 ->
        MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 4
      | _ -> MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4)
    <:
    MiniParse.Spec.Int.bounded_u16 4) ==
x), (x:
(
    u491333:
    u491343:
    Prims.unit
      { MiniParse.Spec.Combinators.synth_inverse (fun x1 ->
              (match x1 with
                | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4 ->
                  MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4
                | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3 ->
                  MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 4
                | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2 ->
                  MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 4
                | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1 ->
                  MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 4
                | _ -> MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4)
              <:
              MiniParse.Spec.Int.bounded_u16 4)
          (fun x2 ->
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                    x2
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                          x2
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x2
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4)))) } ->
    Prims.Tot
    (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                4)
            (fun x2 ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x2
                      (MiniParse.Spec.Int.mk_u16 0))
                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                            x2
                            (MiniParse.Spec.Int.mk_u16 1))
                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 2))
                              (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                              (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4))))
            (fun x1 ->
                (match x1 with
                  | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4 ->
                    MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4
                  | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3 ->
                    MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 4
                  | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2 ->
                    MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 4
                  | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1 ->
                    MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 4
                  | _ -> MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4)
                <:
                MiniParse.Spec.Int.bounded_u16 4))))) |- _ : Prims.squash ((forall (x2: MiniParse.Spec.Int.bounded_u16 4).
        (*could not prove post-condition*)
        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4 /\
        (forall (return_val: MiniParse.Spec.Int.bounded_u16 4).
            return_val == MiniParse.Spec.Int.mk_u16 0 ==>
            (forall (any_result: Prims.bool).
                MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0) == any_result ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4 /\
                (forall (any_result:
                    (
                        _:
                        MiniParse.Tac.Base.ctest true
                          (MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0)) ->
                        Prims.Tot Bench.MiniParse.Size4.Factor1.Seed00.Goal.test)).
                    (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1) == any_result ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4 /\
                    (forall (x8:
                        MiniParse.Tac.Base.ctest false
                          (MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0))).
                        (*could not prove post-condition*)
                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 4).
                            return_val == MiniParse.Spec.Int.mk_u16 1 ==>
                            (forall (any_result: Prims.bool).
                                MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 1) ==
                                any_result ==>
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                                (forall (any_result:
                                    (
                                        _:
                                        MiniParse.Tac.Base.ctest true
                                          (MiniParse.Spec.Int.bounded_u16_eq 4
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1)) ->
                                        Prims.Tot Bench.MiniParse.Size4.Factor1.Seed00.Goal.test)).
                                    (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2) ==
                                    any_result ==>
                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                                    (forall (x6:
                                        MiniParse.Tac.Base.ctest false
                                          (MiniParse.Spec.Int.bounded_u16_eq 4
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1))).
                                        (*could not prove post-condition*)
                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 4 /\
                                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 4).
                                            return_val == MiniParse.Spec.Int.mk_u16 2 ==>
                                            (forall (any_result: Prims.bool).
                                                MiniParse.Spec.Int.bounded_u16_eq 4
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 2) ==
                                                any_result ==>
                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 4 /\
                                                (forall (any_result:
                                                    (
                                                        _:
                                                        MiniParse.Tac.Base.ctest true
                                                          (MiniParse.Spec.Int.bounded_u16_eq 4
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2)) ->
                                                        Prims.Tot
                                                        Bench.MiniParse.Size4.Factor1.Seed00.Goal.test
                                                    )).
                                                    (fun _ ->
                                                        Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3
                                                    ) ==
                                                    any_result ==>
                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 4
                                                )))))))))))) /\
    (forall (any_result:
        (_: MiniParse.Spec.Int.bounded_u16 4 ->
            Prims.GTot Bench.MiniParse.Size4.Factor1.Seed00.Goal.test)).
        (fun x2 ->
            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                  x2
                  (MiniParse.Spec.Int.mk_u16 0))
              (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
              (fun _ ->
                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                        x2
                        (MiniParse.Spec.Int.mk_u16 1))
                    (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                    (fun _ ->
                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                              x2
                              (MiniParse.Spec.Int.mk_u16 2))
                          (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                          (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4)))) ==
        any_result ==>
        (forall (any_result:
            (
                f2:
                (_: Bench.MiniParse.Size4.Factor1.Seed00.Goal.test ->
                    Prims.GTot (MiniParse.Spec.Int.bounded_u16 4)) ->
                u491454:
                Prims.squash (MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16' 4
                      Bench.MiniParse.Size4.Factor1.Seed00.Goal.test
                      (fun x2 ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x2
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4))))
                      f2) ->
                Prims.Tot
                (Prims.squash (MiniParse.Spec.Combinators.synth_inverse f2
                        (fun x2 ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 0))
                              (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 1))
                                    (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              4
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 2))
                                          (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                                          (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4))))
                    ))))
            (x1: Bench.MiniParse.Size4.Factor1.Seed00.Goal.test).
            (*could not prove post-condition*)
            C4? x1 == true ==>
            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) < 4 /\
            ~(C4? x1 == true) ==>
            (C3? x1 == true ==>
              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 4) /\
            (~(C3? x1 == true) ==>
              C2? x1 == true ==>
              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
              ~(C2? x1 == true) ==>
              (C1? x1 == true ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4) /\
              (~(C1? x1 == true) ==>
                (forall (b: Bench.MiniParse.Size4.Factor1.Seed00.Goal.test).
                    x1 == b ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) < 4))))))
SMT goals (0):

TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
                                                                                  10 /\
                                                                                                                                        (
                                                                                                                                          forall 
                                                                                                                                            (return_val:
                                                                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                                                                              10
                                                                                                                                            )
                                                                                                                                          .
                                                                                                                                            return_val ==
                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                              8
                                                                                                                                             ==>
                                                                                                                                            (
                                                                                                                                              forall 
                                                                                                                                                (any_result:
                                                                                                                                                Prims.bool)
                                                                                                                                              .
                                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                  10
                                                                                                                                                  x2
                                                                                                                                                  (
                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                      8
                                                                                                                                                    
                                                                                                                                                  )
                                                                                                                                                 ==
                                                                                                                                                any_result ==>
                                                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                FStar.UInt16.v 
                                                                                                                                                  (
                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                      8
                                                                                                                                                    
                                                                                                                                                  )
                                                                                                                                                 <
                                                                                                                                                10 /\
                                                                                                                                                (
                                                                                                                                                  forall 
                                                                                                                                                    (any_result:
                                                                                                                                                    (
                                                                                                                                                      
                                                                                                                                                        _:
                                                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                                                          true
                                                                                                                                                          (
                                                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                              10
                                                                                                                                                              x2
                                                                                                                                                              (
                                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                  8
                                                                                                                                                                
                                                                                                                                                              )
                                                                                                                                                            
                                                                                                                                                          )
                                                                                                                                                         ->
                                                                                                                                                        Prims.Tot
                                                                                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                                    ))
                                                                                                                                                  .
                                                                                                                                                    (
                                                                                                                                                      fun
                                                                                                                                                        _
                                                                                                                                                        ->
                                                                                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                                                                                                    ) ==
                                                                                                                                                    any_result ==>
                                                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                    FStar.UInt16.v 
                                                                                                                                                      (
                                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                                          8
                                                                                                                                                        
                                                                                                                                                      )
                                                                                                                                                     <
                                                                                                                                                    10
                                                                                                                                                )
                                                                                                                                            )
                                                                                                                                        )
                                                                                                                                    )
                                                                                                                                )
                                                                                                                            )
                                                                                                                        )
                                                                                                                    )
                                                                                                                )
                                                                                                            )
                                                                                                        )
                                                                                                    )
                                                                                                ))))
                                                                                )))))))))))))))))))) /\
    (forall (any_result:
        (_: MiniParse.Spec.Int.bounded_u16 10 ->
            Prims.GTot Bench.MiniParse.Size10.Factor1.Seed00.Goal.test)).
        (fun x2 ->
            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                  x2
                  (MiniParse.Spec.Int.mk_u16 0))
              (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
              (fun _ ->
                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                        x2
                        (MiniParse.Spec.Int.mk_u16 1))
                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                    (fun _ ->
                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                              x2
                              (MiniParse.Spec.Int.mk_u16 2))
                          (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                          (fun _ ->
                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                    x2
                                    (MiniParse.Spec.Int.mk_u16 3))
                                (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                                (fun _ ->
                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 4))
                                      (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                                      (fun _ ->
                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                10
                                                x2
                                                (MiniParse.Spec.Int.mk_u16 5))
                                            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                            (fun _ ->
                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                      10
                                                      x2
                                                      (MiniParse.Spec.Int.mk_u16 6))
                                                  (fun _ ->
                                                      Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7)
                                                  (fun _ ->
                                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                            10
                                                            x2
                                                            (MiniParse.Spec.Int.mk_u16 7))
                                                        (fun _ ->
                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                        )
                                                        (fun _ ->
                                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                  10
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 8))
                                                              (fun _ ->
                                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                              )
                                                              (fun _ ->
                                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                              )))))))))) ==
        any_result ==>
        (forall (any_result:
            (
                f2:
                (_: Bench.MiniParse.Size10.Factor1.Seed00.Goal.test ->
                    Prims.GTot (MiniParse.Spec.Int.bounded_u16 10)) ->
                u566962:
                Prims.squash (MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16' 10
                      Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                      (fun x2 ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x2
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 3))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 4))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 5))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x2
                                                                    (MiniParse.Spec.Int.mk_u16 6))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                                )
                                                                (fun _ ->
                                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          10
                                                                          x2
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              7))
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                                      )
                                                                      (fun _ ->
                                                                          MiniParse.Tac.Base.mk_if_t 
                                                                            (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                10
                                                                                x2
                                                                                (MiniParse.Spec.Int.mk_u16 
                                                                                    8))
                                                                            (fun _ ->
                                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                            )
                                                                            (fun _ ->
                                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                                            ))))))))))
                      f2) ->
                Prims.Tot
                (Prims.squash (MiniParse.Spec.Combinators.synth_inverse f2
                        (fun x2 ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 0))
                              (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 1))
                                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 2))
                                          (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 3))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 4))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 5))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6
                                                            )
                                                            (fun _ ->
                                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                      10
                                                                      x2
                                                                      (MiniParse.Spec.Int.mk_u16 6))
                                                                  (fun _ ->
                                                                      Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                                  )
                                                                  (fun _ ->
                                                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                            10
                                                                            x2
                                                                            (MiniParse.Spec.Int.mk_u16 
                                                                                7))
                                                                        (fun _ ->
                                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                                        )
                                                                        (fun _ ->
                                                                            MiniParse.Tac.Base.mk_if_t 
                                                                              (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  10
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      8))
                                                                              (fun _ ->
                                                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                              )
                                                                              (fun _ ->
                                                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                                              ))))))))))))))
            (x1: Bench.MiniParse.Size10.Factor1.Seed00.Goal.test).
            (*could not prove post-condition*)
            C10? x1 == true ==>
            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 9) < 10 /\
            ~(C10? x1 == true) ==>
            (C9? x1 == true ==>
              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 8) < 10) /\
            (~(C9? x1 == true) ==>
              C8? x1 == true ==>
              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 7) < 10 /\
              ~(C8? x1 == true) ==>
              (C7? x1 == true ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 6) < 10) /\
              (~(C7? x1 == true) ==>
                C6? x1 == true ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 5) < 10 /\
                ~(C6? x1 == true) ==>
                (C5? x1 == true ==>
                  (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                  FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 4) < 10) /\
                (~(C5? x1 == true) ==>
                  C4? x1 == true ==>
                  (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                  FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) < 10 /\
                  ~(C4? x1 == true) ==>
                  (C3? x1 == true ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 10) /\
                  (~(C3? x1 == true) ==>
                    C2? x1 == true ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                    ~(C2? x1 == true) ==>
                    (C1? x1 == true ==>
                      (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                      FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10) /\
                    (~(C1? x1 == true) ==>
                      (forall (b: Bench.MiniParse.Size10.Factor1.Seed00.Goal.test).
                          x1 == b ==>
                          (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                          FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 9) < 10)))))))))
SMT goals (0):

TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Applied: forall_intro
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> No goals left
TAC>> Checking success for: synth_inverse_forall_bounded_u16_solve
TAC>> Success: synth_inverse_forall_bounded_u16_solve
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> No goals left
TAC>> Checking success for: synth_inverse_forall_bounded_u16_solve
TAC>> Success: synth_inverse_forall_bounded_u16_solve
TAC>> Checking success for: return_squash imm_solve
TAC>> Success: return_squash imm_solve
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
proof-state: State dump @ depth 47 (synth_inverse_forall_tenum_solve FAILED here:):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Spec.TEnum.fst(183,12-183,66)
ACTIVE goals (1):
(x:
(_: MiniParse.Spec.Int.bounded_u16 4 -> Prims.GTot Bench.MiniParse.Size4.Factor1.Seed00.Goal.test)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4)))) ==
x), (x:
(
    f2':
    (x: MiniParse.Spec.Int.bounded_u16 4 ->
        Prims.Tot
        (y:
          Bench.MiniParse.Size4.Factor1.Seed00.Goal.test
            { y ==
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                    x
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                          x
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4))) })) ->
    g1:
    (_: Bench.MiniParse.Size4.Factor1.Seed00.Goal.test ->
        Prims.GTot (MiniParse.Spec.Int.bounded_u16 4)) ->
    u683470:
    u683487:
    Prims.unit
      { MiniParse.Spec.Combinators.synth_inverse g1
          (fun x2 ->
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                    x2
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                          x2
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x2
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4)))) } ->
    Prims.Tot
    (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                4)
            (fun x2 ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x2
                      (MiniParse.Spec.Int.mk_u16 0))
                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                            x2
                            (MiniParse.Spec.Int.mk_u16 1))
                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 2))
                              (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                              (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4))))
            g1)))), (x:
(x: MiniParse.Spec.Int.bounded_u16 4 ->
    Prims.Tot
    (y:
      Bench.MiniParse.Size4.Factor1.Seed00.Goal.test
        { y ==
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                            x
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4))) }))), (_:
(fun x0 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4 x0 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x0
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x0
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4)))) ==
x), (x:
(_: Bench.MiniParse.Size4.Factor1.Seed00.Goal.test -> Prims.GTot (MiniParse.Spec.Int.bounded_u16 4))), (x:
u683511:
Prims.unit
  { MiniParse.Spec.Combinators.synth_inverse x
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4)))) }), (x:
(_: MiniParse.Spec.Int.bounded_u16 4 -> Prims.GTot Bench.MiniParse.Size4.Factor1.Seed00.Goal.test)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4)))) ==
x) |- _ : Prims.squash (MiniParse.Spec.Combinators.synth_inverse x
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4)))))
SMT goals (0):

TAC>> Checking success for: assumption
TAC>> Success: assumption
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Applied: forall_intro
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> No goals left
Tactic fun _ ->
  MiniParse.Spec.TEnum.gen_enum_parser (FStar.Tactics.Types.Goal)
    (`Bench.MiniParse.Size7.Factor1.Seed00.Goal.test)
  <:
  FStar.Tactics.Effect.TAC Prims.unit ran in 34767 ms (Goal)
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Unfolded definition: Bench.MiniParse.Size7.Factor1.Seed00.Goal.pBenchMiniParseSize7Factor1Seed00Goal
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
proof-state: State dump @ depth 3 (Some goals left):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Tac.Base.fst(169,4-169,28)
ACTIVE goals (1):
 |- _ : Prims.squash ((forall (x2: MiniParse.Spec.Int.bounded_u16 7).
        (*could not prove post-condition*)
        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
        (forall (return_val: MiniParse.Spec.Int.bounded_u16 7).
            return_val == MiniParse.Spec.Int.mk_u16 0 ==>
            (forall (any_result: Prims.bool).
                MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0) == any_result ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
                (forall (any_result:
                    (
                        _:
                        MiniParse.Tac.Base.ctest true
                          (MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0)) ->
                        Prims.Tot Bench.MiniParse.Size7.Factor1.Seed00.Goal.test)).
                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1) == any_result ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
                    (forall (x14:
                        MiniParse.Tac.Base.ctest false
                          (MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0))).
                        (*could not prove post-condition*)
                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7 /\
                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 7).
                            return_val == MiniParse.Spec.Int.mk_u16 1 ==>
                            (forall (any_result: Prims.bool).
                                MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 1) ==
                                any_result ==>
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7 /\
                                (forall (any_result:
                                    (
                                        _:
                                        MiniParse.Tac.Base.ctest true
                                          (MiniParse.Spec.Int.bounded_u16_eq 7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1)) ->
                                        Prims.Tot Bench.MiniParse.Size7.Factor1.Seed00.Goal.test)).
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2) ==
                                    any_result ==>
                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7 /\
                                    (forall (x12:
                                        MiniParse.Tac.Base.ctest false
                                          (MiniParse.Spec.Int.bounded_u16_eq 7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1))).
                                        (*could not prove post-condition*)
                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 7 /\
                                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 7).
                                            return_val == MiniParse.Spec.Int.mk_u16 2 ==>
                                            (forall (any_result: Prims.bool).
                                                MiniParse.Spec.Int.bounded_u16_eq 7
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 2) ==
                                                any_result ==>
                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 7 /\
                                                (forall (any_result:
                                                    (
                                                        _:
                                                        MiniParse.Tac.Base.ctest true
                                                          (MiniParse.Spec.Int.bounded_u16_eq 7
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2)) ->
                                                        Prims.Tot
                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                    )).
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3
                                                    ) ==
                                                    any_result ==>
                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 7 /\
                                                    (forall (x10:
                                                        MiniParse.Tac.Base.ctest false
                                                          (MiniParse.Spec.Int.bounded_u16_eq 7
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2))).
                                                        (*could not prove post-condition*)
                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) <
                                                        7 /\
                                                        (forall (return_val:
                                                            MiniParse.Spec.Int.bounded_u16 7).
                                                            return_val ==
                                                            MiniParse.Spec.Int.mk_u16 3 ==>
                                                            (forall (any_result: Prims.bool).
                                                                MiniParse.Spec.Int.bounded_u16_eq 7
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 3) ==
                                                                any_result ==>
                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                      3) <
                                                                7 /\
                                                                (forall (any_result:
                                                                    (
                                                                        _:
                                                                        MiniParse.Tac.Base.ctest true
                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                              7
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  3)) ->
                                                                        Prims.Tot
                                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                    )).
                                                                    (fun _ ->
                                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4
                                                                    ) ==
                                                                    any_result ==>
                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                          3) <
                                                                    7 /\
                                                                    (forall (x8:
                                                                        MiniParse.Tac.Base.ctest false
                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                              7
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  3))).
                                                                        (*could not prove post-condition*)
                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                              4) <
                                                                        7 /\
                                                                        (forall (return_val:
                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                              7).
                                                                            return_val ==
                                                                            MiniParse.Spec.Int.mk_u16 
                                                                              4 ==>
                                                                            (forall (any_result:
                                                                                Prims.bool).
                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  7
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      4) ==
                                                                                any_result ==>
                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                      4) <
                                                                                7 /\
                                                                                (forall (any_result:
                                                                                    (
                                                                                        _:
                                                                                        MiniParse.Tac.Base.ctest 
                                                                                          true
                                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                              7
                                                                                              x2
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  4)
                                                                                          ) ->
                                                                                        Prims.Tot
                                                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                                    )).
                                                                                    (fun _ ->
                                                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5
                                                                                    ) ==
                                                                                    any_result ==>
                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                          4) <
                                                                                    7 /\
                                                                                    (forall (x6:
                                                                                        MiniParse.Tac.Base.ctest 
                                                                                          false
                                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                              7
                                                                                              x2
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  4)
                                                                                          )).
                                                                                        (*could not prove post-condition*)
                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                        FStar.UInt16.v 
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              5) <
                                                                                        7 /\
                                                                                        (forall (return_val:
                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                              7).
                                                                                            return_val ==
                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                              5 ==>
                                                                                            (forall (any_result:
                                                                                                Prims.bool)
                                                                                              .
                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                  7
                                                                                                  x2
                                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                                      5
                                                                                                    
                                                                                                  ) ==
                                                                                                any_result ==>
                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                FStar.UInt16.v 
                                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                                      5
                                                                                                    
                                                                                                  ) <
                                                                                                7 /\
                                                                                                (forall 
                                                                                                    (any_result:
                                                                                                    (
                                                                                                      
                                                                                                        _:
                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                          true
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                              7
                                                                                                              x2
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                  5
                                                                                                                
                                                                                                              )
                                                                                                            
                                                                                                          )
                                                                                                         ->
                                                                                                        Prims.Tot
                                                                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                                                    ))
                                                                                                  .
                                                                                                    (
                                                                                                      fun
                                                                                                        _
                                                                                                        ->
                                                                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6
                                                                                                    ) ==
                                                                                                    any_result ==>
                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                    FStar.UInt16.v 
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                          5
                                                                                                        
                                                                                                      )
                                                                                                     <
                                                                                                    7
                                                                                                ))))
                                                                                )))))))))))))))))))) /\
    (forall (any_result:
        (_: MiniParse.Spec.Int.bounded_u16 7 ->
            Prims.GTot Bench.MiniParse.Size7.Factor1.Seed00.Goal.test)).
        (fun x2 ->
            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                  x2
                  (MiniParse.Spec.Int.mk_u16 0))
              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
              (fun _ ->
                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                        x2
                        (MiniParse.Spec.Int.mk_u16 1))
                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                    (fun _ ->
                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                              x2
                              (MiniParse.Spec.Int.mk_u16 2))
                          (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                          (fun _ ->
                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                    x2
                                    (MiniParse.Spec.Int.mk_u16 3))
                                (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                                (fun _ ->
                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 4))
                                      (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                                      (fun _ ->
                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                7
                                                x2
                                                (MiniParse.Spec.Int.mk_u16 5))
                                            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6)
                                            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7))
                                ))))) ==
        any_result ==>
        (forall (any_result:
            (
                f2':
                (x: MiniParse.Spec.Int.bounded_u16 7 ->
                    Prims.Tot
                    (y:
                      Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                        { y ==
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x
                                                  (MiniParse.Spec.Int.mk_u16 3))
                                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4
                                              )
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        7
                                                        x
                                                        (MiniParse.Spec.Int.mk_u16 4))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              7
                                                              x
                                                              (MiniParse.Spec.Int.mk_u16 5))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6
                                                          )
                                                          (fun _ ->
                                                              Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7
                                                          )))))) })) ->
                g1:
                (_: Bench.MiniParse.Size7.Factor1.Seed00.Goal.test ->
                    Prims.GTot (MiniParse.Spec.Int.bounded_u16 7)) ->
                u842665:
                u842694:
                Prims.unit
                  { MiniParse.Spec.Combinators.synth_inverse g1
                      (fun x2 ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x2
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 3))
                                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4
                                              )
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        7
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 4))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              7
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 5))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6
                                                          )
                                                          (fun _ ->
                                                              Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7
                                                          ))))))) } ->
                Prims.Tot
                (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                            7)
                        (fun x2 ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 0))
                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 1))
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 2))
                                          (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    7
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 3))
                                                (fun _ ->
                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          7
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 4))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                7
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 5))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6
                                                            )
                                                            (fun _ ->
                                                                Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7
                                                            )))))))
                        g1)))).
            (forall (x0: MiniParse.Spec.Int.bounded_u16 7).
                (*could not prove post-condition*)
                (forall (x2: MiniParse.Spec.Int.bounded_u16 7).
                    (*could not prove post-condition*)
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
                    (forall (return_val: MiniParse.Spec.Int.bounded_u16 7).
                        return_val == MiniParse.Spec.Int.mk_u16 0 ==>
                        (forall (any_result: Prims.bool).
                            MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0) ==
                            any_result ==>
                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
                            (forall (any_result:
                                (
                                    _:
                                    MiniParse.Tac.Base.ctest true
                                      (MiniParse.Spec.Int.bounded_u16_eq 7
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 0)) ->
                                    Prims.Tot Bench.MiniParse.Size7.Factor1.Seed00.Goal.test)).
                                (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1) ==
                                any_result ==>
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
                                (forall (x14:
                                    MiniParse.Tac.Base.ctest false
                                      (MiniParse.Spec.Int.bounded_u16_eq 7
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 0))).
                                    (*could not prove post-condition*)
                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7 /\
                                    (forall (return_val: MiniParse.Spec.Int.bounded_u16 7).
                                        return_val == MiniParse.Spec.Int.mk_u16 1 ==>
                                        (forall (any_result: Prims.bool).
                                            MiniParse.Spec.Int.bounded_u16_eq 7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1) ==
                                            any_result ==>
                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7 /\
                                            (forall (any_result:
                                                (
                                                    _:
                                                    MiniParse.Tac.Base.ctest true
                                                      (MiniParse.Spec.Int.bounded_u16_eq 7
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 1)) ->
                                                    Prims.Tot
                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.test))
                                              .
                                                (fun _ ->
                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2) ==
                                                any_result ==>
                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7 /\
                                                (forall (x12:
                                                    MiniParse.Tac.Base.ctest false
                                                      (MiniParse.Spec.Int.bounded_u16_eq 7
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 1))).
                                                    (*could not prove post-condition*)
                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 7 /\
                                                    (forall (return_val:
                                                        MiniParse.Spec.Int.bounded_u16 7).
                                                        return_val == MiniParse.Spec.Int.mk_u16 2 ==>
                                                        (forall (any_result: Prims.bool).
                                                            MiniParse.Spec.Int.bounded_u16_eq 7
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2) ==
                                                            any_result ==>
                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                  2) <
                                                            7 /\
                                                            (forall (any_result:
                                                                (
                                                                    _:
                                                                    MiniParse.Tac.Base.ctest true
                                                                      (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          7
                                                                          x2
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              2)) ->
                                                                    Prims.Tot
                                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                )).
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3
                                                                ) ==
                                                                any_result ==>
                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                      2) <
                                                                7 /\
                                                                (forall (x10:
                                                                    MiniParse.Tac.Base.ctest false
                                                                      (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          7
                                                                          x2
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              2))).
                                                                    (*could not prove post-condition*)
                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                          3) <
                                                                    7 /\
                                                                    (forall (return_val:
                                                                        MiniParse.Spec.Int.bounded_u16 
                                                                          7).
                                                                        return_val ==
                                                                        MiniParse.Spec.Int.mk_u16 3 ==>
                                                                        (forall (any_result:
                                                                            Prims.bool).
                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                              7
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  3) ==
                                                                            any_result ==>
                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                  3) <
                                                                            7 /\
                                                                            (forall (any_result:
                                                                                (
                                                                                    _:
                                                                                    MiniParse.Tac.Base.ctest 
                                                                                      true
                                                                                      (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                          7
                                                                                          x2
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              3)) ->
                                                                                    Prims.Tot
                                                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                                )).
                                                                                (fun _ ->
                                                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4
                                                                                ) ==
                                                                                any_result ==>
                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                      3) <
                                                                                7 /\
                                                                                (forall (x8:
                                                                                    MiniParse.Tac.Base.ctest 
                                                                                      false
                                                                                      (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                          7
                                                                                          x2
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              3))).
                                                                                    (*could not prove post-condition*)
                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                          4) <
                                                                                    7 /\
                                                                                    (forall (return_val:
                                                                                        MiniParse.Spec.Int.bounded_u16 
                                                                                          7).
                                                                                        return_val ==
                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                          4 ==>
                                                                                        (forall (any_result:
                                                                                            Prims.bool)
                                                                                          .
                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                              7
                                                                                              x2
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  4) ==
                                                                                            any_result ==>
                                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                            FStar.UInt16.v 
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  4) <
                                                                                            7 /\
                                                                                            (forall (any_result:
                                                                                                (
                                                                                                    _:
                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                      true
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                          7
                                                                                                          x2
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              4
                                                                                                            
                                                                                                          )
                                                                                                        
                                                                                                      )
                                                                                                     ->
                                                                                                    Prims.Tot
                                                                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                                                )).
                                                                                                (fun
                                                                                                    _
                                                                                                    ->
                                                                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5
                                                                                                ) ==
                                                                                                any_result ==>
                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                FStar.UInt16.v 
                                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                                      4
                                                                                                    
                                                                                                  ) <
                                                                                                7 /\
                                                                                                (forall 
                                                                                                    (x6:
                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                      false
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                          7
                                                                                                          x2
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              4
                                                                                                            
                                                                                                          )
                                                                                                        
                                                                                                      )
                                                                                                    )
                                                                                                  .
                                                                                                    (*could not prove post-condition*)
                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                    FStar.UInt16.v 
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                          5
                                                                                                        
                                                                                                      )
                                                                                                     <
                                                                                                    7 /\
                                                                                                    (
                                                                                                      forall 
                                                                                                        (return_val:
                                                                                                        MiniParse.Spec.Int.bounded_u16 
                                                                                                          7
                                                                                                        )
                                                                                                      .
                                                                                                        return_val ==
                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                          5
                                                                                                         ==>
                                                                                                        (
                                                                                                          forall 
                                                                                                            (any_result:
                                                                                                            Prims.bool)
                                                                                                          .
                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                              7
                                                                                                              x2
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                  5
                                                                                                                
                                                                                                              )
                                                                                                             ==
                                                                                                            any_result ==>
                                                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                            FStar.UInt16.v 
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                  5
                                                                                                                
                                                                                                              )
                                                                                                             <
                                                                                                            7 /\
                                                                                                            (
                                                                                                              forall 
                                                                                                                (any_result:
                                                                                                                (
                                                                                                                  
                                                                                                                    _:
                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                      true
                                                                                                                      (
                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                          7
                                                                                                                          x2
              TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
                                                                                                            (
                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                              5
                                                                                                                            
                                                                                                                          )
                                                                                                                        
                                                                                                                      )
                                                                                                                     ->
                                                                                                                    Prims.Tot
                                                                                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                                                                ))
                                                                                                              .
                                                                                                                (
                                                                                                                  fun
                                                                                                                    _
                                                                                                                    ->
                                                                                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6
                                                                                                                ) ==
                                                                                                                any_result ==>
                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                                FStar.UInt16.v 
                                                                                                                  (
                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                      5
                                                                                                                    
                                                                                                                  )
                                                                                                                 <
                                                                                                                7
                                                                                                            )
                                                                                                        )
                                                                                                    )
                                                                                                ))))
                                                                                ))))))))))))))))) /\
                (forall (any_result:
                    (x2: MiniParse.Spec.Int.bounded_u16 7 ->
                        Prims.Tot Bench.MiniParse.Size7.Factor1.Seed00.Goal.test))
                    (any_result: Bench.MiniParse.Size7.Factor1.Seed00.Goal.test).
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                          x0
                          (MiniParse.Spec.Int.mk_u16 0))
                      (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x0
                                (MiniParse.Spec.Int.mk_u16 1))
                            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x0
                                      (MiniParse.Spec.Int.mk_u16 2))
                                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x0
                                            (MiniParse.Spec.Int.mk_u16 3))
                                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x0
                                                  (MiniParse.Spec.Int.mk_u16 4))
                                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5
                                              )
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        7
                                                        x0
                                                        (MiniParse.Spec.Int.mk_u16 5))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6
                                                    )
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7
                                                    )))))) ==
                    any_result ==>
                    (*Subtyping check failed; expected type y:
Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
  { y ==
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7 x0 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x0
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x0
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x0
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x0
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x0
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6)
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7)))))) }; got type Bench.MiniParse.Size7.Factor1.Seed00.Goal.test*)
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                          x0
                          (MiniParse.Spec.Int.mk_u16 0))
                      (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x0
                                (MiniParse.Spec.Int.mk_u16 1))
                            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x0
                                      (MiniParse.Spec.Int.mk_u16 2))
                                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x0
                                            (MiniParse.Spec.Int.mk_u16 3))
                                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x0
                                                  (MiniParse.Spec.Int.mk_u16 4))
                                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5
                                              )
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        7
                                                        x0
                                                        (MiniParse.Spec.Int.mk_u16 5))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6
                                                    )
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7
                                                    )))))) ==
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                          x0
                          (MiniParse.Spec.Int.mk_u16 0))
                      (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x0
                                (MiniParse.Spec.Int.mk_u16 1))
                            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x0
                                      (MiniParse.Spec.Int.mk_u16 2))
                                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x0
                                            (MiniParse.Spec.Int.mk_u16 3))
                                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x0
                                                  (MiniParse.Spec.Int.mk_u16 4))
                                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5
                                              )
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        7
                                                        x0
                                                        (MiniParse.Spec.Int.mk_u16 5))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6
                                                    )
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7
                                                    )))))))) /\
            (forall (any_result:
                (x: MiniParse.Spec.Int.bounded_u16 7 ->
                    Prims.Tot
                    (y:
                      Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                        { y ==
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x
                                                  (MiniParse.Spec.Int.mk_u16 3))
                                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4
                                              )
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        7
                                                        x
                                                        (MiniParse.Spec.Int.mk_u16 4))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              7
                                                              x
                                                              (MiniParse.Spec.Int.mk_u16 5))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6
                                                          )
                                                          (fun _ ->
                                                              Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7
                                                          )))))) }))).
                (fun x0 ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                          x0
                          (MiniParse.Spec.Int.mk_u16 0))
                      (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x0
                                (MiniParse.Spec.Int.mk_u16 1))
                            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x0
                                      (MiniParse.Spec.Int.mk_u16 2))
                                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x0
                                            (MiniParse.Spec.Int.mk_u16 3))
                                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x0
                                                  (MiniParse.Spec.Int.mk_u16 4))
                                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5
                                              )
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        7
                                                        x0
                                                        (MiniParse.Spec.Int.mk_u16 5))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6
                                                    )
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7
                                                    ))))))) ==
                any_result ==>
                (forall (any_result:
                    (
                        g1:
                        (_: Bench.MiniParse.Size7.Factor1.Seed00.Goal.test ->
                            Prims.GTot (MiniParse.Spec.Int.bounded_u16 7)) ->
                        u842814:
                        u842829:
                        Prims.unit
                          { MiniParse.Spec.Combinators.synth_inverse g1
                              (fun x2 ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 0))
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1))
                                          (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    7
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 2))
                                                (fun _ ->
                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          7
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 3))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                7
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 4))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5
                                                            )
                                                            (fun _ ->
                                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                      7
                                                                      x2
                                                                      (MiniParse.Spec.Int.mk_u16 5))
                                                                  (fun _ ->
                                                                      Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6
                                                                  )
                                                                  (fun _ ->
                                                                      Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7
                                                                  ))))))) } ->
                        Prims.Tot
                        (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                                    7)
                                (fun x2 ->
                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 0))
                                      (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
                                      (fun _ ->
                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                7
                                                x2
                                                (MiniParse.Spec.Int.mk_u16 1))
                                            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                                            (fun _ ->
                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                      7
                                                      x2
                                                      (MiniParse.Spec.Int.mk_u16 2))
                                                  (fun _ ->
                                                      Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                                                  (fun _ ->
                                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                            7
                                                            x2
                                                            (MiniParse.Spec.Int.mk_u16 3))
                                                        (fun _ ->
                                                            Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4
                                                        )
                                                        (fun _ ->
                                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                  7
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 4))
                                                              (fun _ ->
                                                                  Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5
                                                              )
                                                              (fun _ ->
                                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                        7
                                                                        x2
                                                                        (MiniParse.Spec.Int.mk_u16 5
                                                                        ))
                                                                    (fun _ ->
                                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6
                                                                    )
                                                                    (fun _ ->
                                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7
                                                                    )))))))
                                g1)))).
                    (forall (x1: Bench.MiniParse.Size7.Factor1.Seed00.Goal.test).
                        (*could not prove post-condition*)
                        C7? x1 == true ==>
                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 6) < 7 /\
                        ~(C7? x1 == true) ==>
                        (C6? x1 == true ==>
                          (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                          FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 5) < 7) /\
                        (~(C6? x1 == true) ==>
                          C5? x1 == true ==>
                          (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                          FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 4) < 7 /\
                          ~(C5? x1 == true) ==>
                          (C4? x1 == true ==>
                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) < 7) /\
                          (~(C4? x1 == true) ==>
                            C3? x1 == true ==>
                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 7 /\
                            ~(C3? x1 == true) ==>
                            (C2? x1 == true ==>
                              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7) /\
                            (~(C2? x1 == true) ==>
                              C1? x1 == true ==>
                              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
                              ~(C1? x1 == true) ==>
                              (forall (b: Bench.MiniParse.Size7.Factor1.Seed00.Goal.test).
                                  x1 == b ==>
                                  (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                  FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 6) < 7))))) /\
                    (forall (any_result:
                        (_: Bench.MiniParse.Size7.Factor1.Seed00.Goal.test ->
                            Prims.GTot (MiniParse.Spec.Int.bounded_u16 7))).
                        (fun x1 ->
                            (match x1 with
                              | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7 ->
                                MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7
                              | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6 ->
                                MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 7
                              | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5 ->
                                MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 7
                              | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4 ->
                                MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 7
                              | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3 ->
                                MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 7
                              | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2 ->
                                MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 7
                              | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1 ->
                                MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 7
                              | _ -> MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7
                            )
                            <:
                            MiniParse.Spec.Int.bounded_u16 7) ==
                        any_result ==>
                        (forall (any_result:
                            (
                                u842850:
                                u842866:
                                Prims.unit
                                  { MiniParse.Spec.Combinators.synth_inverse (fun x1 ->
                                          (match x1 with
                                            | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7 ->
                                              MiniParse.Spec.Int.mk_u16 6
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 7
                                            | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6 ->
                                              MiniParse.Spec.Int.mk_u16 5
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 7
                                            | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5 ->
                                              MiniParse.Spec.Int.mk_u16 4
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 7
                                            | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4 ->
                                              MiniParse.Spec.Int.mk_u16 3
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 7
                                            | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3 ->
                                              MiniParse.Spec.Int.mk_u16 2
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 7
                                            | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2 ->
                                              MiniParse.Spec.Int.mk_u16 1
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 7
                                            | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1 ->
                                              MiniParse.Spec.Int.mk_u16 0
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 7
                                            | _ ->
                                              MiniParse.Spec.Int.mk_u16 6
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 7)
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 7)
                                      (fun x2 ->
                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                7
                                                x2
                                                (MiniParse.Spec.Int.mk_u16 0))
                                            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
                                            (fun _ ->
                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                      7
                                                      x2
                                                      (MiniParse.Spec.Int.mk_u16 1))
                                                  (fun _ ->
                                                      Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                                                  (fun _ ->
                                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                            7
                                                            x2
                                                            (MiniParse.Spec.Int.mk_u16 2))
                                                        (fun _ ->
                                                            Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3
                                                        )
                                                        (fun _ ->
                                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                  7
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 3))
                                                              (fun _ ->
                                                                  Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4
                                                              )
                                                              (fun _ ->
                                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                        7
                                                                        x2
                                                                        (MiniParse.Spec.Int.mk_u16 4
                                                                        ))
                                                                    (fun _ ->
                                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5
                                                                    )
                                                                    (fun _ ->
                                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                              7
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  5))
                                                                          (fun _ ->
                                                                              Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6
                                                                          )
                                                                          (fun _ ->
                                                                              Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7
                                                                          ))))))) } ->
                                Prims.Tot
                                (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth 
                                        (MiniParse.Spec.Int.parse_bounded_u16 7)
                                        (fun x2 ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 0))
                                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1
                                              )
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        7
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 1))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              7
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    7
                                                                    x2
                                                                    (MiniParse.Spec.Int.mk_u16 3))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4
                                                                )
                                                                (fun _ ->
                                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          7
                                                                          x2
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              4))
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5
                                                                      )
                                                                      (fun _ ->
                                                                          MiniParse.Tac.Base.mk_if_t 
                                                                            (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                7
                                                                                x2
                                                                                (MiniParse.Spec.Int.mk_u16 
                                                                                    5))
                                                                            (fun _ ->
                                                                                Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6
                                                                            )
                                                                            (fun _ ->
                                                                                Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7
                                                                            )))))))
                                        (fun x1 ->
                                            (match x1 with
                                              | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7 ->
                                                MiniParse.Spec.Int.mk_u16 6
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 7
                                              | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6 ->
                                                MiniParse.Spec.Int.mk_u16 5
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 7
                                              | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5 ->
                                                MiniParse.Spec.Int.mk_u16 4
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 7
                                              | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4 ->
                                                MiniParse.Spec.Int.mk_u16 3
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 7
                                              | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3 ->
                                                MiniParse.Spec.Int.mk_u16 2
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 7
                                              | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2 ->
                                                MiniParse.Spec.Int.mk_u16 1
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 7
                                              | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1 ->
                                                MiniParse.Spec.Int.mk_u16 0
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 7
                                              | _ ->
                                                MiniParse.Spec.Int.mk_u16 6
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 7)
                                            <:
                                            MiniParse.Spec.Int.bounded_u16 7))))).
                            (*Subtyping check failed; expected type u837446:
Prims.unit
  { MiniParse.Spec.Combinators.synth_inverse (fun x1 ->
          (match x1 with
            | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7 ->
              MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7
            | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6 ->
              MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 7
            | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5 ->
              MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 7
            | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4 ->
              MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 7
            | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3 ->
              MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 7
            | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2 ->
              MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 7
            | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1 ->
              MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 7
            | _ -> MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7)
          <:
          MiniParse.Spec.Int.bounded_u16 7)
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6)
                                          (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7))))
                  ))) }; got type Prims.unit*)
                            Prims.auto_squash (MiniParse.Spec.Combinators.synth_inverse (fun x1 ->
                                      (match x1 with
                                        | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7 ->
                                          MiniParse.Spec.Int.mk_u16 6
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 7
                                        | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6 ->
                                          MiniParse.Spec.Int.mk_u16 5
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 7
                                        | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5 ->
                                          MiniParse.Spec.Int.mk_u16 4
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 7
                                        | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4 ->
                                          MiniParse.Spec.Int.mk_u16 3
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 7
                                        | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3 ->
                                          MiniParse.Spec.Int.mk_u16 2
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 7
                                        | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2 ->
                                          MiniParse.Spec.Int.mk_u16 1
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 7
                                        | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1 ->
                                          MiniParse.Spec.Int.mk_u16 0
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 7
                                        | _ ->
                                          MiniParse.Spec.Int.mk_u16 6
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 7)
                                      <:
                                      MiniParse.Spec.Int.bounded_u16 7)
                                  (fun x2 ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 0))
                                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 1))
                                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2
                                              )
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        7
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 2))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              7
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 3))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    7
                                                                    x2
                                                                    (MiniParse.Spec.Int.mk_u16 4))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5
                                                                )
                                                                (fun _ ->
                                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          7
                                                                          x2
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              5))
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6
                                                                      )
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7
                                                                      )))))))))))))))
SMT goals (0):

TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
proof-state: State dump @ depth 39 (synth_inverse_forall_tenum_solve FAILED here:):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Spec.TEnum.fst(183,12-183,66)
ACTIVE goals (1):
(x:
(_: MiniParse.Spec.Int.bounded_u16 4 -> Prims.GTot Bench.MiniParse.Size4.Factor1.Seed00.Goal.test)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4)))) ==
x), (x:
(x: MiniParse.Spec.Int.bounded_u16 4 ->
    Prims.Tot
    (y:
      Bench.MiniParse.Size4.Factor1.Seed00.Goal.test
        { y ==
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                            x
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4))) }))), (x:
(_: Bench.MiniParse.Size4.Factor1.Seed00.Goal.test -> Prims.GTot (MiniParse.Spec.Int.bounded_u16 4))), (x:
u877067:
Prims.unit
  { MiniParse.Spec.Combinators.synth_inverse x
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4)))) }), (x:
(_: MiniParse.Spec.Int.bounded_u16 4 -> Prims.GTot Bench.MiniParse.Size4.Factor1.Seed00.Goal.test)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4)))) ==
x) |- _ : Prims.squash (MiniParse.Spec.Combinators.synth_inverse x
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4)))))
SMT goals (0):

TAC>> Checking success for: assumption
TAC>> Success: assumption
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> No goals left
TAC>> Applied: implies_intro
TAC>> gen_parser_impl spits:
TAC>> MiniParse.Impl.Combinators.parse_synth_impl (MiniParse.Impl.Int.parse_bounded_u16_impl 4)
  (fun x2 ->
      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
            x2
            (MiniParse.Spec.Int.mk_u16 0))
        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
        (fun _ ->
            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                  x2
                  (MiniParse.Spec.Int.mk_u16 1))
              (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
              (fun _ ->
                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                        x2
                        (MiniParse.Spec.Int.mk_u16 2))
                    (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                    (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4))))
  (fun x0 ->
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3)
                        (fun _ -> Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4)))) x0)
  (fun x1 ->
      (match x1 with
        | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C4 ->
          MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4
        | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C3 ->
          MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 4
        | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C2 ->
          MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 4
        | Bench.MiniParse.Size4.Factor1.Seed00.Goal.C1 ->
          MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 4
        | _ -> MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4)
      <:
      MiniParse.Spec.Int.bounded_u16 4)
  ()
Tactic fun _ ->
  MiniParse.Tac.Impl.gen_parser_impl (FStar.Tactics.Types.Goal)
  <:
  FStar.Tactics.Effect.TAC Prims.unit ran in 26738 ms (Goal)
TAC>> Applied: implies_intro
Verified module: Bench.MiniParse.Size4.Factor1.Seed00.Goal (38625 milliseconds)
All verification conditions discharged successfully
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
../../../bin/fstar.exe --cache_off --odir _output --cache_dir _cache Bench.MiniParse.Size7.Factor10.Seed00.Goal.fst --include ..
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: reflexivity
TAC>> Success: reflexivity
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> No goals left
TAC>> Checking success for: synth_inverse_forall_bounded_u16_solve
TAC>> Success: synth_inverse_forall_bounded_u16_solve
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: synth_inverse_forall_bounded_u16_solve, main goal
TAC>> Success: synth_inverse_forall_bounded_u16_solve, main goal
TAC>> Checking success for: trivial
TAC>> Success: trivial
proof-state: State dump @ depth 46 (Some goals left):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Tac.Base.fst(169,4-169,28)
ACTIVE goals (1):
(x:
(_: MiniParse.Spec.Int.bounded_u16 7 -> Prims.GTot Bench.MiniParse.Size7.Factor1.Seed00.Goal.test)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6)
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7))))))) ==
x), (x:
(
    f2':
    (x: MiniParse.Spec.Int.bounded_u16 7 ->
        Prims.Tot
        (y:
          Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
            { y ==
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                    x
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                          x
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x
                                      (MiniParse.Spec.Int.mk_u16 3))
                                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x
                                            (MiniParse.Spec.Int.mk_u16 4))
                                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x
                                                  (MiniParse.Spec.Int.mk_u16 5))
                                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6
                                              )
                                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7
                                              )))))) })) ->
    g1:
    (_: Bench.MiniParse.Size7.Factor1.Seed00.Goal.test ->
        Prims.GTot (MiniParse.Spec.Int.bounded_u16 7)) ->
    u1268857:
    u1268886:
    Prims.unit
      { MiniParse.Spec.Combinators.synth_inverse g1
          (fun x2 ->
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                    x2
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                          x2
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x2
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 3))
                                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 4))
                                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 5))
                                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6
                                              )
                                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7
                                              ))))))) } ->
    Prims.Tot
    (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                7)
            (fun x2 ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x2
                      (MiniParse.Spec.Int.mk_u16 0))
                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 1))
                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 2))
                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 3))
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 4))
                                          (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    7
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 5))
                                                (fun _ ->
                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6)
                                                (fun _ ->
                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7))))
                        )))
            g1)))), (x:
(x: MiniParse.Spec.Int.bounded_u16 7 ->
    Prims.Tot
    (y:
      Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
        { y ==
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6)
                                          (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7))))
                  )) }))), (_:
(fun x0 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7 x0 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x0
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x0
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x0
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x0
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x0
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6)
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7))))))) ==
x), (x:
(
    g1:
    (_: Bench.MiniParse.Size7.Factor1.Seed00.Goal.test ->
        Prims.GTot (MiniParse.Spec.Int.bounded_u16 7)) ->
    u1268928:
    u1268943:
    Prims.unit
      { MiniParse.Spec.Combinators.synth_inverse g1
          (fun x2 ->
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                    x2
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                          x2
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x2
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 3))
                                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 4))
                                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 5))
                                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6
                                              )
                                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7
                                              ))))))) } ->
    Prims.Tot
    (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                7)
            (fun x2 ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x2
                      (MiniParse.Spec.Int.mk_u16 0))
                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 1))
                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 2))
                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 3))
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 4))
                                          (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    7
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 5))
                                                (fun _ ->
                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6)
                                                (fun _ ->
                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7))))
                        )))
            g1)))), (x:
(_: Bench.MiniParse.Size7.Factor1.Seed00.Goal.test -> Prims.GTot (MiniParse.Spec.Int.bounded_u16 7))), (_:
(fun x1 ->
    (match x1 with
      | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7 ->
        MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7
      | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6 ->
        MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 7
      | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5 ->
        MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 7
      | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4 ->
        MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 7
      | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3 ->
        MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 7
      | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2 ->
        MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 7
      | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1 ->
        MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 7
      | _ -> MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7)
    <:
    MiniParse.Spec.Int.bounded_u16 7) ==
x), (x:
(
    u1268960:
    u1268976:
    Prims.unit
      { MiniParse.Spec.Combinators.synth_inverse (fun x1 ->
              (match x1 with
                | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7 ->
                  MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7
                | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6 ->
                  MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 7
                | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5 ->
                  MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 7
                | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4 ->
                  MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 7
                | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3 ->
                  MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 7
                | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2 ->
                  MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 7
                | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1 ->
                  MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 7
                | _ -> MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7)
              <:
              MiniParse.Spec.Int.bounded_u16 7)
          (fun x2 ->
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                    x2
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                          x2
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x2
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 3))
                                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 4))
                                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 5))
                                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6
                                              )
                                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7
                                              ))))))) } ->
    Prims.Tot
    (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                7)
            (fun x2 ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x2
                      (MiniParse.Spec.Int.mk_u16 0))
                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 1))
                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 2))
                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 3))
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 4))
                                          (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    7
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 5))
                                                (fun _ ->
                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6)
                                                (fun _ ->
                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7))))
                        )))
            (fun x1 ->
                (match x1 with
                  | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7 ->
                    MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7
                  | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6 ->
                    MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 7
                  | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5 ->
                    MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 7
                  | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4 ->
                    MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 7
                  | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3 ->
                    MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 7
                  | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2 ->
                    MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 7
                  | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1 ->
                    MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 7
                  | _ -> MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7)
                <:
                MiniParse.Spec.Int.bounded_u16 7))))) |- _ : Prims.squash ((forall (x2: MiniParse.Spec.Int.bounded_u16 7).
        (*could not prove post-condition*)
        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
        (forall (return_val: MiniParse.Spec.Int.bounded_u16 7).
            return_val == MiniParse.Spec.Int.mk_u16 0 ==>
            (forall (any_result: Prims.bool).
                MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0) == any_result ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
                (forall (any_result:
                    (
                        _:
                        MiniParse.Tac.Base.ctest true
                          (MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0)) ->
                        Prims.Tot Bench.MiniParse.Size7.Factor1.Seed00.Goal.test)).
                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1) == any_result ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
                    (forall (x14:
                        MiniParse.Tac.Base.ctest false
                          (MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0))).
                        (*could not prove post-condition*)
                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7 /\
                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 7).
                            return_val == MiniParse.Spec.Int.mk_u16 1 ==>
                            (forall (any_result: Prims.bool).
                                MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 1) ==
                                any_result ==>
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7 /\
                                (forall (any_result:
                                    (
                                        _:
                                        MiniParse.Tac.Base.ctest true
                                          (MiniParse.Spec.Int.bounded_u16_eq 7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1)) ->
                                        Prims.Tot Bench.MiniParse.Size7.Factor1.Seed00.Goal.test)).
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2) ==
                                    any_result ==>
                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7 /\
                                    (forall (x12:
                                        MiniParse.Tac.Base.ctest false
                                          (MiniParse.Spec.Int.bounded_u16_eq 7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1))).
                                        (*could not prove post-condition*)
                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 7 /\
                                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 7).
                                            return_val == MiniParse.Spec.Int.mk_u16 2 ==>
                                            (forall (any_result: Prims.bool).
                                                MiniParse.Spec.Int.bounded_u16_eq 7
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 2) ==
                                                any_result ==>
                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 7 /\
                                                (forall (any_result:
                                                    (
                                                        _:
                                                        MiniParse.Tac.Base.ctest true
                                                          (MiniParse.Spec.Int.bounded_u16_eq 7
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2)) ->
                                                        Prims.Tot
                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                    )).
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3
                                                    ) ==
                                                    any_result ==>
                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 7 /\
                                                    (forall (x10:
                                                        MiniParse.Tac.Base.ctest false
                                                          (MiniParse.Spec.Int.bounded_u16_eq 7
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2))).
                                                        (*could not prove post-condition*)
                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) <
                                                        7 /\
                                                        (forall (return_val:
                                                            MiniParse.Spec.Int.bounded_u16 7).
                                                            return_val ==
                                                            MiniParse.Spec.Int.mk_u16 3 ==>
                                                            (forall (any_result: Prims.bool).
                                                                MiniParse.Spec.Int.bounded_u16_eq 7
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 3) ==
                                                                any_result ==>
                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                      3) <
                                                                7 /\
                                                                (forall (any_result:
                                                                    (
                                                                        _:
                                                                        MiniParse.Tac.Base.ctest true
                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                              7
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  3)) ->
                                                                        Prims.Tot
                                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                    )).
                                                                    (fun _ ->
                                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4
                                                                    ) ==
                                                                    any_result ==>
                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                          3) <
                                                                    7 /\
                                                                    (forall (x8:
                                                                        MiniParse.Tac.Base.ctest false
                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                              7
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  3))).
                                                                        (*could not prove post-condition*)
                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                              4) <
                                                                        7 /\
                                                                        (forall (return_val:
                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                              7).
                                                                            return_val ==
                                                                            MiniParse.Spec.Int.mk_u16 
                                                                              4 ==>
                                                                            (forall (any_result:
                                                                                Prims.bool).
                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  7
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      4) ==
                                                                                any_result ==>
                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                      4) <
                                                                                7 /\
                                                                                (forall (any_result:
                                                                                    (
                                                                                        _:
                                                                                        MiniParse.Tac.Base.ctest 
                                                                                          true
                                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                              7
                                                                                              x2
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  4)
                                                                                          ) ->
                                                                                        Prims.Tot
                                                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                                    )).
                                                                                    (fun _ ->
                                                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5
                                                                                    ) ==
                                                                                    any_result ==>
                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                          4) <
                                                                                    7 /\
                                                                                    (forall (x6:
                                                                                        MiniParse.Tac.Base.ctest 
                                                                                          false
                                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                              7
                                                                                              x2
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  4)
                                                                                          )).
                                                                                        (*could not prove post-condition*)
                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                        FStar.UInt16.v 
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              5) <
                                                                                        7 /\
                                                                                        (forall (return_val:
                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                              7).
                                                                                            return_val ==
                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                              5 ==>
                                                                                            (forall (any_result:
                                                                                                Prims.bool)
                                                                                              .
                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                  7
                                                                                                  x2
                                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                                      5
                                                                                                    
                                                                                                  ) ==
                                                                                                any_result ==>
                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                FStar.UInt16.v 
                                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                                      5
                                                                                                    
                                                                                                  ) <
                                                                                                7 /\
                                                                                                (forall 
                                                                                                    (any_result:
                                                                                                    (
                                                                                                      
                                                                                                        _:
                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                          true
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                              7
                                                                                                              x2
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                  5
                                                                                                                
                                                                                                              )
                                                                                                            
                                                                                                          )
                                                                                                         ->
                                                                                                        Prims.Tot
                                                                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                                                                                                    ))
                                                                                                  .
                                                                                                    (
                                                                                                      fun
                                                                                                        _
                                                                                                        ->
                                                                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6
                                                                                                    ) ==
                                                                                                    any_result ==>
                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                    FStar.UInt16.v 
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                          5
                                                                                                        
                                                                                                      )
                                                                                                     <
                                                                                                    7
                                                                                                ))))
                                                                                )))))))))))))))))))) /\
    (forall (any_result:
        (_: MiniParse.Spec.Int.bounded_u16 7 ->
            Prims.GTot Bench.MiniParse.Size7.Factor1.Seed00.Goal.test)).
        (fun x2 ->
            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                  x2
                  (MiniParse.Spec.Int.mk_u16 0))
              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
              (fun _ ->
                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                        x2
                        (MiniParse.Spec.Int.mk_u16 1))
                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                    (fun _ ->
                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                              x2
                              (MiniParse.Spec.Int.mk_u16 2))
                          (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                          (fun _ ->
                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                    x2
                                    (MiniParse.Spec.Int.mk_u16 3))
                                (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                                (fun _ ->
                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 4))
                                      (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                                      (fun _ ->
                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                7
                                                x2
                                                (MiniParse.Spec.Int.mk_u16 5))
                                            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6)
                                            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7))
                                ))))) ==
        any_result ==>
        (forall (any_result:
            (
                f2:
                (_: Bench.MiniParse.Size7.Factor1.Seed00.Goal.test ->
                    Prims.GTot (MiniParse.Spec.Int.bounded_u16 7)) ->
                u1269171:
                Prims.squash (MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16' 7
                      Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
                      (fun x2 ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x2
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 3))
                                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4
                                              )
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        7
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 4))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              7
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 5))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6
                                                          )
                                                          (fun _ ->
                                                              Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7
                                                          )))))))
                      f2) ->
                Prims.Tot
                (Prims.squash (MiniParse.Spec.Combinators.synth_inverse f2
                        (fun x2 ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 0))
                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 1))
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 2))
                                          (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    7
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 3))
                                                (fun _ ->
                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          7
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 4))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                7
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 5))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6
                                                            )
                                                            (fun _ ->
                                                                Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7
                                                            )))))))))))
            (x1: Bench.MiniParse.Size7.Factor1.Seed00.Goal.test).
            (*could not prove post-condition*)
            C7? x1 == true ==>
            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 6) < 7 /\
            ~(C7? x1 == true) ==>
            (C6? x1 == true ==>
              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 5) < 7) /\
            (~(C6? x1 == true) ==>
              C5? x1 == true ==>
              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 4) < 7 /\
              ~(C5? x1 == true) ==>
              (C4? x1 == true ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) < 7) /\
              (~(C4? x1 == true) ==>
                C3? x1 == true ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 7 /\
                ~(C3? x1 == true) ==>
                (C2? x1 == true ==>
                  (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                  FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7) /\
                (~(C2? x1 == true) ==>
                  C1? x1 == true ==>
                  (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                  FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
                  ~(C1? x1 == true) ==>
                  (forall (b: Bench.MiniParse.Size7.Factor1.Seed00.Goal.test).
                      x1 == b ==>
                      (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                      FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 6) < 7)))))))
SMT goals (0):

TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
/home/guido/r/fstar/examples/miniparse/MiniParse.Spec.List.fst(106,54-106,65): (Warning 288) FStar.Seq.Base.createEmpty is deprecated, use Seq.empty instead
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Unfolded definition: MiniParse.Tac.Spec.t
TAC>> Applied: implies_intro
TAC>> Unfolded definition: MiniParse.Tac.Spec.u8
TAC>> Applied: forall_intro
TAC>> Unfolded definition: MiniParse.Tac.Spec.u8
TAC>> Unfolded definition: MiniParse.Tac.Spec.u8
TAC>> No goals left
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Unfolded definition: MiniParse.Tac.Impl.p
TAC>> No goals left
TAC>> gen_parser_impl spits:
TAC>> MiniParse.Impl.Combinators.parse_nondep_then_impl MiniParse.Impl.Int.parse_u8_impl
  (MiniParse.Impl.Combinators.parse_ret_impl 42)
TAC>> Unfolded definition: MiniParse.Tac.Impl.p'
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Unfolded definition: MiniParse.Tac.Impl.p
TAC>> No goals left
TAC>> gen_parser_impl spits:
TAC>> MiniParse.Impl.Combinators.parse_nondep_then_impl #(FStar.UInt8.t * Prims.int)
  #MiniParse.Tac.Impl.p
  (MiniParse.Impl.Combinators.parse_nondep_then_impl #FStar.UInt8.t
      #MiniParse.Spec.Int.parse_u8
      MiniParse.Impl.Int.parse_u8_impl
      #Prims.int
      #(MiniParse.Spec.Combinators.parse_ret #Prims.int 42)
      (MiniParse.Impl.Combinators.parse_ret_impl #Prims.int 42))
  #FStar.UInt8.t
  #MiniParse.Spec.Int.parse_u8
  MiniParse.Impl.Int.parse_u8_impl
TAC>> Unfolded definition: MiniParse.Tac.Impl.r
TAC>> No goals left
TAC>> gen_parser_impl spits:
TAC>> MiniParse.Impl.Combinators.parse_synth_impl #Prims.int
  #Prims.int
  #(MiniParse.Spec.Combinators.parse_ret #Prims.int 42)
  (MiniParse.Impl.Combinators.parse_ret_impl #Prims.int 42)
  (fun x -> x + 1)
  (fun x0 -> (fun x -> x + 1) x0)
  (fun x -> x - 1)
  ()
TAC>> Applied: forall_intro
TAC>> Unfolded definition: MiniParse.Tac.Impl.j
TAC>> Unfolded definition: MiniParse.Tac.Spec.p
TAC>> No goals left
TAC>> gen_parser_impl spits:
TAC>> MiniParse.Impl.Combinators.parse_nondep_then_impl #MiniParse.Tac.Spec.u8
  #MiniParse.Spec.Int.parse_u8
  MiniParse.Impl.Int.parse_u8_impl
  #(MiniParse.Spec.List.nlist 79 MiniParse.Tac.Spec.u8 * MiniParse.Tac.Spec.u8)
  #(MiniParse.Spec.Combinators.nondep_then #(MiniParse.Spec.List.nlist 79 MiniParse.Tac.Spec.u8)
      (MiniParse.Spec.List.parse_nlist 79 #MiniParse.Tac.Spec.u8 MiniParse.Spec.Int.parse_u8)
      #MiniParse.Tac.Spec.u8
      MiniParse.Spec.Int.parse_u8)
  (MiniParse.Impl.Combinators.parse_nondep_then_impl #(MiniParse.Spec.List.nlist 79
          MiniParse.Tac.Spec.u8)
      #(MiniParse.Spec.List.parse_nlist 79 #MiniParse.Tac.Spec.u8 MiniParse.Spec.Int.parse_u8)
      (MiniParse.Impl.List.parse_nlist_impl 79
          (MiniParse.Tac.Impl.mk_u32 79)
          #MiniParse.Tac.Spec.u8
          #MiniParse.Spec.Int.parse_u8
          MiniParse.Impl.Int.parse_u8_impl)
      #MiniParse.Tac.Spec.u8
      #MiniParse.Spec.Int.parse_u8
      MiniParse.Impl.Int.parse_u8_impl)
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Inductive type with 7
TAC>> function
| Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7 ->
  MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7
| Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6 ->
  MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 7
| Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5 ->
  MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 7
| Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4 ->
  MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 7
| Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3 ->
  MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 7
| Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2 ->
  MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 7
| Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1 ->
  MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 7
| _ -> MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
proof-state: State dump @ depth 2 (Some goals left):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Tac.Base.fst(169,4-169,28)
ACTIVE goals (1):
 |- _ : Prims.squash ((forall (x2: MiniParse.Spec.Int.bounded_u16 7).
        (*could not prove post-condition*)
        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
        (forall (return_val: MiniParse.Spec.Int.bounded_u16 7).
            return_val == MiniParse.Spec.Int.mk_u16 0 ==>
            (forall (any_result: Prims.bool).
                MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0) == any_result ==>
                (forall (any_result:
                    (
                        x1:
                        (
                            _:
                            MiniParse.Tac.Base.ctest true
                              (MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0)) ->
                            Prims.Tot Bench.MiniParse.Size7.Factor10.Seed00.Goal.test) ->
                        x2:
                        (
                            _:
                            MiniParse.Tac.Base.ctest false
                              (MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0)) ->
                            Prims.Tot Bench.MiniParse.Size7.Factor10.Seed00.Goal.test) ->
                        Prims.Tot Bench.MiniParse.Size7.Factor10.Seed00.Goal.test)).
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
                    (forall (any_result:
                        (
                            _:
                            MiniParse.Tac.Base.ctest true
                              (MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0)) ->
                            Prims.Tot Bench.MiniParse.Size7.Factor10.Seed00.Goal.test)).
                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1) == any_result ==>
                        (forall (any_result:
                            (
                                x2:
                                (
                                    _:
                                    MiniParse.Tac.Base.ctest false
                                      (MiniParse.Spec.Int.bounded_u16_eq 7
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 0)) ->
                                    Prims.Tot Bench.MiniParse.Size7.Factor10.Seed00.Goal.test) ->
                                Prims.Tot Bench.MiniParse.Size7.Factor10.Seed00.Goal.test)).
                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
                            (forall (x14:
                                MiniParse.Tac.Base.ctest false
                                  (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 0))).
                                (*could not prove post-condition*)
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7 /\
                                (forall (return_val: MiniParse.Spec.Int.bounded_u16 7).
                                    return_val == MiniParse.Spec.Int.mk_u16 1 ==>
                                    (forall (any_result: Prims.bool).
                                        MiniParse.Spec.Int.bounded_u16_eq 7
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 1) ==
                                        any_result ==>
                                        (forall (any_result:
                                            (
                                                x1:
                                                (
                                                    _:
                                                    MiniParse.Tac.Base.ctest true
                                                      (MiniParse.Spec.Int.bounded_u16_eq 7
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 1)) ->
                                                    Prims.Tot
                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.test) ->
                                                x2:
                                                (
                                                    _:
                                                    MiniParse.Tac.Base.ctest false
                                                      (MiniParse.Spec.Int.bounded_u16_eq 7
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 1)) ->
                                                    Prims.Tot
                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.test) ->
                                                Prims.Tot
                                                Bench.MiniParse.Size7.Factor10.Seed00.Goal.test)).
                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7 /\
                                            (forall (any_result:
                                                (
                                                    _:
                                                    MiniParse.Tac.Base.ctest true
                                                      (MiniParse.Spec.Int.bounded_u16_eq 7
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 1)) ->
                                                    Prims.Tot
                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.test))
                                              .
                                                (fun _ ->
                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2) ==
                                                any_result ==>
                                                (forall (any_result:
                                                    (
                                                        x2:
                                                        (
                                                            _:
                                                            MiniParse.Tac.Base.ctest false
                                                              (MiniParse.Spec.Int.bounded_u16_eq 7
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 1)) ->
                                                            Prims.Tot
                                                            Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                        ) ->
                                                        Prims.Tot
                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                    )).
                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7 /\
                                                    (forall (x12:
                                                        MiniParse.Tac.Base.ctest false
                                                          (MiniParse.Spec.Int.bounded_u16_eq 7
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 1))).
                                                        (*could not prove post-condition*)
                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) <
                                                        7 /\
                                                        (forall (return_val:
                                                            MiniParse.Spec.Int.bounded_u16 7).
                                                            return_val ==
                                                            MiniParse.Spec.Int.mk_u16 2 ==>
                                                            (forall (any_result: Prims.bool).
                                                                MiniParse.Spec.Int.bounded_u16_eq 7
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 2) ==
                                                                any_result ==>
                                                                (forall (any_result:
                                                                    (
                                                                        x1:
                                                                        (
                                                                            _:
                                                                            MiniParse.Tac.Base.ctest 
                                                                              true
                                                                              (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  7
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      2)) ->
                                                                            Prims.Tot
                                                                            Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                        ) ->
                                                                        x2:
                                                                        (
                                                                            _:
                                                                            MiniParse.Tac.Base.ctest 
                                                                              false
                                                                              (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  7
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      2)) ->
                                                                            Prims.Tot
                                                                            Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                        ) ->
                                                                        Prims.Tot
                                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                    )).
                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                          2) <
                                                                    7 /\
                                                                    (forall (any_result:
                                                                        (
                                                                            _:
                                                                            MiniParse.Tac.Base.ctest 
                                                                              true
                                                                              (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  7
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      2)) ->
                                                                            Prims.Tot
                                                                            Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                        )).
                                                                        (fun _ ->
                                                                            Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3
                                                                        ) ==
                                                                        any_result ==>
                                                                        (forall (any_result:
                                                                            (
                                                                                x2:
                                                                                (
                                                                                    _:
                                                                                    MiniParse.Tac.Base.ctest 
                                                                                      false
                                                                                      (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                          7
                                                                                          x2
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              2)) ->
                                                                                    Prims.Tot
                                                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                                ) ->
                                                                                Prims.Tot
                                                                                Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                            )).
                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                  2) <
                                                                            7 /\
                                                                            (forall (x10:
                                                                                MiniParse.Tac.Base.ctest 
                                                                                  false
                                                                                  (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                      7
                                                                                      x2
                                                                                      (MiniParse.Spec.Int.mk_u16 
                                                                                          2))).
                                                                                (*could not prove post-condition*)
                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                      3) <
                                                                                7 /\
                                                                                (forall (return_val:
                                                                                    MiniParse.Spec.Int.bounded_u16 
                                                                                      7).
                                                                                    return_val ==
                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                      3 ==>
                                                                                    (forall (any_result:
                                                                                        Prims.bool).
                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                          7
                                                                                          x2
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              3) ==
                                                                                        any_result ==>
                                                                                        (forall (any_result:
                                                                                            (
                                                                                                x1:
                                                                                                (
                                                                                                    _:
                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                      true
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                          7
                                                                                                          x2
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              3
                                                                                                            
                                                                                                          )
                                                                                                        
                                                                                                      )
                                                                                                     ->
                                                                                                    Prims.Tot
                                                                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                                                ) ->
                                                                                                x2:
                                                                                                (
                                                                                                    _:
                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                      false
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                          7
                                                                                                          x2
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              3
                                                                                                            
                                                                                                          )
                                                                                                        
                                                                                                      )
                                                                                                     ->
                                                                                                    Prims.Tot
                                                                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                                                ) ->
                                                                                                Prims.Tot
                                                                                                Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                                            )).
                                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                            FStar.UInt16.v 
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  3) <
                                                                                            7 /\
                                                                                            (forall (any_result:
                                                                                                (
                                                                                                    _:
                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                      true
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                          7
                                                                                                          x2
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              3
                                                                                                            
                                                                                                          )
                                                                                                        
                                                                                                      )
                                                                                                     ->
                                                                                                    Prims.Tot
                                                                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                                                )).
                                                                                                (fun
                                                                                                    _
                                                                                                    ->
                                                                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4
                                                                                                ) ==
                                                                                                any_result ==>
                                                                                                (forall 
                                                                                                    (any_result:
                                                                                                    (
                                                                                                      
                                                                                                        x2:
                                                                                                        (
                                                                                                          
                                                                                                            _:
                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                              false
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                  7
                                                                                                                  x2
                                                                                                                  (
                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                      3
                                                                                                                    
                                                                                                                  )
                                                                                                                
                                                                                                              )
                                                                                                             ->
                                                                                                            Prims.Tot
                                                                                                            Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                                                        ) ->
                                                                                                        Prims.Tot
                                                                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                                                    ))
                                                                                                  .
                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                    FStar.UInt16.v 
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                          3
                                                                                                        
                                                                                                      )
                                                                                                     <
                                                                                                    7 /\
                                                                                                    (
                                                                                                      forall 
                                                                                                        (x8:
                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                          false
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                              7
                                                                                                              x2
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                  3
                                                                                                                
                                                                                                              )
                                                                                                            
                                                                                                          )
                                                                                                        )
                                                                                                      .
                                                                                                        (*could not prove post-condition*)
                                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                        FStar.UInt16.v 
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              4
                                                                                                            
                                                                                                          )
                                                                                                         <
                                                                                                        7 /\
                                                                                                        (
                                                                                                          forall 
                                                                                                            (return_val:
                                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                                              7
                                                                                                            )
                                                                                                          .
                                                                                                            return_val ==
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              4
                                                                                                             ==>
                                                                                                            (
                                                                                                              forall 
                                                                                                                (any_result:
                                                                                                                Prims.bool)
                                                                                                              .
                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                  7
                                                                                                                  x2
                                                                                                                  (
                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                      4
                                                                                                                    
                                                                                                                  )
                                                                                                                 ==
                                                                                                                any_result ==>
                                                                                                                (
                                                                                                                  forall 
                                                                                                                    (any_result:
                                                                                                                    (
                                                                                                                      
                                                                                                                        x1:
                                                                                                                        (
                                                                                                                          
                                                                                                                            _:
                                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                                              true
                                                                                                                              (
                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                  7
                                                                                                                                  x2
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      4
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                
                                                                                                                              )
                                                                                                                             ->
                                                                                                                            Prims.Tot
                                                                                                                            Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                                                                        ) ->
                                                                                                                        x2:
                                                                                                                        (
                                                                                                                          
                                                                                                                            _:
                                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                                              false
                                                                                                                              (
                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                  7
                                                                                                                                  x2
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      4
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                
                                                                                                                              )
                                                                                                                             ->
                                                                                                                            Prims.Tot
                                                                                                                            Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                                                                        ) ->
                                                                                                                        Prims.Tot
                                                                                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                                                                    ))
                                                                                                                  .
                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                                    FStar.UInt16.v 
                                                                                                                      (
                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                          4
                                                                                                                        
                                                                                                                      )
                                                                                                                     <
                                                                                                                    7 /\
                                                                                                                    (
                                                                                                                      forall 
                                                                                                                        (any_result:
                                                                                                                        (
                                                                                                                          
                                                                                                                            _:
                                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                                              true
                                                                                                                              (
                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                  7
                                                                                                                                  x2
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      4
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                
                                                                                                                              )
                                                                                                                             ->
                                                                                                                            Prims.Tot
                                                                                                                            Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                                                                        ))
                                                                                                                      .
                                                                                                                        (
                                                                                                                          fun
                                                                                                                            _
                                                                                                                            ->
                                                                                                                            Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5
                                                                                                                        ) ==
                                                                                                                        any_result ==>
                                                                                                                        (
                                                                                                                          forall 
                                                                                                                            (any_result:
                                                                                                                            (
                                                                                                                              
                                                                                                                                x2:
                                                                                                                                (
                                                                                                                                  
                                                                                                                                    _:
                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                      false
                                                                                                                                      (
                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                          7
                                                                                                                                          x2
                                                                                                                                          (
                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                              4
                                                                                                                                            
                                                                                                                                          )
                                                                                                                                        
                                                                                                                                      )
                                                                                                                                     ->
                                                                                                                                    Prims.Tot
                                                                                                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                                                                                ) ->
                                                                                                                                Prims.Tot
                                                                                                                                Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                                                                            ))
                                                                                                                          .
                                                                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                                            FStar.UInt16.v 
                                                                                                                              (
                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                  4
                                                                                                                                
                                                                                                                              )
                                                                                                                             <
                                                                                                                            7 /\
                                                                                                                            (
                                                                                                                              forall 
                                                                                                                                (x6:
                                                                                                                                MiniParse.Tac.Base.ctest 
                                                                                                                                  false
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                      7
                                                                                                                                      x2
                                                                                                                                      (
                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                          4
                                                                                                                                        
                                                                                                                                      )
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                )
                                                                                                                              .
                                                                                                                                (*could not prove post-condition*)
                                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                                                FStar.UInt16.v 
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      5
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                 <
                                                                                                                                7 /\
                                                                                                                                (
                                                                                                                                  forall 
                                                                                                                                    (return_val:
                                                                                                                                    MiniParse.Spec.Int.bounded_u16 
                                                                                                                                      7
                                                                                                                                    )
                                                                                                                                  .
                                                                                                                                    return_val ==
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      5
                                                                                                                                     ==>
                                                                                                                                    (
                                                                                                                                      forall 
                                                                                                                                        (any_result:
                                                                                                                                        Prims.bool)
                                                                                                                                      .
                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                          7
                                                                                                                                          x2
                                                                                                                                          (
                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                              5
                                                                                                                                            
                                                                                                                                          )
                                                                                                                                         ==
                                                                                                                                        any_result ==>
                                                                                                                                        (
                                                                                                                                          forall 
                                                                                                                                            (any_result:
                                                                                                                                            (
                                                                                                                                              
                                                                                                                                                x1:
                                                                                                                                                (
  TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
                                                                                                                                                
                                                                                                                                                    _:
                                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                                      true
                                                                                                                                                      (
                                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                          7
                                                                                                                                                          x2
                                                                                                                                                          (
                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                              5
                                                                                                                                                            
                                                                                                                                                          )
                                                                                                                                                        
                                                                                                                                                      )
                                                                                                                                                     ->
                                                                                                                                                    Prims.Tot
                                                                                                                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                                                                                                ) ->
                                                                                                                                                x2:
                                                                                                                                                (
                                                                                                                                                  
                                                                                                                                                    _:
                                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                                      false
                                                                                                                                                      (
                                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                          7
                                                                                                                                                          x2
                                                                                                                                                          (
                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                              5
                                                                                                                                                            
                                                                                                                                                          )
                                                                                                                                                        
                                                                                                                                                      )
                                                                                                                                                     ->
                                                                                                                                                    Prims.Tot
                                                                                                                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                                                                                                ) ->
                                                                                                                                                Prims.Tot
                                                                                                                                                Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                                                                                            ))
                                                                                                                                          .
                                                                                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                                                            FStar.UInt16.v 
                                                                                                                                              (
                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                  5
                                                                                                                                                
                                                                                                                                              )
                                                                                                                                             <
                                                                                                                                            7 /\
                                                                                                                                            (
                                                                                                                                              forall 
                                                                                                                                                (any_result:
                                                                                                                                                (
                                                                                                                                                  
                                                                                                                                                    _:
                                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                                      true
                                                                                                                                                      (
                                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                          7
                                                                                                                                                          x2
                                                                                                                                                          (
                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                              5
                                                                                                                                                            
                                                                                                                                                          )
                                                                                                                                                        
                                                                                                                                                      )
                                                                                                                                                     ->
                                                                                                                                                    Prims.Tot
                                                                                                                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                                                                                                ))
                                                                                                                                              .
                                                                                                                                                (
                                                                                                                                                  fun
                                                                                                                                                    _
                                                                                                                                                    ->
                                                                                                                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6
                                                                                                                                                ) ==
                                                                                                                                                any_result ==>
                                                                                                                                                (
                                                                                                                                                  forall 
                                                                                                                                                    (any_result:
                                                                                                                                                    (
                                                                                                                                                      
                                                                                                                                                        x2:
                                                                                                                                                        (
                                                                                                                                                          
                                                                                                                                                            _:
                                                                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                                                                              false
                                                                                                                                                              (
                                                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                  7
                                                                                                                                                                  x2
                                                                                                                                                                  (
                                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                      5
                                                                                                                                                                    
                                                                                                                                                                  )
                                                                                                                                                                
                                                                                                                                                              )
                                                                                                                                                             ->
                                                                                                                                                            Prims.Tot
                                                                                                                                                            Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                                                                                                        ) ->
                                                                                                                                                        Prims.Tot
                                                                                                                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                                                                                                    ))
                                                                                                                                                  .
                                                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                                                                    FStar.UInt16.v 
                                                                                                                                                      (
                                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                                          5
                                                                                                                                                        
                                                                                                                                                      )
                                                                                                                                                     <
                                                                                                                                                    7
                                                                                                                                                )
                                                                                                                                            )
                                                                                                                                        )
                                                                                                                                    )
                                                                                                                                )
                                                                                                                            )
                                                                                                                        )
                                                                                                                    )
                                                                                                                )
                                                                                                            )
                                                                                                        )
                                                                                                    )
                                                                                                ))))
                                                                                )))))))))))))))))))) /\
    (forall (any_result:
        (_: MiniParse.Spec.Int.bounded_u16 7 ->
            Prims.GTot Bench.MiniParse.Size7.Factor10.Seed00.Goal.test)).
        (fun x2 ->
            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                  x2
                  (MiniParse.Spec.Int.mk_u16 0))
              (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
              (fun _ ->
                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                        x2
                        (MiniParse.Spec.Int.mk_u16 1))
                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                    (fun _ ->
                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                              x2
                              (MiniParse.Spec.Int.mk_u16 2))
                          (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                          (fun _ ->
                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                    x2
                                    (MiniParse.Spec.Int.mk_u16 3))
                                (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                                (fun _ ->
                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 4))
                                      (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                                      (fun _ ->
                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                7
                                                x2
                                                (MiniParse.Spec.Int.mk_u16 5))
                                            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7)
                                      )))))) ==
        any_result ==>
        (forall (any_result:
            (
                g1:
                (_: Bench.MiniParse.Size7.Factor10.Seed00.Goal.test ->
                    Prims.GTot (MiniParse.Spec.Int.bounded_u16 7)) ->
                Prims.Pure
                  (MiniParse.Spec.Base.parser_spec Bench.MiniParse.Size7.Factor10.Seed00.Goal.test)
                  (MiniParse.Spec.Combinators.synth_inverse g1
                      (fun x2 ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x2
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 3))
                                              (fun _ ->
                                                  Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        7
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 4))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              7
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 5))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6
                                                          )
                                                          (fun _ ->
                                                              Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7
                                                          ))))))))
                  (fun _ -> Prims.l_True))).
            (forall (x1: Bench.MiniParse.Size7.Factor10.Seed00.Goal.test).
                (*could not prove post-condition*)
                C7? x1 == true ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 6) < 7 /\
                ~(C7? x1 == true) ==>
                (C6? x1 == true ==>
                  (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                  FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 5) < 7) /\
                (~(C6? x1 == true) ==>
                  C5? x1 == true ==>
                  (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                  FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 4) < 7 /\
                  ~(C5? x1 == true) ==>
                  (C4? x1 == true ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) < 7) /\
                  (~(C4? x1 == true) ==>
                    C3? x1 == true ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 7 /\
                    ~(C3? x1 == true) ==>
                    (C2? x1 == true ==>
                      (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                      FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7) /\
                    (~(C2? x1 == true) ==>
                      C1? x1 == true ==>
                      (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                      FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
                      ~(C1? x1 == true) ==>
                      (forall (b: Bench.MiniParse.Size7.Factor10.Seed00.Goal.test).
                          x1 == b ==>
                          (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                          FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 6) < 7))))) /\
            (forall (any_result:
                (_: Bench.MiniParse.Size7.Factor10.Seed00.Goal.test ->
                    Prims.GTot (MiniParse.Spec.Int.bounded_u16 7))).
                (fun x1 ->
                    (match x1 with
                      | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7 ->
                        MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7
                      | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6 ->
                        MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 7
                      | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5 ->
                        MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 7
                      | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4 ->
                        MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 7
                      | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3 ->
                        MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 7
                      | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2 ->
                        MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 7
                      | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1 ->
                        MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 7
                      | _ -> MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7)
                    <:
                    MiniParse.Spec.Int.bounded_u16 7) ==
                any_result ==>
                MiniParse.Spec.Combinators.synth_inverse (fun x1 ->
                      (match x1 with
                        | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7 ->
                          MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7
                        | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6 ->
                          MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 7
                        | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5 ->
                          MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 7
                        | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4 ->
                          MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 7
                        | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3 ->
                          MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 7
                        | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2 ->
                          MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 7
                        | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1 ->
                          MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 7
                        | _ -> MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7)
                      <:
                      MiniParse.Spec.Int.bounded_u16 7)
                  (fun x2 ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 0))
                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 1))
                              (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 2))
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 3))
                                          (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    7
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 4))
                                                (fun _ ->
                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          7
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 5))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6
                                                      )
                                                      (fun _ ->
                                                          Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7
                                                      )))))))))))
SMT goals (0):

TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> No goals left
TAC>> Checking success for: synth_inverse_forall_bounded_u16_solve
TAC>> Success: synth_inverse_forall_bounded_u16_solve
TAC>> Checking success for: return_squash imm_solve
TAC>> Success: return_squash imm_solve
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> No goals left
Tactic fun _ ->
  MiniParse.Spec.TEnum.gen_enum_parser (FStar.Tactics.Types.Goal)
    (`Bench.MiniParse.Size10.Factor1.Seed00.Goal.test)
  <:
  FStar.Tactics.Effect.TAC Prims.unit ran in 74663 ms (Goal)
TAC>> Applied: implies_intro
TAC>> Unfolded definition: Bench.MiniParse.Size10.Factor1.Seed00.Goal.pBenchMiniParseSize10Factor1Seed00Goal
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
proof-state: State dump @ depth 3 (Some goals left):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Tac.Base.fst(169,4-169,28)
ACTIVE goals (1):
 |- _ : Prims.squash ((forall (x2: MiniParse.Spec.Int.bounded_u16 10).
        (*could not prove post-condition*)
        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10 /\
        (forall (return_val: MiniParse.Spec.Int.bounded_u16 10).
            return_val == MiniParse.Spec.Int.mk_u16 0 ==>
            (forall (any_result: Prims.bool).
                MiniParse.Spec.Int.bounded_u16_eq 10 x2 (MiniParse.Spec.Int.mk_u16 0) == any_result ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10 /\
                (forall (any_result:
                    (
                        _:
                        MiniParse.Tac.Base.ctest true
                          (MiniParse.Spec.Int.bounded_u16_eq 10 x2 (MiniParse.Spec.Int.mk_u16 0)) ->
                        Prims.Tot Bench.MiniParse.Size10.Factor1.Seed00.Goal.test)).
                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1) == any_result ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10 /\
                    (forall (x20:
                        MiniParse.Tac.Base.ctest false
                          (MiniParse.Spec.Int.bounded_u16_eq 10 x2 (MiniParse.Spec.Int.mk_u16 0))).
                        (*could not prove post-condition*)
                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 10).
                            return_val == MiniParse.Spec.Int.mk_u16 1 ==>
                            (forall (any_result: Prims.bool).
                                MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 1) ==
                                any_result ==>
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                                (forall (any_result:
                                    (
                                        _:
                                        MiniParse.Tac.Base.ctest true
                                          (MiniParse.Spec.Int.bounded_u16_eq 10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1)) ->
                                        Prims.Tot Bench.MiniParse.Size10.Factor1.Seed00.Goal.test)).
                                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2) ==
                                    any_result ==>
                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                                    (forall (x18:
                                        MiniParse.Tac.Base.ctest false
                                          (MiniParse.Spec.Int.bounded_u16_eq 10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1))).
                                        (*could not prove post-condition*)
                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 10 /\
                                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 10).
                                            return_val == MiniParse.Spec.Int.mk_u16 2 ==>
                                            (forall (any_result: Prims.bool).
                                                MiniParse.Spec.Int.bounded_u16_eq 10
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 2) ==
                                                any_result ==>
                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 10 /\
                                                (forall (any_result:
                                                    (
                                                        _:
                                                        MiniParse.Tac.Base.ctest true
                                                          (MiniParse.Spec.Int.bounded_u16_eq 10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2)) ->
                                                        Prims.Tot
                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                    )).
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3
                                                    ) ==
                                                    any_result ==>
                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) <
                                                    10 /\
                                                    (forall (x16:
                                                        MiniParse.Tac.Base.ctest false
                                                          (MiniParse.Spec.Int.bounded_u16_eq 10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2))).
                                                        (*could not prove post-condition*)
                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) <
                                                        10 /\
                                                        (forall (return_val:
                                                            MiniParse.Spec.Int.bounded_u16 10).
                                                            return_val ==
                                                            MiniParse.Spec.Int.mk_u16 3 ==>
                                                            (forall (any_result: Prims.bool).
                                                                MiniParse.Spec.Int.bounded_u16_eq 10
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 3) ==
                                                                any_result ==>
                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                      3) <
                                                                10 /\
                                                                (forall (any_result:
                                                                    (
                                                                        _:
                                                                        MiniParse.Tac.Base.ctest true
                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                              10
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  3)) ->
                                                                        Prims.Tot
                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                    )).
                                                                    (fun _ ->
                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4
                                                                    ) ==
                                                                    any_result ==>
                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                          3) <
                                                                    10 /\
                                                                    (forall (x14:
                                                                        MiniParse.Tac.Base.ctest false
                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                              10
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  3))).
                                                                        (*could not prove post-condition*)
                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                              4) <
                                                                        10 /\
                                                                        (forall (return_val:
                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                              10).
                                                                            return_val ==
                                                                            MiniParse.Spec.Int.mk_u16 
                                                                              4 ==>
                                                                            (forall (any_result:
                                                                                Prims.bool).
                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  10
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      4) ==
                                                                                any_result ==>
                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                      4) <
                                                                                10 /\
                                                                                (forall (any_result:
                                                                                    (
                                                                                        _:
                                                                                        MiniParse.Tac.Base.ctest 
                                                                                          true
                                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                              10
                                                                                              x2
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  4)
                                                                                          ) ->
                                                                                        Prims.Tot
                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                    )).
                                                                                    (fun _ ->
                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5
                                                                                    ) ==
                                                                                    any_result ==>
                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                          4) <
                                                                                    10 /\
                                                                                    (forall (x12:
                                                                                        MiniParse.Tac.Base.ctest 
                                                                                          false
                                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                              10
                                                                                              x2
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  4)
                                                                                          )).
                                                                                        (*could not prove post-condition*)
                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                        FStar.UInt16.v 
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              5) <
                                                                                        10 /\
                                                                                        (forall (return_val:
                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                              10).
                                                                                            return_val ==
                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                              5 ==>
                                                                                            (forall (any_result:
                                                                                                Prims.bool)
                                                                                              .
                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                  10
                                                                                                  x2
                                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                                      5
                                                                                                    
                                                                                                  ) ==
                                                                                                any_result ==>
                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                FStar.UInt16.v 
                                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                                      5
                                                                                                    
                                                                                                  ) <
                                                                                                10 /\
                                                                                                (forall 
                                                                                                    (any_result:
                                                                                                    (
                                                                                                      
                                                                                                        _:
                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                          true
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                              10
                                                                                                              x2
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                  5
                                                                                                                
                                                                                                              )
                                                                                                            
                                                                                                          )
                                                                                                         ->
                                                                                                        Prims.Tot
                                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                    ))
                                                                                                  .
                                                                                                    (
                                                                                                      fun
                                                                                                        _
                                                                                                        ->
                                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6
                                                                                                    ) ==
                                                                                                    any_result ==>
                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                    FStar.UInt16.v 
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                          5
                                                                                                        
                                                                                                      )
                                                                                                     <
                                                                                                    10 /\
                                                                                                    (
                                                                                                      forall 
                                                                                                        (x10:
                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                          false
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                              10
                                                                                                              x2
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                  5
                                                                                                                
                                                                                                              )
                                                                                                            
                                                                                                          )
                                                                                                        )
                                                                                                      .
                                                                                                        (*could not prove post-condition*)
                                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                        FStar.UInt16.v 
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              6
                                                                                                            
                                                                                                          )
                                                                                                         <
                                                                                                        10 /\
                                                                                                        (
                                                                                                          forall 
                                                                                                            (return_val:
                                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                                              10
                                                                                                            )
                                                                                                          .
                                                                                                            return_val ==
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              6
                                                                                                             ==>
                                                                                                            (
                                                                                                              forall 
                                                                                                                (any_result:
                                                                                                                Prims.bool)
                                                                                                              .
                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                  10
                                                                                                                  x2
                                                                                                                  (
                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                      6
                                                                                                                    
                                                                                                                  )
                                                                                                                 ==
                                                                                                                any_result ==>
                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                FStar.UInt16.v 
                                                                                                                  (
                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                      6
                                                                                                                    
                                                                                                                  )
                                                                                                                 <
                                                                                                                10 /\
                                                                                                                (
                                                                                                                  forall 
                                                                                                                    (any_result:
                                                                                                                    (
                                                                                                                      
                                                                                                                        _:
                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                          true
                                                                                                                          (
                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                              10
                                                                                                                              x2
                                                                                                                              (
                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                  6
                                                                                                                                
                                                                                                                              )
                                                                                                                            
                                                                                                                          )
                                                                                                                         ->
                                                                                                                        Prims.Tot
                                                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                    ))
                                                                                                                  .
                                                                                                                    (
                                                                                                                      fun
                                                                                                                        _
                                                                                                                        ->
                                                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                                                                                    ) ==
                                                                                                                    any_result ==>
                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                    FStar.UInt16.v 
                                                                                                                      (
                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                          6
                                                                                                                        
                                                                                                                      )
                                                                                                                     <
                                                                                                                    10 /\
                                                                                                                    (
                                                                                                                      forall 
                                                                                                                        (x8:
                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                          false
                                                                                                                          (
                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                              10
                                                                                                                              x2
                                                                                                                              (
                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                  6
                                                                                                                                
                                                                                                                              )
                                                                                                                            
                                                                                                                          )
                                                                                                                        )
                                                                                                                      .
                                                                                                                        (*could not prove post-condition*)
                                                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                        FStar.UInt16.v 
                                                                                                                          (
                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                              7
                                                                                                                            
                                                                                                                          )
                                                                                                                         <
                                                                                                                        10 /\
                                                                                                                        (
                                                                                                                          forall 
                                                                                                                            (return_val:
                                                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                                                              10
                                                                                                                            )
                                                                                                                          .
                                                                                                                            return_val ==
                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                              7
                                                                                                                             ==>
                                                                                                                            (
                                                                                                                              forall 
                                                                                                                                (any_result:
                                                                                                                                Prims.bool)
                                                                                                                              .
                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                  10
                                                                                                                                  x2
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      7
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                 ==
                                                                                                                                any_result ==>
                                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                FStar.UInt16.v 
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      7
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                 <
                                                                                                                                10 /\
                                                                                                                                (
                                                                                                                                  forall 
                                                                                                                                    (any_result:
                                                                                                                                    (
                                                                                                                                      
                                                                                                                                        _:
                                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                                          true
                                                                                                                                          (
                                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                              10
                                                                                                                                              x2
                                                                                                                                              (
                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                  7
                                                                                                                                                
                                                                                                                                              )
                                                                                                                                            
                                                                                                                                          )
                                                                                                                                         ->
                                                                                                                                        Prims.Tot
                                                                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                    ))
                                                                                                                                  .
                                                                                                                                    (
                                                                                                                                      fun
                                                                                                                                        _
                                                                                                                                        ->
                                                                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                                                                                                    ) ==
                                                                                                                                    any_result ==>
                                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                    FStar.UInt16.v 
                                                                                                                                      (
                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                          7
                                                                                                                                        
                                                                                                                                      )
                                                                                                                                     <
                                                                                                                                    10 /\
                                                                                                                                    (
                                                                                                                                      forall 
                                                                                                                                        (x6:
                                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                                          false
                                                                                                                                          (
                                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                              10
                                                                                                                                              x2
                                                                                                                                              (
                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                  7
                                                                                                                                                
                                                                                                                                              )
                                                                                                                                            
                                                                                                                                          )
                                                                                                                                        )
                                                                                                                                      .
                                                                                                                                        (*could not prove post-condition*)
                                                                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                        FStar.UInt16.v 
                                                                                                                                          (
                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                              8
                                                                                                                                            
                                                                                                                                          )
                                                                                                                                         <
                                                                                                                                        10 /\
                                                                                                                                        (
                                                                                                                                          forall 
                                                                                                                                            (return_val:
                                                                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                                                                              10
                                                                                                                                            )
                                                                                                                                          .
                                                                                                                                            return_val ==
                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                              8
                                                                                                                                             ==>
                                                                                                                                            (
                                                                                                                                              forall 
                                                                                                                                                (any_result:
                                                                                                                                                Prims.bool)
                                                                                                                                              .
                                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                  10
                                                                                                                                                  x2
                                                                                                                                                  (
                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                      8
                                                                                                                                                    
                                                                                                                                                  )
                                                                                                                                                 ==
                                                                                                                                                any_result ==>
                                                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                FStar.UInt16.v 
                                                                                                                                                  (
                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                      8
                                                                                                                                                    
                                                                                                                                                  )
                                                                                                                                                 <
                                                                                                                                                10 /\
                                                                                                                                                (
                                                                                                                                                  forall 
                                                                                                                                                    (any_result:
                                                                                                                                                    (
                                                                                                                                                      
                                                                                                                                                        _:
                                                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                                                          true
                                                                                                                                                          (
                                                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                              10
                                                                                                                                                              x2
                                                                                                                                                              (
                                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                  8
                                                                                                                                                                
                                                                                                                                                              )
                                                                                                                                                            
                                                                                                                                                          )
                                                                                                                                                         ->
                                                                                                                                                        Prims.Tot
                                                                                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                                    ))
                                                                                                                                                  .
                                                                                                                                                    (
                                                                                                                                                      fun
                                                                                                                                                        _
                                                                                                                                                        ->
                                                                                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                                                                                                    ) ==
                                                                                                                                                    any_result ==>
                                                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                    FStar.UInt16.v 
                                                                                                                                                      (
                                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                                          8
                                                                                                                                                        
                                                                                                                                                      )
                                                                                                                                                     <
                                                                                                                                                    10
                                                                                                                                                )
                                                                                                                                            )
                                                                                                                                        )
                                                                                                                                    )
                                                                                                                                )
                                                                                                                            )
                                                                                                                        )
                                                                                                                    )
                                                                                                                )
                                                                                                            )
                                                                                                        )
                                                                                                    )
                                                                                                ))))
                                                                                )))))))))))))))))))) /\
    (forall (any_result:
        (_: MiniParse.Spec.Int.bounded_u16 10 ->
            Prims.GTot Bench.MiniParse.Size10.Factor1.Seed00.Goal.test)).
        (fun x2 ->
            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                  x2
                  (MiniParse.Spec.Int.mk_u16 0))
              (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
              (fun _ ->
                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                        x2
                        (MiniParse.Spec.Int.mk_u16 1))
                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                    (fun _ ->
                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                              x2
                              (MiniParse.Spec.Int.mk_u16 2))
                          (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                          (fun _ ->
                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                    x2
                                    (MiniParse.Spec.Int.mk_u16 3))
                                (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                                (fun _ ->
                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 4))
                                      (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                                      (fun _ ->
                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                10
                                                x2
                                                (MiniParse.Spec.Int.mk_u16 5))
                                            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                            (fun _ ->
                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                      10
                                                      x2
                                                      (MiniParse.Spec.Int.mk_u16 6))
                                                  (fun _ ->
                                                      Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7)
                                                  (fun _ ->
                                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                            10
                                                            x2
                                                            (MiniParse.Spec.Int.mk_u16 7))
                                                        (fun _ ->
                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                        )
                                                        (fun _ ->
                                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                  10
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 8))
                                                              (fun _ ->
                                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                              )
                                                              (fun _ ->
                                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                              )))))))))) ==
        any_result ==>
        (forall (any_result:
            (
                f2':
                (x: MiniParse.Spec.Int.bounded_u16 10 ->
                    Prims.Tot
                    (y:
                      Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                        { y ==
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x
                                                  (MiniParse.Spec.Int.mk_u16 3))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x
                                                        (MiniParse.Spec.Int.mk_u16 4))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x
                                                              (MiniParse.Spec.Int.mk_u16 5))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x
                                                                    (MiniParse.Spec.Int.mk_u16 6))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                                )
                                                                (fun _ ->
                                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          10
                                                                          x
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              7))
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                                      )
                                                                      (fun _ ->
                                                                          MiniParse.Tac.Base.mk_if_t 
                                                                            (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                10
                                                                                x
                                                                                (MiniParse.Spec.Int.mk_u16 
                                                                                    8))
                                                                            (fun _ ->
                                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                            )
                                                                            (fun _ ->
                                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                                            ))))))))) })) ->
                g1:
                (_: Bench.MiniParse.Size10.Factor1.Seed00.Goal.test ->
                    Prims.GTot (MiniParse.Spec.Int.bounded_u16 10)) ->
                u1663936:
                u1663977:
                Prims.unit
                  { MiniParse.Spec.Combinators.synth_inverse g1
                      (fun x2 ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x2
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 3))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 4))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 5))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x2
                                                                    (MiniParse.Spec.Int.mk_u16 6))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                                )
                                                                (fun _ ->
                                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          10
                                                                          x2
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              7))
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                                      )
                                                                      (fun _ ->
                                                                          MiniParse.Tac.Base.mk_if_t 
                                                                            (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                10
                                                                                x2
                                                                                (MiniParse.Spec.Int.mk_u16 
                                                                                    8))
                                                                            (fun _ ->
                                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                            )
                                                                            (fun _ ->
                                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                                            )))))))))) } ->
                Prims.Tot
                (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                            10)
                        (fun x2 ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 0))
                              (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 1))
                                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 2))
                                          (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 3))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 4))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 5))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6
                                                            )
                                                            (fun _ ->
                                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                      10
                                                                      x2
                                                                      (MiniParse.Spec.Int.mk_u16 6))
                                                                  (fun _ ->
                                                                      Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                                  )
                                                                  (fun _ ->
                                                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                            10
                                                                            x2
                                                                            (MiniParse.Spec.Int.mk_u16 
                                                                                7))
                                                                        (fun _ ->
                                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                                        )
                                                                        (fun _ ->
                                                                            MiniParse.Tac.Base.mk_if_t 
                                                                              (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  10
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      8))
                                                                              (fun _ ->
                                                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                              )
                                                                              (fun _ ->
                                                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                                              ))))))))))
                        g1)))).
            (forall (x0: MiniParse.Spec.Int.bounded_u16 10).
                (*could not prove post-condition*)
                (forall (x2: MiniParse.Spec.Int.bounded_u16 10).
                    (*could not prove post-condition*)
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10 /\
                    (forall (return_val: MiniParse.Spec.Int.bounded_u16 10).
                        return_val == MiniParse.Spec.Int.mk_u16 0 ==>
                        (forall (any_result: Prims.bool).
                            MiniParse.Spec.Int.bounded_u16_eq 10 x2 (MiniParse.Spec.Int.mk_u16 0) ==
                            any_result ==>
                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10 /\
                            (forall (any_result:
                                (
                                    _:
                                    MiniParse.Tac.Base.ctest true
                                      (MiniParse.Spec.Int.bounded_u16_eq 10
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 0)) ->
                                    Prims.Tot Bench.MiniParse.Size10.Factor1.Seed00.Goal.test)).
                                (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1) ==
                                any_result ==>
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10 /\
                                (forall (x20:
                                    MiniParse.Tac.Base.ctest false
                                      (MiniParse.Spec.Int.bounded_u16_eq 10
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 0))).
                                    (*could not prove post-condition*)
                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                                    (forall (return_val: MiniParse.Spec.Int.bounded_u16 10).
                                        return_val == MiniParse.Spec.Int.mk_u16 1 ==>
                                        (forall (any_result: Prims.bool).
                                            MiniParse.Spec.Int.bounded_u16_eq 10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1) ==
                                            any_result ==>
                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                                            (forall (any_result:
                                                (
                                                    _:
                                                    MiniParse.Tac.Base.ctest true
                                                      (MiniParse.Spec.Int.bounded_u16_eq 10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 1)) ->
                                                    Prims.Tot
                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.test))
                                              .
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2) ==
                                                any_result ==>
                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                                                (forall (x18:
                                                    MiniParse.Tac.Base.ctest false
                                                      (MiniParse.Spec.Int.bounded_u16_eq 10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 1))).
                                                    (*could not prove post-condition*)
                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) <
                                                    10 /\
                                                    (forall (return_val:
                                                        MiniParse.Spec.Int.bounded_u16 10).
                                                        return_val == MiniParse.Spec.Int.mk_u16 2 ==>
                                                        (forall (any_result: Prims.bool).
                                                            MiniParse.Spec.Int.bounded_u16_eq 10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2) ==
                                                            any_result ==>
                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                  2) <
                                                            10 /\
                                                            (forall (any_result:
                                                                (
                                                                    _:
                                                                    MiniParse.Tac.Base.ctest true
                                                                      (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          10
                                                                          x2
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              2)) ->
                                                                    Prims.Tot
                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                )).
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3
                                                                ) ==
                                                                any_result ==>
                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                      2) <
                                                                10 /\
                                                                (forall (x16:
                                                                    MiniParse.Tac.Base.ctest false
                                                                      (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          10
                                                                          x2
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              2))).
                                                                    (*could not prove post-condition*)
                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                          3) <
                                                                    10 /\
                                                                    (forall (return_val:
                                                                        MiniParse.Spec.Int.bounded_u16 
                                                                          10).
                                                                        return_val ==
                                                                        MiniParse.Spec.Int.mk_u16 3 ==>
                                                                        (forall (any_result:
                                                                            Prims.bool).
                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                              10
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  3) ==
                                                                            any_result ==>
                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                  3) <
                                                                            10 /\
                                                                            (forall (any_result:
                                                                                (
                                                                                    _:
                                                                                    MiniParse.Tac.Base.ctest 
                                                                                      true
                                                                                      (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                          10
                                                                                          x2
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              3)) ->
                                                                                    Prims.Tot
                                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                )).
                                                                                (fun _ ->
                                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4
                                                                                ) ==
                                                                                any_result ==>
                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                      3) <
                                                                                10 /\
                                                                                (forall (x14:
                                                                                    MiniParse.Tac.Base.ctest 
                                                                                      false
                                                                                      (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                          10
                                                                                          x2
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              3))).
                                                                                    (*could not prove post-condition*)
                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                          4) <
                                                                                    10 /\
                                                                                    (forall (return_val:
                                                                                        MiniParse.Spec.Int.bounded_u16 
                                                                                          10).
                                                                                        return_val ==
                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                          4 ==>
                                                                                        (forall (any_result:
                                                                                            Prims.bool)
                                                                                          .
                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                              10
                                                                                              x2
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  4) ==
                                                                                            any_result ==>
                                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                            FStar.UInt16.v 
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  4) <
                                                                                            10 /\
                                                                                            (forall (any_result:
                                                                                                (
                                                                                                    _:
                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                      true
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                          10
                                                                                                          x2
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              4
                                                                                                            
                                                                                                          )
                                                                                                        
                                                                                                      )
                                                                                                     ->
                                                                                                    Prims.Tot
                                                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                )).
                                                                                                (fun
                                                                                                    _
                                                                                                    ->
                                                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5
                                                                                                ) ==
                                                                                                any_result ==>
                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                FStar.UInt16.v 
                                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                                      4
                                                                                                    
                                                                                                  ) <
                                                                                                10 /\
                                                                                                (forall 
                                                                                                    (x12:
                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                      false
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                          10
                                                                                                          x2
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              4
                                                                                                            
                                                                                                          )
                                                                                                        
                                                                                                      )
                                                                                                    )
                                                                                                  .
                                                                                                    (*could not prove post-condition*)
                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                    FStar.UInt16.v 
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                          5
                                                                                                        
                                                                                                      )
                                                                                                     <
                                                                                                    10 /\
                                                                                                    (
                                                                                                      forall 
                                                                                                        (return_val:
                                                                                                        MiniParse.Spec.Int.bounded_u16 
                                                                                                          10
                                                                                                        )
                                                                                                      .
                                                                                                        return_val ==
                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                          5
                                                                                                         ==>
                                                                                                        (
                                                                                                          forall 
                                                                                                            (any_result:
                                                                                                            Prims.bool)
                                                                                                          .
                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                              10
                                                                                                              x2
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                  5
                                                                                                                
                                                                                                              )
                                                                                                             ==
                                                                                                            any_result ==>
                                                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                            FStar.UInt16.v 
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                  5
                                                                                                                
                                                                                                              )
                                                                                                             <
                                                                                                            10 /\
                                                                                                            (
                                                                                                              forall 
                                                                                                                (any_result:
                                                                                                                (
                                                                                                                  
                                                                                                                    _:
                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                      true
                                                                                                                      (
                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                          10
                                                                                                                          x2
                                                                                                                          (
                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                              5
                                                                                                                            
                                                                                                                          )
                                                                                                                        
                                                                                                                      )
                                                                                                                     ->
                                                                                                                    Prims.Tot
                                                                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                ))
                                                                                                              .
                                                                                                                (
                                                                                                                  fun
                                                                                                                    _
                                                                                                                    ->
                                                                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6
                                                                                                                ) ==
                                                                                                                any_result ==>
                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                FStar.UInt16.v 
                                                                                                                  (
                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                      5
                                                                                                                    
                                                                                                                  )
                                                                                                                 <
                                                                                                                10 /\
                                                                                                                (
                                                                                                                  forall 
                                                                                                                    (x10:
                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                      false
                                                                                                                      (
                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                          10
                                                                                                                          x2
                                                                                                                          (
                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                              5
                                                                                                                            
                                                                                                                          )
                                                                                                                        
                                                                                                                      )
                                                                                                                    )
                                                                                                                  .
                                                                                                                    (*could not prove post-condition*)
                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                    FStar.UInt16.v 
                                                                                                                      (
                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                          6
                                                                                                                        
                                                                                                                      )
                                                                                                                     <
                                                                                                                    10 /\
                                                                                                                    (
                                                                                                                      forall 
                                                                                                                        (return_val:
                                                                                                                        MiniParse.Spec.Int.bounded_u16 
                                                                                                                          10
                                                                                                                        )
                                                                                                                      .
                                                                                                                        return_val ==
                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                          6
                                                                                                                         ==>
                                                                                                                        (
                                                                                                                          forall 
                                                                                                                            (any_result:
                                                                                                                            Prims.bool)
                                                                                                                          .
                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                              10
                                                                                                                              x2
                                                                                                                              (
                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                  6
                                                                                                                                
                                                                                                                              )
                                                                                                                             ==
                                                                                                                            any_result ==>
                                                                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                            FStar.UInt16.v 
                                                                                                                              (
                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                  6
                                                                                                                                
                                                                                                                              )
                                                                                                                             <
                                                                                                                            10 /\
                                                                                                                            (
                                                                                                                              forall 
                                                                                                                                (any_result:
                                                                                                                                (
                                                                                                                                  
                                                                                                                                    _:
                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                      true
                                                                                                                                      (
                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                          10
                                                                                                                                          x2
                                                                                                                                          (
                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                              6
                                                                                                                                            
                                                                                                                                          )
                                                                                                                                        
                                                                                                                                      )
                                                                                                                                     ->
                                                                                                                                    Prims.Tot
                                                                                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                ))
                                                                                                                              .
                                                                                                                                (
                                                                                                                                  fun
                                                                                                                                    _
                                                                                                                                    ->
                                                                                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                                                                                                ) ==
                                                                                                                                any_result ==>
                                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                FStar.UInt16.v 
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      6
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                 <
                                                                                                                                10 /\
                                                                                                                                (
                                                                                                                                  forall 
                                                                                                                                    (x8:
                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                      false
                                                                                                                                      (
                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                          10
                                                                                                                                          x2
                                                                                                                                          (
                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                              6
                                                                                                                                            
                                                                                                                                          )
                                                                                                                                        
                                                                                                                                      )
                                                                                                                                    )
                                                                                                                                  .
                                                                                                                                    (*could not prove post-condition*)
                                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                    FStar.UInt16.v 
                                                                                                                                      (
                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                          7
                                                                                                                                        
                                                                                                                                      )
                                                                                                                                     <
                                                                                                                                    10 /\
                                                                                                                                    (
                                                                                                                                      forall 
                                                                                                                                        (return_val:
                                                                                                                                        MiniParse.Spec.Int.bounded_u16 
                                                                                                                                          10
                                                                                                                                        )
                                                                                                                                      .
                                                                                                                                        return_val ==
                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                          7
                                                                                                                                         ==>
                                                                                                                                        (
                                                                                                                                          forall 
                                                                                                                                            (any_result:
                                                                                                                                            Prims.bool)
                                                                                                                                          .
                                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                              10
                                                                                                                                              x2
                                                                                                                                              (
                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                  7
                                                                                                                                                
                                                                                                                                              )
                                                                                                                                             ==
                                                                                                                                            any_result ==>
                                                                                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                            FStar.UInt16.v 
                                                                                                                                              (
                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                  7
                                                                                                                                                
                                                                                                                                              )
                                                                                                                                             <
                                                                                                                                            10 /\
                                                                                                                                            (
                                                                                                                                              forall 
                                                                                                                                                (any_result:
                                                                                                                                                (
                                                                                                                                                  
                                                                                                                                                    _:
                                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                                      true
                                                                                                                                                      (
                                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                          10
                                                                                                                                                          x2
                                                                                                                                                          (
                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                              7
                                                                                                                                                            
                                                                                                                                                          )
                                                                                                                                                        
                                                                                                                                                      )
                                                                                                                                                     ->
                                                                                                                                                    Prims.Tot
                                                                                                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                                ))
                                                                                                                                              .
                                                                                                                                                (
                                                                                                                                                  fun
                                                                                                                                                    _
                                                                                                                                                    ->
                                                                                                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                                                                                                                ) ==
                                                                                                                                                any_result ==>
                                                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                FStar.UInt16.v 
                                                                                                                                                  (
                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                      7
                                                                                                                                                    
                                                                                                                                                  )
                                                                                                                                                 <
                                                                                                                                                10 /\
                                                                                                                                                (
                                                                                                                                                  forall 
                                                                                                                                                    (x6:
                                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                                      false
                                                                                                                                                      (
                                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                          10
                                                                                                                                                          x2
                                                                                                                                                          (
                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                              7
                                                                                                                                                            
                                                                                                                                                          )
                                                                                                                                                        
                                                                                                                                                      )
                                                                                                                                                    )
                                                                                                                                                  .
                                                                                                                                                    (*could not prove post-condition*)
                                                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                    FStar.UInt16.v 
                                                                                                                                                      (
                                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                                          8
                                                                                                                                                        
                                                                                                                                                      )
                                                                                                                                                     <
                                                                                                                                                    10 /\
                                                                                                                                                    (
                                                                                                                                                      forall 
                                                                                                                                                        (return_val:
                                                                                                                                                        MiniParse.Spec.Int.bounded_u16 
                                                                                                                                                          10
                                                                                                                                                        )
                                                                                                                                                      .
                                                                                                                                                        return_val ==
                                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                                          8
                                                                                                                                                         ==>
                                                                                                                                                        (
                                                                                                                                                          forall 
                                                                                                                                                            (any_result:
                                                                                                                                                            Prims.bool)
                                                                                                                                                          .
                                                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                              10
                                                                                                                                                              x2
                                                                                                                                                              (
                                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                  8
                                                                                                                                                                
                                                                                                                                                              )
                                                                                                                                                             ==
                                                                                                                                                            any_result ==>
                                                                                                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                            FStar.UInt16.v 
                                                                                                                                                              (
                                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                  8
                                                                                                                                                                
                                                                                                                                                              )
                                                                                                                                                             <
                                                                                                                                                            10 /\
                                                                                                                                                            (
                                                                                                                                                              forall 
                                                                                                                                                                (any_result:
                                                                                                                                                                (
                                                                                                                                                                  
                                                                                                                                                                    _:
                                                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                                                      true
                                                                                                                                                                      (
                                                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                          10
                                                                                                                                                                          x2
                                                                                                                                                                          (
                                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                              8
                                                                                                                                                                            
                                                                                                                                                                          )
                                                                                                                                                                        
                                                                                                                                                                      )
                                                                                                                                                                     ->
                                                                                                                                                                    Prims.Tot
                                                                                                                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                                                ))
                                                                                                                                                              .
                                                                                                                                                                (
                                                                                                                                                                  fun
                                                                                                                                                                    _
                                                                                                                                                                    ->
                                                                                                                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                                                                                                                ) ==
                                                                                                                                                                any_result ==>
                                                                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                                FStar.UInt16.v 
                                                                                                                                                                  (
                                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                      8
                                                                                                                                                                    
                                                                                                                                                                  )
                                                                                                                                                                 <
                                                                                                                                                                10
                                                                                                                                                            )
                                                                                                                                                        )
                                                                                                                                                    )
                                                                                                                                                )
                                                                                                                                            )
                                                                                                                                        )
                                                                                                                                    )
                                                                                                                                )
                                                                                                                            )
                                                                                                                        )
                                                                                                                    )
                                                                                                                )
                                                                                                            )
                                                                                                        )
                                                                                                    )
                                                                                                ))))
                                                                                ))))))))))))))))) /\
                (forall (any_result:
                    (x2: MiniParse.Spec.Int.bounded_u16 10 ->
                        Prims.Tot Bench.MiniParse.Size10.Factor1.Seed00.Goal.test))
                    (any_result: Bench.MiniParse.Size10.Factor1.Seed00.Goal.test).
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                          x0
                          (MiniParse.Spec.Int.mk_u16 0))
                      (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x0
                                (MiniParse.Spec.Int.mk_u16 1))
                            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x0
                                      (MiniParse.Spec.Int.mk_u16 2))
                                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x0
                                            (MiniParse.Spec.Int.mk_u16 3))
                                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x0
                                                  (MiniParse.Spec.Int.mk_u16 4))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x0
                                                        (MiniParse.Spec.Int.mk_u16 5))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x0
                                                              (MiniParse.Spec.Int.mk_u16 6))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x0
                                                                    (MiniParse.Spec.Int.mk_u16 7))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                                )
                                                                (fun _ ->
                                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          10
                                                                          x0
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              8))
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                      )
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                                      ))))))))) ==
                    any_result ==>
                    (*Subtyping check failed; expected type y:
Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
  { y ==
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
          x0
          (MiniParse.Spec.Int.mk_u16 0))
      (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x0
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x0
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x0
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x0
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x0
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x0
                                              (MiniParse.Spec.Int.mk_u16 6))
                                          (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x0
                                                    (MiniParse.Spec.Int.mk_u16 7))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x0
                                                          (MiniParse.Spec.Int.mk_u16 8))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                      )
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                      ))))))))) }; got type Bench.MiniParse.Size10.Factor1.Seed00.Goal.test*)
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                          x0
                          (MiniParse.Spec.Int.mk_u16 0))
                      (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x0
                                (MiniParse.Spec.Int.mk_u16 1))
                            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x0
                                      (MiniParse.Spec.Int.mk_u16 2))
                                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x0
                                            (MiniParse.Spec.Int.mk_u16 3))
                                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x0
                                                  (MiniParse.Spec.Int.mk_u16 4))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x0
                                                        (MiniParse.Spec.Int.mk_u16 5))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x0
                                                              (MiniParse.Spec.Int.mk_u16 6))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x0
                                                                    (MiniParse.Spec.Int.mk_u16 7))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                                )
                                                                (fun _ ->
                                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          10
                                                                          x0
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              8))
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                      )
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                                      ))))))))) ==
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                          x0
                          (MiniParse.Spec.Int.mk_u16 0))
                      (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x0
                                (MiniParse.Spec.Int.mk_u16 1))
                            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x0
                                      (MiniParse.Spec.Int.mk_u16 2))
                                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x0
                                            (MiniParse.Spec.Int.mk_u16 3))
                                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x0
                                                  (MiniParse.Spec.Int.mk_u16 4))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x0
                                                        (MiniParse.Spec.Int.mk_u16 5))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x0
                                                              (MiniParse.Spec.Int.mk_u16 6))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x0
                                                                    (MiniParse.Spec.Int.mk_u16 7))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                                )
                                                                (fun _ ->
                                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          10
                                                                          x0
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              8))
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                      )
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                                      ))))))))))) /\
            (forall (any_result:
                (x: MiniParse.Spec.Int.bounded_u16 10 ->
                    Prims.Tot
                    (y:
                      Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                        { y ==
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x
                                                  (MiniParse.Spec.Int.mk_u16 3))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x
                                                        (MiniParse.Spec.Int.mk_u16 4))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x
                                                              (MiniParse.Spec.Int.mk_u16 5))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x
                                                                    (MiniParse.Spec.Int.mk_u16 6))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                                )
                                                                (fun _ ->
                                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          10
                                                                          x
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              7))
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                                      )
                                                                      (fun _ ->
                                                                          MiniParse.Tac.Base.mk_if_t 
                                                                            (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                10
                                                                                x
                                                                                (MiniParse.Spec.Int.mk_u16 
 TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
                                                                                   8))
                                                                            (fun _ ->
                                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                            )
                                                                            (fun _ ->
                                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                                            ))))))))) }))).
                (fun x0 ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                          x0
                          (MiniParse.Spec.Int.mk_u16 0))
                      (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x0
                                (MiniParse.Spec.Int.mk_u16 1))
                            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x0
                                      (MiniParse.Spec.Int.mk_u16 2))
                                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x0
                                            (MiniParse.Spec.Int.mk_u16 3))
                                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x0
                                                  (MiniParse.Spec.Int.mk_u16 4))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x0
                                                        (MiniParse.Spec.Int.mk_u16 5))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x0
                                                              (MiniParse.Spec.Int.mk_u16 6))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x0
                                                                    (MiniParse.Spec.Int.mk_u16 7))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                                )
                                                                (fun _ ->
                                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          10
                                                                          x0
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              8))
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                      )
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                                      )))))))))) ==
                any_result ==>
                (forall (any_result:
                    (
                        g1:
                        (_: Bench.MiniParse.Size10.Factor1.Seed00.Goal.test ->
                            Prims.GTot (MiniParse.Spec.Int.bounded_u16 10)) ->
                        u1664151:
                        u1664172:
                        Prims.unit
                          { MiniParse.Spec.Combinators.synth_inverse g1
                              (fun x2 ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 0))
                                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1))
                                          (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 2))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 3))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 4))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5
                                                            )
                                                            (fun _ ->
                                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                      10
                                                                      x2
                                                                      (MiniParse.Spec.Int.mk_u16 5))
                                                                  (fun _ ->
                                                                      Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6
                                                                  )
                                                                  (fun _ ->
                                                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                            10
                                                                            x2
                                                                            (MiniParse.Spec.Int.mk_u16 
                                                                                6))
                                                                        (fun _ ->
                                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                                        )
                                                                        (fun _ ->
                                                                            MiniParse.Tac.Base.mk_if_t 
                                                                              (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  10
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      7))
                                                                              (fun _ ->
                                                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                                              )
                                                                              (fun _ ->
                                                                                  MiniParse.Tac.Base.mk_if_t 
                                                                                    (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                        10
                                                                                        x2
                                                                                        (MiniParse.Spec.Int.mk_u16 
                                                                                            8))
                                                                                    (fun _ ->
                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                                    )
                                                                                    (fun _ ->
                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                                                    )))))))))) } ->
                        Prims.Tot
                        (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                                    10)
                                (fun x2 ->
                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 0))
                                      (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
                                      (fun _ ->
                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                10
                                                x2
                                                (MiniParse.Spec.Int.mk_u16 1))
                                            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                                            (fun _ ->
                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                      10
                                                      x2
                                                      (MiniParse.Spec.Int.mk_u16 2))
                                                  (fun _ ->
                                                      Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                                                  (fun _ ->
                                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                            10
                                                            x2
                                                            (MiniParse.Spec.Int.mk_u16 3))
                                                        (fun _ ->
                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4
                                                        )
                                                        (fun _ ->
                                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                  10
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 4))
                                                              (fun _ ->
                                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5
                                                              )
                                                              (fun _ ->
                                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                        10
                                                                        x2
                                                                        (MiniParse.Spec.Int.mk_u16 5
                                                                        ))
                                                                    (fun _ ->
                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6
                                                                    )
                                                                    (fun _ ->
                                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                              10
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  6))
                                                                          (fun _ ->
                                                                              Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                                          )
                                                                          (fun _ ->
                                                                              MiniParse.Tac.Base.mk_if_t 
                                                                                (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                    10
                                                                                    x2
                                                                                    (MiniParse.Spec.Int.mk_u16 
                                                                                        7))
                                                                                (fun _ ->
                                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                                                )
                                                                                (fun _ ->
                                                                                    MiniParse.Tac.Base.mk_if_t 
                                                                                      (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                          10
                                                                                          x2
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              8))
                                                                                      (fun _ ->
                                                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                                      )
                                                                                      (fun _ ->
                                                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                                                      ))))))))))
                                g1)))).
                    (forall (x1: Bench.MiniParse.Size10.Factor1.Seed00.Goal.test).
                        (*could not prove post-condition*)
                        C10? x1 == true ==>
                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 9) < 10 /\
                        ~(C10? x1 == true) ==>
                        (C9? x1 == true ==>
                          (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                          FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 8) < 10) /\
                        (~(C9? x1 == true) ==>
                          C8? x1 == true ==>
                          (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                          FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 7) < 10 /\
                          ~(C8? x1 == true) ==>
                          (C7? x1 == true ==>
                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 6) < 10) /\
                          (~(C7? x1 == true) ==>
                            C6? x1 == true ==>
                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 5) < 10 /\
                            ~(C6? x1 == true) ==>
                            (C5? x1 == true ==>
                              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 4) < 10) /\
                            (~(C5? x1 == true) ==>
                              C4? x1 == true ==>
                              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) < 10 /\
                              ~(C4? x1 == true) ==>
                              (C3? x1 == true ==>
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 10) /\
                              (~(C3? x1 == true) ==>
                                C2? x1 == true ==>
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                                ~(C2? x1 == true) ==>
                                (C1? x1 == true ==>
                                  (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                  FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10) /\
                                (~(C1? x1 == true) ==>
                                  (forall (b: Bench.MiniParse.Size10.Factor1.Seed00.Goal.test).
                                      x1 == b ==>
                                      (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                      FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 9) < 10))))))) /\
                    (forall (any_result:
                        (_: Bench.MiniParse.Size10.Factor1.Seed00.Goal.test ->
                            Prims.GTot (MiniParse.Spec.Int.bounded_u16 10))).
                        (fun x1 ->
                            (match x1 with
                              | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10 ->
                                MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10
                              | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9 ->
                                MiniParse.Spec.Int.mk_u16 8 <: MiniParse.Spec.Int.bounded_u16 10
                              | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8 ->
                                MiniParse.Spec.Int.mk_u16 7 <: MiniParse.Spec.Int.bounded_u16 10
                              | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7 ->
                                MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 10
                              | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6 ->
                                MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 10
                              | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5 ->
                                MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 10
                              | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4 ->
                                MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 10
                              | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3 ->
                                MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 10
                              | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2 ->
                                MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 10
                              | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1 ->
                                MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 10
                              | _ ->
                                MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10)
                            <:
                            MiniParse.Spec.Int.bounded_u16 10) ==
                        any_result ==>
                        (forall (any_result:
                            (
                                u1664199:
                                u1664221:
                                Prims.unit
                                  { MiniParse.Spec.Combinators.synth_inverse (fun x1 ->
                                          (match x1 with
                                            | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10 ->
                                              MiniParse.Spec.Int.mk_u16 9
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 10
                                            | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9 ->
                                              MiniParse.Spec.Int.mk_u16 8
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 10
                                            | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8 ->
                                              MiniParse.Spec.Int.mk_u16 7
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 10
                                            | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7 ->
                                              MiniParse.Spec.Int.mk_u16 6
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 10
                                            | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6 ->
                                              MiniParse.Spec.Int.mk_u16 5
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 10
                                            | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5 ->
                                              MiniParse.Spec.Int.mk_u16 4
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 10
                                            | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4 ->
                                              MiniParse.Spec.Int.mk_u16 3
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 10
                                            | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3 ->
                                              MiniParse.Spec.Int.mk_u16 2
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 10
                                            | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2 ->
                                              MiniParse.Spec.Int.mk_u16 1
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 10
                                            | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1 ->
                                              MiniParse.Spec.Int.mk_u16 0
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 10
                                            | _ ->
                                              MiniParse.Spec.Int.mk_u16 9
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 10)
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 10)
                                      (fun x2 ->
                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                10
                                                x2
                                                (MiniParse.Spec.Int.mk_u16 0))
                                            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
                                            (fun _ ->
                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                      10
                                                      x2
                                                      (MiniParse.Spec.Int.mk_u16 1))
                                                  (fun _ ->
                                                      Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                                                  (fun _ ->
                                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                            10
                                                            x2
                                                            (MiniParse.Spec.Int.mk_u16 2))
                                                        (fun _ ->
                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3
                                                        )
                                                        (fun _ ->
                                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                  10
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 3))
                                                              (fun _ ->
                                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4
                                                              )
                                                              (fun _ ->
                                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                        10
                                                                        x2
                                                                        (MiniParse.Spec.Int.mk_u16 4
                                                                        ))
                                                                    (fun _ ->
                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5
                                                                    )
                                                                    (fun _ ->
                                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                              10
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  5))
                                                                          (fun _ ->
                                                                              Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6
                                                                          )
                                                                          (fun _ ->
                                                                              MiniParse.Tac.Base.mk_if_t 
                                                                                (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                    10
                                                                                    x2
                                                                                    (MiniParse.Spec.Int.mk_u16 
                                                                                        6))
                                                                                (fun _ ->
                                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                                                )
                                                                                (fun _ ->
                                                                                    MiniParse.Tac.Base.mk_if_t 
                                                                                      (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                          10
                                                                                          x2
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              7))
                                                                                      (fun _ ->
                                                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                                                      )
                                                                                      (fun _ ->
                                                                                          MiniParse.Tac.Base.mk_if_t 
                                                                                            (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                10
                                                                                                x2
                                                                                                (MiniParse.Spec.Int.mk_u16 
                                                                                                    8
                                                                                                  ))
                                                                                            (fun
                                                                                                _
                                                                                                ->
                                                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                                            )
                                                                                            (fun
                                                                                                _
                                                                                                ->
                                                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                                                            ))))))))
                                            )) } ->
                                Prims.Tot
                                (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth 
                                        (MiniParse.Spec.Int.parse_bounded_u16 10)
                                        (fun x2 ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 0))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 1))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x2
                                                                    (MiniParse.Spec.Int.mk_u16 3))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4
                                                                )
                                                                (fun _ ->
                                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          10
                                                                          x2
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              4))
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5
                                                                      )
                                                                      (fun _ ->
                                                                          MiniParse.Tac.Base.mk_if_t 
                                                                            (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                10
                                                                                x2
                                                                                (MiniParse.Spec.Int.mk_u16 
                                                                                    5))
                                                                            (fun _ ->
                                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6
                                                                            )
                                                                            (fun _ ->
                                                                                MiniParse.Tac.Base.mk_if_t 
                                                                                  (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                      10
                                                                                      x2
                                                                                      (MiniParse.Spec.Int.mk_u16 
                                                                                          6))
                                                                                  (fun _ ->
                                                                                      Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                                                  )
                                                                                  (fun _ ->
                                                                                      MiniParse.Tac.Base.mk_if_t 
                                                                                        (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                            10
                                                                                            x2
                                                                                            (MiniParse.Spec.Int.mk_u16 
                                                                                                7))
                                                                                        (fun _ ->
                                                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                                                        )
                                                                                        (fun _ ->
                                                                                            MiniParse.Tac.Base.mk_if_t 
                                                                                              (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                  10
                                                                                                  x2
                                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                                      8
                                                                                                    
                                                                                                  ))
                                                                                              (fun
                                                                                                  _
                                                                                                  ->
                                                                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                                              )
                                                                                              (fun
                                                                                                  _
                                                                                                  ->
                                                                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                                                              ))))))
                                                          ))))
                                        (fun x1 ->
                                            (match x1 with
                                              | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10 ->
                                                MiniParse.Spec.Int.mk_u16 9
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 10
                                              | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9 ->
                                                MiniParse.Spec.Int.mk_u16 8
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 10
                                              | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8 ->
                                                MiniParse.Spec.Int.mk_u16 7
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 10
                                              | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7 ->
                                                MiniParse.Spec.Int.mk_u16 6
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 10
                                              | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6 ->
                                                MiniParse.Spec.Int.mk_u16 5
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 10
                                              | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5 ->
                                                MiniParse.Spec.Int.mk_u16 4
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 10
                                              | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4 ->
                                                MiniParse.Spec.Int.mk_u16 3
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 10
                                              | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3 ->
                                                MiniParse.Spec.Int.mk_u16 2
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 10
                                              | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2 ->
                                                MiniParse.Spec.Int.mk_u16 1
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 10
                                              | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1 ->
                                                MiniParse.Spec.Int.mk_u16 0
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 10
                                              | _ ->
                                                MiniParse.Spec.Int.mk_u16 9
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 10)
                                            <:
                                            MiniParse.Spec.Int.bounded_u16 10))))).
                            (*Subtyping check failed; expected type u1656764:
Prims.unit
  { MiniParse.Spec.Combinators.synth_inverse (fun x1 ->
          (match x1 with
            | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10 ->
              MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10
            | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9 ->
              MiniParse.Spec.Int.mk_u16 8 <: MiniParse.Spec.Int.bounded_u16 10
            | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8 ->
              MiniParse.Spec.Int.mk_u16 7 <: MiniParse.Spec.Int.bounded_u16 10
            | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7 ->
              MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 10
            | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6 ->
              MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 10
            | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5 ->
              MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 10
            | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4 ->
              MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 10
            | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3 ->
              MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 10
            | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2 ->
              MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 10
            | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1 ->
              MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 10
            | _ -> MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10)
          <:
          MiniParse.Spec.Int.bounded_u16 10)
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 6))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 7))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 8))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                            )
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                            )))))))))) }; got type Prims.unit*)
                            Prims.auto_squash (MiniParse.Spec.Combinators.synth_inverse (fun x1 ->
                                      (match x1 with
                                        | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10 ->
                                          MiniParse.Spec.Int.mk_u16 9
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 10
                                        | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9 ->
                                          MiniParse.Spec.Int.mk_u16 8
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 10
                                        | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8 ->
                                          MiniParse.Spec.Int.mk_u16 7
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 10
                                        | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7 ->
                                          MiniParse.Spec.Int.mk_u16 6
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 10
                                        | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6 ->
                                          MiniParse.Spec.Int.mk_u16 5
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 10
                                        | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5 ->
                                          MiniParse.Spec.Int.mk_u16 4
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 10
                                        | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4 ->
                                          MiniParse.Spec.Int.mk_u16 3
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 10
                                        | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3 ->
                                          MiniParse.Spec.Int.mk_u16 2
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 10
                                        | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2 ->
                                          MiniParse.Spec.Int.mk_u16 1
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 10
                                        | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1 ->
                                          MiniParse.Spec.Int.mk_u16 0
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 10
                                        | _ ->
                                          MiniParse.Spec.Int.mk_u16 9
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 10)
                                      <:
                                      MiniParse.Spec.Int.bounded_u16 10)
                                  (fun x2 ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 0))
                                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 1))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 2))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 3))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x2
                                                                    (MiniParse.Spec.Int.mk_u16 4))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5
                                                                )
                                                                (fun _ ->
                                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          10
                                                                          x2
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              5))
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6
                                                                      )
                                                                      (fun _ ->
                                                                          MiniParse.Tac.Base.mk_if_t 
                                                                            (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                10
                                                                                x2
                                                                                (MiniParse.Spec.Int.mk_u16 
                                                                                    6))
                                                                            (fun _ ->
                                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                                            )
                                                                            (fun _ ->
                                                                                MiniParse.Tac.Base.mk_if_t 
                                                                                  (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                      10
                                                                                      x2
                                                                                      (MiniParse.Spec.Int.mk_u16 
                                                                                          7))
                                                                                  (fun _ ->
                                                                                      Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                                                  )
                                                                                  (fun _ ->
                                                                                      MiniParse.Tac.Base.mk_if_t 
                                                                                        (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                            10
                                                                                            x2
                                                                                            (MiniParse.Spec.Int.mk_u16 
                                                                                                8))
                                                                                        (fun _ ->
                                                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                                        )
                                                                                        (fun _ ->
                                                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                                                        ))))))))))))
                    ))))))
SMT goals (0):

TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: synth_inverse_forall_bounded_u16_solve, main goal
TAC>> Success: synth_inverse_forall_bounded_u16_solve, main goal
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
proof-state: State dump @ depth 28 (Some goals left):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Tac.Base.fst(169,4-169,28)
ACTIVE goals (1):
(x:
(_: MiniParse.Spec.Int.bounded_u16 7 -> Prims.GTot Bench.MiniParse.Size7.Factor10.Seed00.Goal.test)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7))))))) ==
x), (x:
(
    g1:
    (_: Bench.MiniParse.Size7.Factor10.Seed00.Goal.test ->
        Prims.GTot (MiniParse.Spec.Int.bounded_u16 7)) ->
    Prims.Pure (MiniParse.Spec.Base.parser_spec Bench.MiniParse.Size7.Factor10.Seed00.Goal.test)
      (MiniParse.Spec.Combinators.synth_inverse g1
          (fun x2 ->
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                    x2
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                          x2
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x2
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 3))
                                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 4))
                                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 5))
                                              (fun _ ->
                                                  Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                              (fun _ ->
                                                  Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7)))))
                )))
      (fun _ -> Prims.l_True))), (x:
(_: Bench.MiniParse.Size7.Factor10.Seed00.Goal.test -> Prims.GTot (MiniParse.Spec.Int.bounded_u16 7)
)), (_:
(fun x1 ->
    (match x1 with
      | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7 ->
        MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7
      | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6 ->
        MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 7
      | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5 ->
        MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 7
      | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4 ->
        MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 7
      | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3 ->
        MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 7
      | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2 ->
        MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 7
      | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1 ->
        MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 7
      | _ -> MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7)
    <:
    MiniParse.Spec.Int.bounded_u16 7) ==
x) |- _ : Prims.squash ((forall (x2: MiniParse.Spec.Int.bounded_u16 7).
        (*could not prove post-condition*)
        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
        (forall (return_val: MiniParse.Spec.Int.bounded_u16 7).
            return_val == MiniParse.Spec.Int.mk_u16 0 ==>
            (forall (any_result: Prims.bool).
                MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0) == any_result ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
                (forall (any_result:
                    (
                        _:
                        MiniParse.Tac.Base.ctest true
                          (MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0)) ->
                        Prims.Tot Bench.MiniParse.Size7.Factor10.Seed00.Goal.test)).
                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1) == any_result ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
                    (forall (x14:
                        MiniParse.Tac.Base.ctest false
                          (MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0))).
                        (*could not prove post-condition*)
                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7 /\
                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 7).
                            return_val == MiniParse.Spec.Int.mk_u16 1 ==>
                            (forall (any_result: Prims.bool).
                                MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 1) ==
                                any_result ==>
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7 /\
                                (forall (any_result:
                                    (
                                        _:
                                        MiniParse.Tac.Base.ctest true
                                          (MiniParse.Spec.Int.bounded_u16_eq 7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1)) ->
                                        Prims.Tot Bench.MiniParse.Size7.Factor10.Seed00.Goal.test)).
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2) ==
                                    any_result ==>
                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7 /\
                                    (forall (x12:
                                        MiniParse.Tac.Base.ctest false
                                          (MiniParse.Spec.Int.bounded_u16_eq 7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1))).
                                        (*could not prove post-condition*)
                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 7 /\
                                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 7).
                                            return_val == MiniParse.Spec.Int.mk_u16 2 ==>
                                            (forall (any_result: Prims.bool).
                                                MiniParse.Spec.Int.bounded_u16_eq 7
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 2) ==
                                                any_result ==>
                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 7 /\
                                                (forall (any_result:
                                                    (
                                                        _:
                                                        MiniParse.Tac.Base.ctest true
                                                          (MiniParse.Spec.Int.bounded_u16_eq 7
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2)) ->
                                                        Prims.Tot
                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                    )).
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3
                                                    ) ==
                                                    any_result ==>
                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 7 /\
                                                    (forall (x10:
                                                        MiniParse.Tac.Base.ctest false
                                                          (MiniParse.Spec.Int.bounded_u16_eq 7
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2))).
                                                        (*could not prove post-condition*)
                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) <
                                                        7 /\
                                                        (forall (return_val:
                                                            MiniParse.Spec.Int.bounded_u16 7).
                                                            return_val ==
                                                            MiniParse.Spec.Int.mk_u16 3 ==>
                                                            (forall (any_result: Prims.bool).
                                                                MiniParse.Spec.Int.bounded_u16_eq 7
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 3) ==
                                                                any_result ==>
                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                      3) <
                                                                7 /\
                                                                (forall (any_result:
                                                                    (
                                                                        _:
                                                                        MiniParse.Tac.Base.ctest true
                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                              7
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  3)) ->
                                                                        Prims.Tot
                                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                    )).
                                                                    (fun _ ->
                                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4
                                                                    ) ==
                                                                    any_result ==>
                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                          3) <
                                                                    7 /\
                                                                    (forall (x8:
                                                                        MiniParse.Tac.Base.ctest false
                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                              7
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  3))).
                                                                        (*could not prove post-condition*)
                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                              4) <
                                                                        7 /\
                                                                        (forall (return_val:
                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                              7).
                                                                            return_val ==
                                                                            MiniParse.Spec.Int.mk_u16 
                                                                              4 ==>
                                                                            (forall (any_result:
                                                                                Prims.bool).
                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  7
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      4) ==
                                                                                any_result ==>
                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                      4) <
                                                                                7 /\
                                                                                (forall (any_result:
                                                                                    (
                                                                                        _:
                                                                                        MiniParse.Tac.Base.ctest 
                                                                                          true
                                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                              7
                                                                                              x2
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  4)
                                                                                          ) ->
                                                                                        Prims.Tot
                                                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                                    )).
                                                                                    (fun _ ->
                                                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5
                                                                                    ) ==
                                                                                    any_result ==>
                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                          4) <
                                                                                    7 /\
                                                                                    (forall (x6:
                                                                                        MiniParse.Tac.Base.ctest 
                                                                                          false
                                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                              7
                                                                                              x2
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  4)
                                                                                          )).
                                                                                        (*could not prove post-condition*)
                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                        FStar.UInt16.v 
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              5) <
                                                                                        7 /\
                                                                                        (forall (return_val:
                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                              7).
                                                                                            return_val ==
                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                              5 ==>
                                                                                            (forall (any_result:
                                                                                                Prims.bool)
                                                                                              .
                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                  7
                                                                                                  x2
                                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                                      5
                                                                                                    
                                                                                                  ) ==
                                                                                                any_result ==>
                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                FStar.UInt16.v 
                                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                                      5
                                                                                                    
                                                                                                  ) <
                                                                                                7 /\
                                                                                                (forall 
                                                                                                    (any_result:
                                                                                                    (
                                                                                                      
                                                                                                        _:
                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                          true
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                              7
                                                                                                              x2
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                  5
                                                                                                                
                                                                                                              )
                                                                                                            
                                                                                                          )
                                                                                                         ->
                                                                                                        Prims.Tot
                                                                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                                                    ))
                                                                                                  .
                                                                                                    (
                                                                                                      fun
                                                                                                        _
                                                                                                        ->
                                                                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6
                                                                                                    ) ==
                                                                                                    any_result ==>
                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                    FStar.UInt16.v 
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                          5
                                                                                                        
                                                                                                      )
                                                                                                     <
                                                                                                    7
                                                                                                ))))
                                                                                )))))))))))))))))))) /\
    (forall (any_result:
        (_: MiniParse.Spec.Int.bounded_u16 7 ->
            Prims.GTot Bench.MiniParse.Size7.Factor10.Seed00.Goal.test)).
        (fun x2 ->
            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                  x2
                  (MiniParse.Spec.Int.mk_u16 0))
              (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
              (fun _ ->
                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                        x2
                        (MiniParse.Spec.Int.mk_u16 1))
                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                    (fun _ ->
                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                              x2
                              (MiniParse.Spec.Int.mk_u16 2))
                          (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                          (fun _ ->
                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                    x2
                                    (MiniParse.Spec.Int.mk_u16 3))
                                (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                                (fun _ ->
                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 4))
                                      (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                                      (fun _ ->
                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                7
                                                x2
                                                (MiniParse.Spec.Int.mk_u16 5))
                                            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7)
                                      )))))) ==
        any_result ==>
        (forall (any_result:
            (
                f2:
                (_: Bench.MiniParse.Size7.Factor10.Seed00.Goal.test ->
                    Prims.GTot (MiniParse.Spec.Int.bounded_u16 7)) ->
                u283984:
                Prims.squash (MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16' 7
                      Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                      (fun x2 ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x2
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 3))
                                              (fun _ ->
                                                  Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        7
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 4))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              7
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 5))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6
                                                          )
                                                          (fun _ ->
                                                              Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7
                                                          )))))))
                      f2) ->
                Prims.Tot
                (Prims.squash (MiniParse.Spec.Combinators.synth_inverse f2
                        (fun x2 ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 0))
                              (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 1))
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 2))
                                          (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    7
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 3))
                                                (fun _ ->
                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          7
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 4))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                7
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 5))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6
                                                            )
                                                            (fun _ ->
                                                                Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7
                                                            )))))))))))
            (x1: Bench.MiniParse.Size7.Factor10.Seed00.Goal.test).
            (*could not prove post-condition*)
            C7? x1 == true ==>
            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 6) < 7 /\
            ~(C7? x1 == true) ==>
            (C6? x1 == true ==>
              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 5) < 7) /\
            (~(C6? x1 == true) ==>
              C5? x1 == true ==>
              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 4) < 7 /\
              ~(C5? x1 == true) ==>
              (C4? x1 == true ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) < 7) /\
              (~(C4? x1 == true) ==>
                C3? x1 == true ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 7 /\
                ~(C3? x1 == true) ==>
                (C2? x1 == true ==>
                  (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                  FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7) /\
                (~(C2? x1 == true) ==>
                  C1? x1 == true ==>
                  (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                  FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
                  ~(C1? x1 == true) ==>
                  (forall (b: Bench.MiniParse.Size7.Factor10.Seed00.Goal.test).
                      x1 == b ==>
                      (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                      FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 6) < 7)))))))
SMT goals (0):

TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
proof-state: State dump @ depth 47 (synth_inverse_forall_tenum_solve FAILED here:):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Spec.TEnum.fst(183,12-183,66)
ACTIVE goals (1):
(x:
(_: MiniParse.Spec.Int.bounded_u16 7 -> Prims.GTot Bench.MiniParse.Size7.Factor1.Seed00.Goal.test)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6)
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7))))))) ==
x), (x:
(
    f2':
    (x: MiniParse.Spec.Int.bounded_u16 7 ->
        Prims.Tot
        (y:
          Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
            { y ==
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                    x
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                          x
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x
                                      (MiniParse.Spec.Int.mk_u16 3))
                                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x
                                            (MiniParse.Spec.Int.mk_u16 4))
                                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x
                                                  (MiniParse.Spec.Int.mk_u16 5))
                                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6
                                              )
                                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7
                                              )))))) })) ->
    g1:
    (_: Bench.MiniParse.Size7.Factor1.Seed00.Goal.test ->
        Prims.GTot (MiniParse.Spec.Int.bounded_u16 7)) ->
    u1818490:
    u1818519:
    Prims.unit
      { MiniParse.Spec.Combinators.synth_inverse g1
          (fun x2 ->
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                    x2
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                          x2
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x2
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 3))
                                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 4))
                                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 5))
                                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6
                                              )
                                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7
                                              ))))))) } ->
    Prims.Tot
    (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                7)
            (fun x2 ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x2
                      (MiniParse.Spec.Int.mk_u16 0))
                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 1))
                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 2))
                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 3))
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 4))
                                          (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    7
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 5))
                                                (fun _ ->
                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6)
                                                (fun _ ->
                                                    Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7))))
                        )))
            g1)))), (x:
(x: MiniParse.Spec.Int.bounded_u16 7 ->
    Prims.Tot
    (y:
      Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
        { y ==
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6)
                                          (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7))))
                  )) }))), (_:
(fun x0 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7 x0 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x0
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x0
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x0
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x0
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x0
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6)
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7))))))) ==
x), (x:
(_: Bench.MiniParse.Size7.Factor1.Seed00.Goal.test -> Prims.GTot (MiniParse.Spec.Int.bounded_u16 7))), (x:
u1818561:
Prims.unit
  { MiniParse.Spec.Combinators.synth_inverse x
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6)
                                          (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7))))
                  ))) }), (x:
(_: MiniParse.Spec.Int.bounded_u16 7 -> Prims.GTot Bench.MiniParse.Size7.Factor1.Seed00.Goal.test)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6)
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7))))))) ==
x) |- _ : Prims.squash (MiniParse.Spec.Combinators.synth_inverse x
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6)
                                          (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7))))
                  ))))
SMT goals (0):

TAC>> Checking success for: assumption
TAC>> Success: assumption
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Applied: implies_intro
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> No goals left
TAC>> Checking success for: synth_inverse_forall_bounded_u16_solve
TAC>> Success: synth_inverse_forall_bounded_u16_solve
TAC>> Checking success for: trivial
TAC>> Applied: forall_intro
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: reflexivity
TAC>> Success: reflexivity
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> No goals left
Tactic fun _ ->
  MiniParse.Spec.TEnum.gen_enum_parser (FStar.Tactics.Types.Goal)
    (`Bench.MiniParse.Size7.Factor10.Seed00.Goal.test)
  <:
  FStar.Tactics.Effect.TAC Prims.unit ran in 40234 ms (Goal)
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Unfolded definition: Bench.MiniParse.Size7.Factor10.Seed00.Goal.pBenchMiniParseSize7Factor10Seed00Goal
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
proof-state: State dump @ depth 3 (Some goals left):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Tac.Base.fst(169,4-169,28)
ACTIVE goals (1):
 |- _ : Prims.squash ((forall (x2: MiniParse.Spec.Int.bounded_u16 7).
        (*could not prove post-condition*)
        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
        (forall (return_val: MiniParse.Spec.Int.bounded_u16 7).
            return_val == MiniParse.Spec.Int.mk_u16 0 ==>
            (forall (any_result: Prims.bool).
                MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0) == any_result ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
                (forall (any_result:
                    (
                        _:
                        MiniParse.Tac.Base.ctest true
                          (MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0)) ->
                        Prims.Tot Bench.MiniParse.Size7.Factor10.Seed00.Goal.test)).
                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1) == any_result ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
                    (forall (x14:
                        MiniParse.Tac.Base.ctest false
                          (MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0))).
                        (*could not prove post-condition*)
                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7 /\
                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 7).
                            return_val == MiniParse.Spec.Int.mk_u16 1 ==>
                            (forall (any_result: Prims.bool).
                                MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 1) ==
                                any_result ==>
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7 /\
                                (forall (any_result:
                                    (
                                        _:
                                        MiniParse.Tac.Base.ctest true
                                          (MiniParse.Spec.Int.bounded_u16_eq 7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1)) ->
                                        Prims.Tot Bench.MiniParse.Size7.Factor10.Seed00.Goal.test)).
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2) ==
                                    any_result ==>
                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7 /\
                                    (forall (x12:
                                        MiniParse.Tac.Base.ctest false
                                          (MiniParse.Spec.Int.bounded_u16_eq 7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1))).
                                        (*could not prove post-condition*)
                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 7 /\
                                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 7).
                                            return_val == MiniParse.Spec.Int.mk_u16 2 ==>
                                            (forall (any_result: Prims.bool).
                                                MiniParse.Spec.Int.bounded_u16_eq 7
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 2) ==
                                                any_result ==>
                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 7 /\
                                                (forall (any_result:
                                                    (
                                                        _:
                                                        MiniParse.Tac.Base.ctest true
                                                          (MiniParse.Spec.Int.bounded_u16_eq 7
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2)) ->
                                                        Prims.Tot
                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                    )).
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3
                                                    ) ==
                                                    any_result ==>
                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 7 /\
                                                    (forall (x10:
                                                        MiniParse.Tac.Base.ctest false
                                                          (MiniParse.Spec.Int.bounded_u16_eq 7
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2))).
                                                        (*could not prove post-condition*)
                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) <
                                                        7 /\
                                                        (forall (return_val:
                                                            MiniParse.Spec.Int.bounded_u16 7).
                                                            return_val ==
                                                            MiniParse.Spec.Int.mk_u16 3 ==>
                                                            (forall (any_result: Prims.bool).
                                                                MiniParse.Spec.Int.bounded_u16_eq 7
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 3) ==
                                                                any_result ==>
                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                      3) <
                                                                7 /\
                                                                (forall (any_result:
                                                                    (
                                                                        _:
                                                                        MiniParse.Tac.Base.ctest true
                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                              7
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  3)) ->
                                                                        Prims.Tot
                                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                    )).
                                                                    (fun _ ->
                                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4
                                                                    ) ==
                                                                    any_result ==>
                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                          3) <
                                                                    7 /\
                                                                    (forall (x8:
                                                                        MiniParse.Tac.Base.ctest false
                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                              7
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  3))).
                                                                        (*could not prove post-condition*)
                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                              4) <
                                                                        7 /\
                                                                        (forall (return_val:
                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                              7).
                                                                            return_val ==
                                                                            MiniParse.Spec.Int.mk_u16 
                                                                              4 ==>
                                                                            (forall (any_result:
                                                                                Prims.bool).
                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  7
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      4) ==
                                                                                any_result ==>
                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                      4) <
                                                                                7 /\
                                                                                (forall (any_result:
                                                                                    (
                                                                                        _:
                                                                                        MiniParse.Tac.Base.ctest 
                                                                                          true
                                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                              7
                                                                                              x2
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  4)
                                                                                          ) ->
                                                                                        Prims.Tot
                                                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                                    )).
                                                                                    (fun _ ->
                                                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5
                                                                                    ) ==
                                                                                    any_result ==>
                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                          4) <
                                                                                    7 /\
                                                                                    (forall (x6:
                                                                                        MiniParse.Tac.Base.ctest 
                                                                                          false
                                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                              7
                                                                                              x2
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  4)
                                                                                          )).
                                                                                        (*could not prove post-condition*)
                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                        FStar.UInt16.v 
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              5) <
                                                                                        7 /\
                                                                                        (forall (return_val:
                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                              7).
                                                                                            return_val ==
                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                              5 ==>
                                                                                            (forall (any_result:
                                                                                                Prims.bool)
                                                                                              .
                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                  7
                                                                                                  x2
                                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                                      5
                                                                                                    
                                                                                                  ) ==
                                                                                                any_result ==>
                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                FStar.UInt16.v 
                                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                                      5
                                                                                                    
                                                                                                  ) <
                                                                                                7 /\
                                                                                                (forall 
                                                                                                    (any_result:
                                                                                                    (
                                                                                                      
                                                                                                        _:
                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                          true
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                              7
                                                                                                              x2
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                  5
                                                                                                                
                                                                                                              )
                                                                                                            
                                                                                                          )
                                                                                                         ->
                                                                                                        Prims.Tot
                                                                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                                                    ))
                                                                                                  .
                                                                                                    (
                                                                                                      fun
                                                                                                        _
                                                                                                        ->
                                                                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6
                                                                                                    ) ==
                                                                                                    any_result ==>
                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                    FStar.UInt16.v 
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                          5
                                                                                                        
                                                                                                      )
                                                                                                     <
                                                                                                    7
                                                                                                ))))
                                                                                )))))))))))))))))))) /\
    (forall (any_result:
        (_: MiniParse.Spec.Int.bounded_u16 7 ->
            Prims.GTot Bench.MiniParse.Size7.Factor10.Seed00.Goal.test)).
        (fun x2 ->
            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                  x2
                  (MiniParse.Spec.Int.mk_u16 0))
              (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
              (fun _ ->
                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                        x2
                        (MiniParse.Spec.Int.mk_u16 1))
                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                    (fun _ ->
                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                              x2
                              (MiniParse.Spec.Int.mk_u16 2))
                          (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                          (fun _ ->
                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                    x2
                                    (MiniParse.Spec.Int.mk_u16 3))
                                (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                                (fun _ ->
                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 4))
                                      (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                                      (fun _ ->
                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                7
                                                x2
                                                (MiniParse.Spec.Int.mk_u16 5))
                                            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7)
                                      )))))) ==
        any_result ==>
        (forall (any_result:
            (
                f2':
                (x: MiniParse.Spec.Int.bounded_u16 7 ->
                    Prims.Tot
                    (y:
                      Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                        { y ==
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x
                                                  (MiniParse.Spec.Int.mk_u16 3))
                                              (fun _ ->
                                                  Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        7
                                                        x
                                                        (MiniParse.Spec.Int.mk_u16 4))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              7
                                                              x
                                                              (MiniParse.Spec.Int.mk_u16 5))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6
                                                          )
                                                          (fun _ ->
                                                              Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7
                                                          )))))) })) ->
                g1:
                (_: Bench.MiniParse.Size7.Factor10.Seed00.Goal.test ->
                    Prims.GTot (MiniParse.Spec.Int.bounded_u16 7)) ->
                u842665:
                u842694:
                Prims.unit
                  { MiniParse.Spec.Combinators.synth_inverse g1
                      (fun x2 ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x2
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 3))
                                              (fun _ ->
                                                  Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        7
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 4))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              7
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 5))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6
                                                          )
                                                          (fun _ ->
                                                              Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7
                                                          ))))))) } ->
                Prims.Tot
                (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                            7)
                        (fun x2 ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 0))
                              (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 1))
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 2))
                                          (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    7
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 3))
                                                (fun _ ->
                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          7
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 4))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                7
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 5))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6
                                                            )
                                                            (fun _ ->
                                                                Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7
                                                            )))))))
                        g1)))).
            (forall (x0: MiniParse.Spec.Int.bounded_u16 7).
                (*could not prove post-condition*)
                (forall (x2: MiniParse.Spec.Int.bounded_u16 7).
                    (*could not prove post-condition*)
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
                    (forall (return_val: MiniParse.Spec.Int.bounded_u16 7).
                        return_val == MiniParse.Spec.Int.mk_u16 0 ==>
                        (forall (any_result: Prims.bool).
                            MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0) ==
                            any_result ==>
                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
                            (forall (any_result:
                                (
                                    _:
                                    MiniParse.Tac.Base.ctest true
                                      (MiniParse.Spec.Int.bounded_u16_eq 7
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 0)) ->
                                    Prims.Tot Bench.MiniParse.Size7.Factor10.Seed00.Goal.test)).
                                (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1) ==
                                any_result ==>
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
                                (forall (x14:
                                    MiniParse.Tac.Base.ctest false
                                      (MiniParse.Spec.Int.bounded_u16_eq 7
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 0))).
                                    (*could not prove post-condition*)
                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7 /\
                                    (forall (return_val: MiniParse.Spec.Int.bounded_u16 7).
                                        return_val == MiniParse.Spec.Int.mk_u16 1 ==>
                                        (forall (any_result: Prims.bool).
                                            MiniParse.Spec.Int.bounded_u16_eq 7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1) ==
                                            any_result ==>
                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7 /\
                                            (forall (any_result:
                                                (
                                                    _:
                                                    MiniParse.Tac.Base.ctest true
                                                      (MiniParse.Spec.Int.bounded_u16_eq 7
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 1)) ->
                                                    Prims.Tot
                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.test))
                                              .
                                                (fun _ ->
                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2) ==
                                                any_result ==>
                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7 /\
                                                (forall (x12:
                                                    MiniParse.Tac.Base.ctest false
                                                      (MiniParse.Spec.Int.bounded_u16_eq 7
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 1))).
                                                    (*could not prove post-condition*)
                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 7 /\
                                                    (forall (return_val:
                                                        MiniParse.Spec.Int.bounded_u16 7).
                                                        return_val == MiniParse.Spec.Int.mk_u16 2 ==>
                                                        (forall (any_result: Prims.bool).
                                                            MiniParse.Spec.Int.bounded_u16_eq 7
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2) ==
                                                            any_result ==>
                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                  2) <
                                                            7 /\
                                                            (forall (any_result:
                                                                (
                                                                    _:
                                                                    MiniParse.Tac.Base.ctest true
                                                                      (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          7
                                                                          x2
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              2)) ->
                                                                    Prims.Tot
                                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                )).
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3
                                                                ) ==
                                                                any_result ==>
                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                      2) <
                                                                7 /\
                                                                (forall (x10:
                                                                    MiniParse.Tac.Base.ctest false
                                                                      (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          7
                                                                          x2
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              2))).
                                                                    (*could not prove post-condition*)
                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                          3) <
                                                                    7 /\
                                                                    (forall (return_val:
                                                                        MiniParse.Spec.Int.bounded_u16 
                                                                          7).
                                                                        return_val ==
                                                                        MiniParse.Spec.Int.mk_u16 3 ==>
                                                                        (forall (any_result:
                                                                            Prims.bool).
                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                              7
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  3) ==
                                                                            any_result ==>
                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                  3) <
                                                                            7 /\
                                                                            (forall (any_result:
                                                                                (
                                                                                    _:
                                                                                    MiniParse.Tac.Base.ctest 
                                                                                      true
                                                                                      (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                          7
                                                                                          x2
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              3)) ->
                                                                                    Prims.Tot
                                                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                                )).
                                                                                (fun _ ->
                                                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4
                                                                                ) ==
                                                                                any_result ==>
                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                      3) <
                                                                                7 /\
                                                                                (forall (x8:
                                                                                    MiniParse.Tac.Base.ctest 
                                                                                      false
                                                                                      (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                          7
                                                                                          x2
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              3))).
                                                                                    (*could not prove post-condition*)
                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                          4) <
                                                                                    7 /\
                                                                                    (forall (return_val:
                                                                                        MiniParse.Spec.Int.bounded_u16 
                                                                                          7).
                                                                                        return_val ==
                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                          4 ==>
                                                                                        (forall (any_result:
                                                                                            Prims.bool)
                                                                                          .
                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                              7
                                                                                              x2
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  4) ==
                                                                                            any_result ==>
                                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                            FStar.UInt16.v 
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  4) <
                                                                                            7 /\
                                                                                            (forall (any_result:
                                                                                                (
                                                                                                    _:
                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                      true
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                          7
                                                                                                          x2
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              4
                                                                                                            
                                                                                                          )
                                                                                                        
                                                                                                      )
                                                                                                     ->
                                                                                                    Prims.Tot
                                                                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                                                )).
                                                                                                (fun
                                                                                                    _
                                                                                                    ->
                                                                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5
                                                                                                ) ==
                                                                                                any_result ==>
                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                FStar.UInt16.v 
                                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                                      4
                                                                                                    
                                                                                                  ) <
                                                                                                7 /\
                                                                                                (forall 
                                                                                                    (x6:
                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                      false
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                          7
                                                                                                          x2
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              4
                                                                                                            
                                                                                                          )
                                                                                                        
                                                                                                      )
                                                                                                    )
                                                                                                  .
                                                                                                    (*could not prove post-condition*)
                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                    FStar.UInt16.v 
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                          5
                                                                                                        
                                                                                                      )
                                                                                                     <
                                                                                                    7 /\
                                                                                                    (
                                                                                                      forall 
                                                                                                        (return_val:
                                                                                                        MiniParse.Spec.Int.bounded_u16 
                                                                                                          7
                                                                                                        )
                                                                                                      .
                                                                                                        return_val ==
                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                          5
                                                                                                         ==>
                                                                                                        (
                                                                                                          forall 
                                                                                                            (any_result:
                                                                                                            Prims.bool)
                                                                                                          .
                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                              7
                                                                                                              x2
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                  5
                                                                                                                
                                                                                                              )
                                                                                                             ==
                                                                                                            any_result ==>
                                                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                            FStar.UInt16.v 
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                  5
                                                                                                                
                                                                                                              )
                                                                                                             <
                                                                                                            7 /\
                                                                                                            (
                                                                                                              forall 
                                                                                                                (any_result:
                                                                                                                (
                                                                                                                  
                                                                                                                    _:
                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                      true
                                                                                                                      (
                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                          7
                                                                          TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
                                                x2
                                                                                                                          (
                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                              5
                                                                                                                            
                                                                                                                          )
                                                                                                                        
                                                                                                                      )
                                                                                                                     ->
                                                                                                                    Prims.Tot
                                                                                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                                                                ))
                                                                                                              .
                                                                                                                (
                                                                                                                  fun
                                                                                                                    _
                                                                                                                    ->
                                                                                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6
                                                                                                                ) ==
                                                                                                                any_result ==>
                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                                FStar.UInt16.v 
                                                                                                                  (
                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                      5
                                                                                                                    
                                                                                                                  )
                                                                                                                 <
                                                                                                                7
                                                                                                            )
                                                                                                        )
                                                                                                    )
                                                                                                ))))
                                                                                ))))))))))))))))) /\
                (forall (any_result:
                    (x2: MiniParse.Spec.Int.bounded_u16 7 ->
                        Prims.Tot Bench.MiniParse.Size7.Factor10.Seed00.Goal.test))
                    (any_result: Bench.MiniParse.Size7.Factor10.Seed00.Goal.test).
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                          x0
                          (MiniParse.Spec.Int.mk_u16 0))
                      (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x0
                                (MiniParse.Spec.Int.mk_u16 1))
                            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x0
                                      (MiniParse.Spec.Int.mk_u16 2))
                                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x0
                                            (MiniParse.Spec.Int.mk_u16 3))
                                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x0
                                                  (MiniParse.Spec.Int.mk_u16 4))
                                              (fun _ ->
                                                  Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        7
                                                        x0
                                                        (MiniParse.Spec.Int.mk_u16 5))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6
                                                    )
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7
                                                    )))))) ==
                    any_result ==>
                    (*Subtyping check failed; expected type y:
Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
  { y ==
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7 x0 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x0
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x0
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x0
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x0
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x0
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7)))))) }; got type Bench.MiniParse.Size7.Factor10.Seed00.Goal.test*)
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                          x0
                          (MiniParse.Spec.Int.mk_u16 0))
                      (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x0
                                (MiniParse.Spec.Int.mk_u16 1))
                            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x0
                                      (MiniParse.Spec.Int.mk_u16 2))
                                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x0
                                            (MiniParse.Spec.Int.mk_u16 3))
                                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x0
                                                  (MiniParse.Spec.Int.mk_u16 4))
                                              (fun _ ->
                                                  Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        7
                                                        x0
                                                        (MiniParse.Spec.Int.mk_u16 5))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6
                                                    )
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7
                                                    )))))) ==
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                          x0
                          (MiniParse.Spec.Int.mk_u16 0))
                      (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x0
                                (MiniParse.Spec.Int.mk_u16 1))
                            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x0
                                      (MiniParse.Spec.Int.mk_u16 2))
                                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x0
                                            (MiniParse.Spec.Int.mk_u16 3))
                                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x0
                                                  (MiniParse.Spec.Int.mk_u16 4))
                                              (fun _ ->
                                                  Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        7
                                                        x0
                                                        (MiniParse.Spec.Int.mk_u16 5))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6
                                                    )
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7
                                                    )))))))) /\
            (forall (any_result:
                (x: MiniParse.Spec.Int.bounded_u16 7 ->
                    Prims.Tot
                    (y:
                      Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                        { y ==
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x
                                                  (MiniParse.Spec.Int.mk_u16 3))
                                              (fun _ ->
                                                  Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        7
                                                        x
                                                        (MiniParse.Spec.Int.mk_u16 4))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              7
                                                              x
                                                              (MiniParse.Spec.Int.mk_u16 5))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6
                                                          )
                                                          (fun _ ->
                                                              Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7
                                                          )))))) }))).
                (fun x0 ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                          x0
                          (MiniParse.Spec.Int.mk_u16 0))
                      (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x0
                                (MiniParse.Spec.Int.mk_u16 1))
                            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x0
                                      (MiniParse.Spec.Int.mk_u16 2))
                                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x0
                                            (MiniParse.Spec.Int.mk_u16 3))
                                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x0
                                                  (MiniParse.Spec.Int.mk_u16 4))
                                              (fun _ ->
                                                  Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        7
                                                        x0
                                                        (MiniParse.Spec.Int.mk_u16 5))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6
                                                    )
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7
                                                    ))))))) ==
                any_result ==>
                (forall (any_result:
                    (
                        g1:
                        (_: Bench.MiniParse.Size7.Factor10.Seed00.Goal.test ->
                            Prims.GTot (MiniParse.Spec.Int.bounded_u16 7)) ->
                        u842814:
                        u842829:
                        Prims.unit
                          { MiniParse.Spec.Combinators.synth_inverse g1
                              (fun x2 ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 0))
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1))
                                          (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    7
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 2))
                                                (fun _ ->
                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          7
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 3))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                7
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 4))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5
                                                            )
                                                            (fun _ ->
                                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                      7
                                                                      x2
                                                                      (MiniParse.Spec.Int.mk_u16 5))
                                                                  (fun _ ->
                                                                      Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6
                                                                  )
                                                                  (fun _ ->
                                                                      Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7
                                                                  ))))))) } ->
                        Prims.Tot
                        (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                                    7)
                                (fun x2 ->
                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 0))
                                      (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
                                      (fun _ ->
                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                7
                                                x2
                                                (MiniParse.Spec.Int.mk_u16 1))
                                            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                                            (fun _ ->
                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                      7
                                                      x2
                                                      (MiniParse.Spec.Int.mk_u16 2))
                                                  (fun _ ->
                                                      Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                                                  (fun _ ->
                                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                            7
                                                            x2
                                                            (MiniParse.Spec.Int.mk_u16 3))
                                                        (fun _ ->
                                                            Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4
                                                        )
                                                        (fun _ ->
                                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                  7
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 4))
                                                              (fun _ ->
                                                                  Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5
                                                              )
                                                              (fun _ ->
                                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                        7
                                                                        x2
                                                                        (MiniParse.Spec.Int.mk_u16 5
                                                                        ))
                                                                    (fun _ ->
                                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6
                                                                    )
                                                                    (fun _ ->
                                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7
                                                                    )))))))
                                g1)))).
                    (forall (x1: Bench.MiniParse.Size7.Factor10.Seed00.Goal.test).
                        (*could not prove post-condition*)
                        C7? x1 == true ==>
                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 6) < 7 /\
                        ~(C7? x1 == true) ==>
                        (C6? x1 == true ==>
                          (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                          FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 5) < 7) /\
                        (~(C6? x1 == true) ==>
                          C5? x1 == true ==>
                          (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                          FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 4) < 7 /\
                          ~(C5? x1 == true) ==>
                          (C4? x1 == true ==>
                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) < 7) /\
                          (~(C4? x1 == true) ==>
                            C3? x1 == true ==>
                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 7 /\
                            ~(C3? x1 == true) ==>
                            (C2? x1 == true ==>
                              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7) /\
                            (~(C2? x1 == true) ==>
                              C1? x1 == true ==>
                              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
                              ~(C1? x1 == true) ==>
                              (forall (b: Bench.MiniParse.Size7.Factor10.Seed00.Goal.test).
                                  x1 == b ==>
                                  (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                  FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 6) < 7))))) /\
                    (forall (any_result:
                        (_: Bench.MiniParse.Size7.Factor10.Seed00.Goal.test ->
                            Prims.GTot (MiniParse.Spec.Int.bounded_u16 7))).
                        (fun x1 ->
                            (match x1 with
                              | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7 ->
                                MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7
                              | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6 ->
                                MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 7
                              | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5 ->
                                MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 7
                              | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4 ->
                                MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 7
                              | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3 ->
                                MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 7
                              | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2 ->
                                MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 7
                              | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1 ->
                                MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 7
                              | _ -> MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7
                            )
                            <:
                            MiniParse.Spec.Int.bounded_u16 7) ==
                        any_result ==>
                        (forall (any_result:
                            (
                                u842850:
                                u842866:
                                Prims.unit
                                  { MiniParse.Spec.Combinators.synth_inverse (fun x1 ->
                                          (match x1 with
                                            | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7 ->
                                              MiniParse.Spec.Int.mk_u16 6
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 7
                                            | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6 ->
                                              MiniParse.Spec.Int.mk_u16 5
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 7
                                            | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5 ->
                                              MiniParse.Spec.Int.mk_u16 4
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 7
                                            | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4 ->
                                              MiniParse.Spec.Int.mk_u16 3
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 7
                                            | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3 ->
                                              MiniParse.Spec.Int.mk_u16 2
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 7
                                            | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2 ->
                                              MiniParse.Spec.Int.mk_u16 1
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 7
                                            | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1 ->
                                              MiniParse.Spec.Int.mk_u16 0
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 7
                                            | _ ->
                                              MiniParse.Spec.Int.mk_u16 6
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 7)
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 7)
                                      (fun x2 ->
                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                7
                                                x2
                                                (MiniParse.Spec.Int.mk_u16 0))
                                            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
                                            (fun _ ->
                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                      7
                                                      x2
                                                      (MiniParse.Spec.Int.mk_u16 1))
                                                  (fun _ ->
                                                      Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                                                  (fun _ ->
                                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                            7
                                                            x2
                                                            (MiniParse.Spec.Int.mk_u16 2))
                                                        (fun _ ->
                                                            Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3
                                                        )
                                                        (fun _ ->
                                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                  7
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 3))
                                                              (fun _ ->
                                                                  Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4
                                                              )
                                                              (fun _ ->
                                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                        7
                                                                        x2
                                                                        (MiniParse.Spec.Int.mk_u16 4
                                                                        ))
                                                                    (fun _ ->
                                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5
                                                                    )
                                                                    (fun _ ->
                                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                              7
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  5))
                                                                          (fun _ ->
                                                                              Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6
                                                                          )
                                                                          (fun _ ->
                                                                              Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7
                                                                          ))))))) } ->
                                Prims.Tot
                                (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth 
                                        (MiniParse.Spec.Int.parse_bounded_u16 7)
                                        (fun x2 ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 0))
                                              (fun _ ->
                                                  Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        7
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 1))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              7
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    7
                                                                    x2
                                                                    (MiniParse.Spec.Int.mk_u16 3))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4
                                                                )
                                                                (fun _ ->
                                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          7
                                                                          x2
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              4))
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5
                                                                      )
                                                                      (fun _ ->
                                                                          MiniParse.Tac.Base.mk_if_t 
                                                                            (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                7
                                                                                x2
                                                                                (MiniParse.Spec.Int.mk_u16 
                                                                                    5))
                                                                            (fun _ ->
                                                                                Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6
                                                                            )
                                                                            (fun _ ->
                                                                                Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7
                                                                            )))))))
                                        (fun x1 ->
                                            (match x1 with
                                              | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7 ->
                                                MiniParse.Spec.Int.mk_u16 6
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 7
                                              | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6 ->
                                                MiniParse.Spec.Int.mk_u16 5
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 7
                                              | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5 ->
                                                MiniParse.Spec.Int.mk_u16 4
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 7
                                              | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4 ->
                                                MiniParse.Spec.Int.mk_u16 3
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 7
                                              | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3 ->
                                                MiniParse.Spec.Int.mk_u16 2
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 7
                                              | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2 ->
                                                MiniParse.Spec.Int.mk_u16 1
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 7
                                              | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1 ->
                                                MiniParse.Spec.Int.mk_u16 0
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 7
                                              | _ ->
                                                MiniParse.Spec.Int.mk_u16 6
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 7)
                                            <:
                                            MiniParse.Spec.Int.bounded_u16 7))))).
                            (*Subtyping check failed; expected type u837446:
Prims.unit
  { MiniParse.Spec.Combinators.synth_inverse (fun x1 ->
          (match x1 with
            | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7 ->
              MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7
            | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6 ->
              MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 7
            | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5 ->
              MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 7
            | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4 ->
              MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 7
            | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3 ->
              MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 7
            | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2 ->
              MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 7
            | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1 ->
              MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 7
            | _ -> MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7)
          <:
          MiniParse.Spec.Int.bounded_u16 7)
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                          (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7)))
                        )))) }; got type Prims.unit*)
                            Prims.auto_squash (MiniParse.Spec.Combinators.synth_inverse (fun x1 ->
                                      (match x1 with
                                        | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7 ->
                                          MiniParse.Spec.Int.mk_u16 6
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 7
                                        | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6 ->
                                          MiniParse.Spec.Int.mk_u16 5
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 7
                                        | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5 ->
                                          MiniParse.Spec.Int.mk_u16 4
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 7
                                        | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4 ->
                                          MiniParse.Spec.Int.mk_u16 3
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 7
                                        | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3 ->
                                          MiniParse.Spec.Int.mk_u16 2
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 7
                                        | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2 ->
                                          MiniParse.Spec.Int.mk_u16 1
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 7
                                        | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1 ->
                                          MiniParse.Spec.Int.mk_u16 0
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 7
                                        | _ ->
                                          MiniParse.Spec.Int.mk_u16 6
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 7)
                                      <:
                                      MiniParse.Spec.Int.bounded_u16 7)
                                  (fun x2 ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 0))
                                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 1))
                                              (fun _ ->
                                                  Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        7
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 2))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              7
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 3))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    7
                                                                    x2
                                                                    (MiniParse.Spec.Int.mk_u16 4))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5
                                                                )
                                                                (fun _ ->
                                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          7
                                                                          x2
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              5))
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6
                                                                      )
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7
                                                                      )))))))))))))))
SMT goals (0):

TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
proof-state: State dump @ depth 39 (synth_inverse_forall_tenum_solve FAILED here:):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Spec.TEnum.fst(183,12-183,66)
ACTIVE goals (1):
(x:
(_: MiniParse.Spec.Int.bounded_u16 7 -> Prims.GTot Bench.MiniParse.Size7.Factor1.Seed00.Goal.test)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6)
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7))))))) ==
x), (x:
(x: MiniParse.Spec.Int.bounded_u16 7 ->
    Prims.Tot
    (y:
      Bench.MiniParse.Size7.Factor1.Seed00.Goal.test
        { y ==
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6)
                                          (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7))))
                  )) }))), (x:
(_: Bench.MiniParse.Size7.Factor1.Seed00.Goal.test -> Prims.GTot (MiniParse.Spec.Int.bounded_u16 7))), (x:
u2373416:
Prims.unit
  { MiniParse.Spec.Combinators.synth_inverse x
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6)
                                          (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7))))
                  ))) }), (x:
(_: MiniParse.Spec.Int.bounded_u16 7 -> Prims.GTot Bench.MiniParse.Size7.Factor1.Seed00.Goal.test)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6)
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7))))))) ==
x) |- _ : Prims.squash (MiniParse.Spec.Combinators.synth_inverse x
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6)
                                          (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7))))
                  ))))
SMT goals (0):

TAC>> Checking success for: assumption
TAC>> Success: assumption
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: synth_inverse_forall_bounded_u16_solve, main goal
TAC>> Success: synth_inverse_forall_bounded_u16_solve, main goal
proof-state: State dump @ depth 46 (Some goals left):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Tac.Base.fst(169,4-169,28)
ACTIVE goals (1):
(x:
(_: MiniParse.Spec.Int.bounded_u16 10 -> Prims.GTot Bench.MiniParse.Size10.Factor1.Seed00.Goal.test)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
          x2
          (MiniParse.Spec.Int.mk_u16 0))
      (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 6))
                                          (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 7))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 8))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                      )
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                      )))))))))) ==
x), (x:
(
    f2':
    (x: MiniParse.Spec.Int.bounded_u16 10 ->
        Prims.Tot
        (y:
          Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
            { y ==
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                    x
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                          x
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x
                                      (MiniParse.Spec.Int.mk_u16 3))
                                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x
                                            (MiniParse.Spec.Int.mk_u16 4))
                                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x
                                                  (MiniParse.Spec.Int.mk_u16 5))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x
                                                        (MiniParse.Spec.Int.mk_u16 6))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x
                                                              (MiniParse.Spec.Int.mk_u16 7))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x
                                                                    (MiniParse.Spec.Int.mk_u16 8))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                )
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                                ))))))))) })) ->
    g1:
    (_: Bench.MiniParse.Size10.Factor1.Seed00.Goal.test ->
        Prims.GTot (MiniParse.Spec.Int.bounded_u16 10)) ->
    u2393572:
    u2393613:
    Prims.unit
      { MiniParse.Spec.Combinators.synth_inverse g1
          (fun x2 ->
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                    x2
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                          x2
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x2
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 3))
                                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 4))
                                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 5))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 6))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 7))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x2
                                                                    (MiniParse.Spec.Int.mk_u16 8))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                )
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                                )))))))))) } ->
    Prims.Tot
    (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                10)
            (fun x2 ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x2
                      (MiniParse.Spec.Int.mk_u16 0))
                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 1))
                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 2))
                              (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 3))
                                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 4))
                                          (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 5))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 6))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 7))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                            )
                                                            (fun _ ->
                                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                      10
                                                                      x2
                                                                      (MiniParse.Spec.Int.mk_u16 8))
                                                                  (fun _ ->
                                                                      Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                  )
                                                                  (fun _ ->
                                                                      Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                                  ))))))))))
            g1)))), (x:
(x: MiniParse.Spec.Int.bounded_u16 10 ->
    Prims.Tot
    (y:
      Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
        { y ==
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x
                                                    (MiniParse.Spec.Int.mk_u16 6))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x
                                                          (MiniParse.Spec.Int.mk_u16 7))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x
                                                                (MiniParse.Spec.Int.mk_u16 8))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                            )
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                            ))))))))) }))), (_:
(fun x0 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
          x0
          (MiniParse.Spec.Int.mk_u16 0))
      (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x0
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x0
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x0
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x0
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x0
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x0
                                              (MiniParse.Spec.Int.mk_u16 6))
                                          (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x0
                                                    (MiniParse.Spec.Int.mk_u16 7))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x0
                                                          (MiniParse.Spec.Int.mk_u16 8))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                      )
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                      )))))))))) ==
x), (x:
(
    g1:
    (_: Bench.MiniParse.Size10.Factor1.Seed00.Goal.test ->
        Prims.GTot (MiniParse.Spec.Int.bounded_u16 10)) ->
    u2393673:
    u2393694:
    Prims.unit
      { MiniParse.Spec.Combinators.synth_inverse g1
          (fun x2 ->
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                    x2
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                          x2
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x2
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 3))
                                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 4))
                                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 5))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 6))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 7))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x2
                                                                    (MiniParse.Spec.Int.mk_u16 8))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                )
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                                )))))))))) } ->
    Prims.Tot
    (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                10)
            (fun x2 ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x2
                      (MiniParse.Spec.Int.mk_u16 0))
                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 1))
                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 2))
                              (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 3))
                                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 4))
                                          (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 5))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 6))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 7))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                            )
                                                            (fun _ ->
                                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                      10
                                                                      x2
                                                                      (MiniParse.Spec.Int.mk_u16 8))
                                                                  (fun _ ->
                                                                      Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                  )
                                                                  (fun _ ->
                                                                      Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                                  ))))))))))
            g1)))), (x:
(_: Bench.MiniParse.Size10.Factor1.Seed00.Goal.test ->
    Prims.GTot (MiniParse.Spec.Int.bounded_u16 10))), (_:
(fun x1 ->
    (match x1 with
      | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10 ->
        MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9 ->
        MiniParse.Spec.Int.mk_u16 8 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8 ->
        MiniParse.Spec.Int.mk_u16 7 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7 ->
        MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6 ->
        MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5 ->
        MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4 ->
        MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3 ->
        MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2 ->
        MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1 ->
        MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 10
      | _ -> MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10)
    <:
    MiniParse.Spec.Int.bounded_u16 10) ==
x), (x:
(
    u2393717:
    u2393739:
    Prims.unit
      { MiniParse.Spec.Combinators.synth_inverse (fun x1 ->
              (match x1 with
                | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10 ->
                  MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10
                | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9 ->
                  MiniParse.Spec.Int.mk_u16 8 <: MiniParse.Spec.Int.bounded_u16 10
                | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8 ->
                  MiniParse.Spec.Int.mk_u16 7 <: MiniParse.Spec.Int.bounded_u16 10
                | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7 ->
                  MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 10
                | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6 ->
                  MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 10
                | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5 ->
                  MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 10
                | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4 ->
                  MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 10
                | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3 ->
                  MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 10
                | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2 ->
                  MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 10
                | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1 ->
                  MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 10
                | _ -> MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10)
              <:
              MiniParse.Spec.Int.bounded_u16 10)
          (fun x2 ->
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                    x2
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                          x2
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x2
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 3))
                                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 4))
                                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 5))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 6))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 7))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x2
                                                                    (MiniParse.Spec.Int.mk_u16 8))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                )
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                                )))))))))) } ->
    Prims.Tot
    (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                10)
            (fun x2 ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x2
                      (MiniParse.Spec.Int.mk_u16 0))
                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 1))
                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 2))
                              (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 3))
                                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 4))
                                          (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 5))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 6))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 7))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                            )
                                                            (fun _ ->
                                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                      10
                                                                      x2
                                                                      (MiniParse.Spec.Int.mk_u16 8))
                                                                  (fun _ ->
                                                                      Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                  )
                                                                  (fun _ ->
                                                                      Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                                  ))))))))))
            (fun x1 ->
                (match x1 with
                  | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10 ->
                    MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10
                  | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9 ->
                    MiniParse.Spec.Int.mk_u16 8 <: MiniParse.Spec.Int.bounded_u16 10
                  | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8 ->
                    MiniParse.Spec.Int.mk_u16 7 <: MiniParse.Spec.Int.bounded_u16 10
                  | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7 ->
                    MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 10
                  | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6 ->
                    MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 10
                  | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5 ->
                    MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 10
                  | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4 ->
                    MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 10
                  | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3 ->
                    MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 10
                  | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2 ->
                    MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 10
                  | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1 ->
                    MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 10
                  | _ -> MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10)
                <:
                MiniParse.Spec.Int.bounded_u16 10))))) |- _ : Prims.squash ((forall (x2: MiniParse.Spec.Int.bounded_u16 10).
        (*could not prove post-condition*)
        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10 /\
        (forall (return_val: MiniParse.Spec.Int.bounded_u16 10).
            return_val == MiniParse.Spec.Int.mk_u16 0 ==>
            (forall (any_result: Prims.bool).
                MiniParse.Spec.Int.bounded_u16_eq 10 x2 (MiniParse.Spec.Int.mk_u16 0) == any_result ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10 /\
                (forall (any_result:
                    (
                        _:
                        MiniParse.Tac.Base.ctest true
                          (MiniParse.Spec.Int.bounded_u16_eq 10 x2 (MiniParse.Spec.Int.mk_u16 0)) ->
                        Prims.Tot Bench.MiniParse.Size10.Factor1.Seed00.Goal.test)).
                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1) == any_result ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10 /\
                    (forall (x20:
                        MiniParse.Tac.Base.ctest false
                          (MiniParse.Spec.Int.bounded_u16_eq 10 x2 (MiniParse.Spec.Int.mk_u16 0))).
                        (*could not prove post-condition*)
                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 10).
                            return_val == MiniParse.Spec.Int.mk_u16 1 ==>
                            (forall (any_result: Prims.bool).
                                MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 1) ==
                                any_result ==>
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                                (forall (any_result:
                                    (
                                        _:
                                        MiniParse.Tac.Base.ctest true
                                          (MiniParse.Spec.Int.bounded_u16_eq 10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1)) ->
                                        Prims.Tot Bench.MiniParse.Size10.Factor1.Seed00.Goal.test)).
                                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2) ==
                                    any_result ==>
                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                                    (forall (x18:
                                        MiniParse.Tac.Base.ctest false
                                          (MiniParse.Spec.Int.bounded_u16_eq 10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1))).
                                        (*could not prove post-condition*)
                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 10 /\
                                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 10).
                                            return_val == MiniParse.Spec.Int.mk_u16 2 ==>
                                            (forall (any_result: Prims.bool).
                                                MiniParse.Spec.Int.bounded_u16_eq 10
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 2) ==
                                                any_result ==>
                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 10 /\
                                                (forall (any_result:
                                                    (
                                                        _:
                                                        MiniParse.Tac.Base.ctest true
                                                          (MiniParse.Spec.Int.bounded_u16_eq 10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2)) ->
                                                        Prims.Tot
                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                    )).
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3
                                                    ) ==
                                                    any_result ==>
                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) <
                                                    10 /\
                                                    (forall (x16:
                                                        MiniParse.Tac.Base.ctest false
                                                          (MiniParse.Spec.Int.bounded_u16_eq 10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2))).
                                                        (*could not prove post-condition*)
                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) <
                                                        10 /\
                                                        (forall (return_val:
                                                            MiniParse.Spec.Int.bounded_u16 10).
                                                            return_val ==
                                                            MiniParse.Spec.Int.mk_u16 3 ==>
                                                            (forall (any_result: Prims.bool).
                                                                MiniParse.Spec.Int.bounded_u16_eq 10
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 3) ==
                                                                any_result ==>
                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                      3) <
                                                                10 /\
                                                                (forall (any_result:
                                                                    (
                                                                        _:
                                                                        MiniParse.Tac.Base.ctest true
                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                              10
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  3)) ->
                                                                        Prims.Tot
                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                    )).
                                                                    (fun _ ->
                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4
                                                                    ) ==
                                                                    any_result ==>
                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                          3) <
                                                                    10 /\
                                                                    (forall (x14:
                                                                        MiniParse.Tac.Base.ctest false
                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                              10
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  3))).
                                                                        (*could not prove post-condition*)
                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                              4) <
                                                                        10 /\
                                                                        (forall (return_val:
                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                              10).
                                                                            return_val ==
                                                                            MiniParse.Spec.Int.mk_u16 
                                                                              4 ==>
                                                                            (forall (any_result:
                                                                                Prims.bool).
                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  10
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      4) ==
                                                                                any_result ==>
                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                      4) <
                                                                                10 /\
                                                                                (forall (any_result:
                                                                                    (
                                                                                        _:
                                                                                        MiniParse.Tac.Base.ctest 
                                                                                          true
                                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                              10
                                                                                              x2
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  4)
                                                                                          ) ->
                                                                                        Prims.Tot
                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                    )).
                                                                                    (fun _ ->
                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5
                                                                                    ) ==
                                                                                    any_result ==>
                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                          4) <
                                                                                    10 /\
                                                                                    (forall (x12:
                                                                                        MiniParse.Tac.Base.ctest 
                                                                                          false
                                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                              10
                                                                                              x2
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  4)
                                                                                          )).
                                                                                        (*could not prove post-condition*)
                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                        FStar.UInt16.v 
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              5) <
                                                                                        10 /\
                                                                                        (forall (return_val:
                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                              10).
                                                                                            return_val ==
                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                              5 ==>
                                                                                            (forall (any_result:
                                                                                                Prims.bool)
                                                                                              .
                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                  10
                                                                                                  x2
                                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                                      5
                                                                                                    
                                                                                                  ) ==
                                                                                                any_result ==>
                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                FStar.UInt16.v 
                                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                                      5
                                                                                                    
                                                                                                  ) <
                                                                                                10 /\
                                                                                                (forall 
                                                                                                    (any_result:
                                                                                                    (
                                                                                                      
                                                                                                        _:
                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                          true
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                              10
                                                                                                              x2
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                  5
                                                                                                                
                                                                                                              )
                                                                                                            
                                                                                                          )
                                                                                                         ->
                                                                                                        Prims.Tot
                                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                    ))
                                                                                                  .
                                                                                                    (
                                                                                                      fun
                                                                                                        _
                                                                                                        ->
                                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6
                                                                                                    ) ==
                                                                                                    any_result ==>
                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                    FStar.UInt16.v 
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                          5
                                                                                                        
                                                                                                      )
                                                                                                     <
                                                                                                    10 /\
                                                                                                    (
                                                                                                      forall 
                                                                                                        (x10:
                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                          false
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                              10
                                                                                                              x2
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                  5
                                                                                                                
                                                                                                              )
                                                                                                            
                                                                                                          )
                                                                                                        )
                                                                                                      .
                                                                                                        (*could not prove post-condition*)
                                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                        FStar.UInt16.v 
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              6
                                                                                                            
                                                                                                          )
                                                                                                         <
                                                                                                        10 /\
                                                                                                        (
                                                                                                          forall 
                                                                                                            (return_val:
                                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                                              10
                                                                                                            )
                                                                                                          .
                                                                                                            return_val ==
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              6
                                                                                                             ==>
                                                                                                            (
                                                                                                              forall 
                                                                                                                (any_result:
                                                                                                                Prims.bool)
                                                                                                              .
                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                  10
                                                                                                                  x2
                                                                                                                  (
                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                      6
                                                                                                                    
                                                                                                                  )
                                                                                                                 ==
                                                                                                                any_result ==>
                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                FStar.UInt16.v 
                                                                                                                  (
                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                      6
                                                                                                                    
                                                                                                                  )
                                                                                                                 <
                                                                                                                10 /\
                                                                                                                (
                                                                                                                  forall 
                                                                                                                    (any_result:
                                                                                                                    (
                                                                                                                      
                                                                                                                        _:
                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                          true
                                                                                                                          (
                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                              10
                                                                                                                              x2
                                                                                                                              (
                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                  6
                                                                                                                                
                                                                                                                              )
                                                                                                                            
                                                                                                                          )
                                                                                                                         ->
                                                                                                                        Prims.Tot
                                                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                    ))
                                                                                                                  .
                                                                                                                    (
                                                                                                                      fun
                                                                                                                        _
                                                                                                                        ->
                                                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                                                                                    ) ==
                                                                                                                    any_result ==>
                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                    FStar.UInt16.v 
                                                                                                                      (
                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                          6
                                                                                                                        
                                                                                                                      )
                                                                                                                     <
                                                                                                                    10 /\
                                                                                                                    (
                                                                                                                      forall 
                                                                                                                        (x8:
                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                          false
                                                                                                                          (
                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                              10
                                                                                                                              x2
                                                                                                                              (
                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                  6
                                                                                                                                
                                                                                                                              )
                                                                                                                            
                                                                                                                          )
                                                                                                                        )
                                                                                                                      .
                                                                                                                        (*could not prove post-condition*)
                                                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                        FStar.UInt16.v 
                                                                                                                          (
                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                              7
                                                                                                                            
                                                                                                                          )
                                                                                                                         <
                                                                                                                        10 /\
                                                                                                                        (
                                                                                                                          forall 
                                                                                                                            (return_val:
                                                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                                                              10
                                                                                                                            )
                                                                                                                          .
                                                                                                                            return_val ==
                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                              7
                                                                                                                             ==>
                                                                                                                            (
                                                                                                                              forall 
                                                                                                                                (any_result:
                                                                                                                                Prims.bool)
                                                                                                                              .
                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                  10
                                                                                                                                  x2
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      7
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                 ==
                                                                                                                                any_result ==>
                                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                FStar.UInt16.v 
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      7
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                 <
                                                                                                                                10 /\
                                                                                                                                (
                                                                                                                                  forall 
                                                                                                                                    (any_result:
                                                                                                                                    (
                                                                                                                                      
                                                                                                                                        _:
                                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                                          true
                                                                                                                                          (
                                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                              10
                                                                                                                                              x2
                                                                                                                                              (
                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                  7
                                                                                                                                                
                                                                                                                                              )
                                                                                                                                            
                                                                                                                                          )
                                                                                                                                         ->
                                                                                                                                        Prims.Tot
                                                                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                    ))
                                                                                                                                  .
                                                                                                                                    (
                                                                                                                                      fun
                                                                                                                                        _
                                                                                                                                        ->
                                                                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                                                                                                    ) ==
                                                                                                                                    any_result ==>
                                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                    FStar.UInt16.v 
                                                                                                                                      (
                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                          7
                                                                                                                                        
                                                                                                                                      )
                                                                                                                                     <
                                                                                                                                    10 /\
                                                                                                                                    (
                                                                                                                                      forall 
                                                                                                                                        (x6:
                                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                                          false
                                                                                                                                          (
                                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                              10
                                                                                                                                              x2
                                                                                                                                              (
                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                  7
                                                                                                                                                
                                                                                                                                              )
                                                                                                                                            
                                                                                                                                          )
                                                                                                                                        )
                                                                                                                                      .
                                                                                                                                        (*could not prove post-condition*)
                                                                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                        FStar.UInt16.v 
                                                                                                                                          (
                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                              8
                                                                                                                                            
                                                                                                                                          )
                                                                                                                                         <
                                                                                                                                        10 /\
                                                                                                                                        (
                                                                                                                                          forall 
                                                                                                                                            (return_val:
                                                                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                                                                              10
                                                                                                                                            )
                                                                                                                                          .
                                                                                                                                            return_val ==
                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                              8
                                                                                                                                             ==>
                                                                                                                                            (
                                                                                                                                              forall 
                                                                                                                                                (any_result:
                                                                                                                                                Prims.bool)
                                                                                                                                              .
                                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                  10
                                                                                                                                                  x2
                                                                                                                                                  (
                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                      8
                                                                                                                                                    
                                                                                                                                                  )
                                                                                                                                                 ==
                                                                                                                                                any_result ==>
                                                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                FStar.UInt16.v 
                                                                                                                                                  (
                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                      8
                                                                                                                                                    
                                                                                                                                                  )
                                                                                                                                                 <
                                                                                                                                                10 /\
                                                                                                                                                (
                                                                                                                                                  forall 
                                                                                                                                                    (any_result:
                                                                                                                                                    (
                                                                                                                                                      
                                                                                                                                                        _:
                                                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                                                          true
                                                                                                                                                          (
                                                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                              10
                                                                                                                                                              x2
                                                                                                                                                              (
                                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                  8
                                                                                                                                                                
                                                                                                                                                              )
                                                                                                                                                            
                                                                                                                                                          )
                                                                                                                                                         ->
                                                                                                                                                        Prims.Tot
                                                                                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                                                                                                                                                    ))
                                                                                                                                                  .
                                                                                                                                                    (
                                                                                                                                                      fun
                                                                                                                                                        _
                                                                                                                                                        ->
                                                                                                                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                                                                                                    ) ==
                                                                                                                                                    any_result ==>
                                                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                    FStar.UInt16.v 
                                                                                                                                                      (
                                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                                          8
                                                                                                                                                        
                                                                                                                                                      )
                                                                                                                                                     <
                                                                                                                                                    10
                                                                                                                                                )
                                                                                                                                            )
                                                                                                                                        )
                                                                                                                                    )
                                                                                                                                )
                                                                                                                            )
                                                                                                                        )
                                                                                                                    )
                                                                                                                )
                                                                                                            )
                                                                                                        )
                                                                                                    )
                                                                                                ))))
                                                                                )))))))))))))))))))) /\
    (forall (any_result:
        (_: MiniParse.Spec.Int.bounded_u16 10 ->
            Prims.GTot Bench.MiniParse.Size10.Factor1.Seed00.Goal.test)).
        (fun x2 ->
            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                  x2
                  (MiniParse.Spec.Int.mk_u16 0))
              (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
              (fun _ ->
                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                        x2
                        (MiniParse.Spec.Int.mk_u16 1))
                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                    (fun _ ->
                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                              x2
                              (MiniParse.Spec.Int.mk_u16 2))
                          (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                          (fun _ ->
                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                    x2
                                    (MiniParse.Spec.Int.mk_u16 3))
                                (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                                (fun _ ->
                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 4))
                                      (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                                      (fun _ ->
                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                10
                                                x2
                                                (MiniParse.Spec.Int.mk_u16 5))
                                            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                            (fun _ ->
                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                      10
                                                      x2
                                                      (MiniParse.Spec.Int.mk_u16 6))
                                                  (fun _ ->
                                                      Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7)
                                                  (fun _ ->
                                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                            10
                                                            x2
                                                            (MiniParse.Spec.Int.mk_u16 7))
                                                        (fun _ ->
                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                        )
                                                        (fun _ ->
                                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                  10
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 8))
                                                              (fun _ ->
                                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                              )
                                                              (fun _ ->
                                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                              )))))))))) ==
        any_result ==>
        (forall (any_result:
            (
                f2:
                (_: Bench.MiniParse.Size10.Factor1.Seed00.Goal.test ->
                    Prims.GTot (MiniParse.Spec.Int.bounded_u16 10)) ->
                u2394018:
                Prims.squash (MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16' 10
                      Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
                      (fun x2 ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x2
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 3))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 4))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 5))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x2
                                                                    (MiniParse.Spec.Int.mk_u16 6))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                                )
                                                                (fun _ ->
                                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          10
                                                                          x2
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              7))
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                                      )
                                                                      (fun _ ->
                                                                          MiniParse.Tac.Base.mk_if_t 
                                                                            (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                10
                                                                                x2
                                                                                (MiniParse.Spec.Int.mk_u16 
                                                                                    8))
                                                                            (fun _ ->
                                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                            )
                                                                            (fun _ ->
                                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                                            ))))))))))
                      f2) ->
                Prims.Tot
                (Prims.squash (MiniParse.Spec.Combinators.synth_inverse f2
                        (fun x2 ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 0))
                              (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 1))
                                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 2))
                                          (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 3))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 4))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 5))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6
                                                            )
                                                            (fun _ ->
                                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                      10
                                                                      x2
                                                                      (MiniParse.Spec.Int.mk_u16 6))
                                                                  (fun _ ->
                                                                      Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                                  )
                                                                  (fun _ ->
                                                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                            10
                                                                            x2
                                                                            (MiniParse.Spec.Int.mk_u16 
                                                                                7))
  TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
                                                                      (fun _ ->
                                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                                        )
                                                                        (fun _ ->
                                                                            MiniParse.Tac.Base.mk_if_t 
                                                                              (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  10
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      8))
                                                                              (fun _ ->
                                                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                              )
                                                                              (fun _ ->
                                                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                                              ))))))))))))))
            (x1: Bench.MiniParse.Size10.Factor1.Seed00.Goal.test).
            (*could not prove post-condition*)
            C10? x1 == true ==>
            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 9) < 10 /\
            ~(C10? x1 == true) ==>
            (C9? x1 == true ==>
              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 8) < 10) /\
            (~(C9? x1 == true) ==>
              C8? x1 == true ==>
              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 7) < 10 /\
              ~(C8? x1 == true) ==>
              (C7? x1 == true ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 6) < 10) /\
              (~(C7? x1 == true) ==>
                C6? x1 == true ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 5) < 10 /\
                ~(C6? x1 == true) ==>
                (C5? x1 == true ==>
                  (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                  FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 4) < 10) /\
                (~(C5? x1 == true) ==>
                  C4? x1 == true ==>
                  (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                  FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) < 10 /\
                  ~(C4? x1 == true) ==>
                  (C3? x1 == true ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 10) /\
                  (~(C3? x1 == true) ==>
                    C2? x1 == true ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                    ~(C2? x1 == true) ==>
                    (C1? x1 == true ==>
                      (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                      FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10) /\
                    (~(C1? x1 == true) ==>
                      (forall (b: Bench.MiniParse.Size10.Factor1.Seed00.Goal.test).
                          x1 == b ==>
                          (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                          FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 9) < 10)))))))))
SMT goals (0):

TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> No goals left
TAC>> gen_parser_impl spits:
TAC>> MiniParse.Impl.Combinators.parse_synth_impl (MiniParse.Impl.Int.parse_bounded_u16_impl 7)
  (fun x2 ->
      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
            x2
            (MiniParse.Spec.Int.mk_u16 0))
        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
        (fun _ ->
            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                  x2
                  (MiniParse.Spec.Int.mk_u16 1))
              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
              (fun _ ->
                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                        x2
                        (MiniParse.Spec.Int.mk_u16 2))
                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                    (fun _ ->
                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                              x2
                              (MiniParse.Spec.Int.mk_u16 3))
                          (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                          (fun _ ->
                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                    x2
                                    (MiniParse.Spec.Int.mk_u16 4))
                                (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                                (fun _ ->
                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 5))
                                      (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6)
                                      (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7)))))))
  (fun x0 ->
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6)
                                          (fun _ -> Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7))))
                  ))) x0)
  (fun x1 ->
      (match x1 with
        | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C7 ->
          MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7
        | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C6 ->
          MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 7
        | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C5 ->
          MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 7
        | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C4 ->
          MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 7
        | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C3 ->
          MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 7
        | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C2 ->
          MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 7
        | Bench.MiniParse.Size7.Factor1.Seed00.Goal.C1 ->
          MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 7
        | _ -> MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7)
      <:
      MiniParse.Spec.Int.bounded_u16 7)
  ()
Tactic fun _ ->
  MiniParse.Tac.Impl.gen_parser_impl (FStar.Tactics.Types.Goal)
  <:
  FStar.Tactics.Effect.TAC Prims.unit ran in 79286 ms (Goal)
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
Verified module: Bench.MiniParse.Size7.Factor1.Seed00.Goal (114296 milliseconds)
All verification conditions discharged successfully
TAC>> Applied: implies_intro
../../../bin/fstar.exe --cache_off --odir _output --cache_dir _cache Bench.MiniParse.Size10.Factor10.Seed00.Goal.fst --include ..
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: reflexivity
TAC>> Success: reflexivity
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: synth_inverse_forall_bounded_u16_solve, main goal
TAC>> Success: synth_inverse_forall_bounded_u16_solve, main goal
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
proof-state: State dump @ depth 46 (Some goals left):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Tac.Base.fst(169,4-169,28)
ACTIVE goals (1):
(x:
(_: MiniParse.Spec.Int.bounded_u16 7 -> Prims.GTot Bench.MiniParse.Size7.Factor10.Seed00.Goal.test)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7))))))) ==
x), (x:
(
    f2':
    (x: MiniParse.Spec.Int.bounded_u16 7 ->
        Prims.Tot
        (y:
          Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
            { y ==
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                    x
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                          x
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x
                                      (MiniParse.Spec.Int.mk_u16 3))
                                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x
                                            (MiniParse.Spec.Int.mk_u16 4))
                                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x
                                                  (MiniParse.Spec.Int.mk_u16 5))
                                              (fun _ ->
                                                  Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                              (fun _ ->
                                                  Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7)))))
                ) })) ->
    g1:
    (_: Bench.MiniParse.Size7.Factor10.Seed00.Goal.test ->
        Prims.GTot (MiniParse.Spec.Int.bounded_u16 7)) ->
    u1268857:
    u1268886:
    Prims.unit
      { MiniParse.Spec.Combinators.synth_inverse g1
          (fun x2 ->
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                    x2
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                          x2
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x2
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 3))
                                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 4))
                                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 5))
                                              (fun _ ->
                                                  Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                              (fun _ ->
                                                  Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7)))))
                )) } ->
    Prims.Tot
    (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                7)
            (fun x2 ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x2
                      (MiniParse.Spec.Int.mk_u16 0))
                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 1))
                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 2))
                              (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 3))
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 4))
                                          (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    7
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 5))
                                                (fun _ ->
                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                                (fun _ ->
                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7)))
                              ))))
            g1)))), (x:
(x: MiniParse.Spec.Int.bounded_u16 7 ->
    Prims.Tot
    (y:
      Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
        { y ==
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                          (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7)))
                        ))) }))), (_:
(fun x0 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7 x0 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x0
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x0
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x0
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x0
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x0
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7))))))) ==
x), (x:
(
    g1:
    (_: Bench.MiniParse.Size7.Factor10.Seed00.Goal.test ->
        Prims.GTot (MiniParse.Spec.Int.bounded_u16 7)) ->
    u1268928:
    u1268943:
    Prims.unit
      { MiniParse.Spec.Combinators.synth_inverse g1
          (fun x2 ->
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                    x2
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                          x2
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x2
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 3))
                                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 4))
                                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 5))
                                              (fun _ ->
                                                  Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                              (fun _ ->
                                                  Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7)))))
                )) } ->
    Prims.Tot
    (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                7)
            (fun x2 ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x2
                      (MiniParse.Spec.Int.mk_u16 0))
                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 1))
                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 2))
                              (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 3))
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 4))
                                          (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    7
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 5))
                                                (fun _ ->
                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                                (fun _ ->
                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7)))
                              ))))
            g1)))), (x:
(_: Bench.MiniParse.Size7.Factor10.Seed00.Goal.test -> Prims.GTot (MiniParse.Spec.Int.bounded_u16 7)
)), (_:
(fun x1 ->
    (match x1 with
      | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7 ->
        MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7
      | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6 ->
        MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 7
      | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5 ->
        MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 7
      | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4 ->
        MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 7
      | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3 ->
        MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 7
      | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2 ->
        MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 7
      | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1 ->
        MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 7
      | _ -> MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7)
    <:
    MiniParse.Spec.Int.bounded_u16 7) ==
x), (x:
(
    u1268960:
    u1268976:
    Prims.unit
      { MiniParse.Spec.Combinators.synth_inverse (fun x1 ->
              (match x1 with
                | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7 ->
                  MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7
                | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6 ->
                  MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 7
                | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5 ->
                  MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 7
                | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4 ->
                  MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 7
                | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3 ->
                  MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 7
                | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2 ->
                  MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 7
                | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1 ->
                  MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 7
                | _ -> MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7)
              <:
              MiniParse.Spec.Int.bounded_u16 7)
          (fun x2 ->
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                    x2
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                          x2
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x2
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 3))
                                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 4))
                                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 5))
                                              (fun _ ->
                                                  Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                              (fun _ ->
                                                  Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7)))))
                )) } ->
    Prims.Tot
    (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                7)
            (fun x2 ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x2
                      (MiniParse.Spec.Int.mk_u16 0))
                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 1))
                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 2))
                              (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 3))
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 4))
                                          (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    7
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 5))
                                                (fun _ ->
                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                                (fun _ ->
                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7)))
                              ))))
            (fun x1 ->
                (match x1 with
                  | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7 ->
                    MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7
                  | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6 ->
                    MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 7
                  | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5 ->
                    MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 7
                  | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4 ->
                    MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 7
                  | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3 ->
                    MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 7
                  | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2 ->
                    MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 7
                  | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1 ->
                    MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 7
                  | _ -> MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7)
                <:
                MiniParse.Spec.Int.bounded_u16 7))))) |- _ : Prims.squash ((forall (x2: MiniParse.Spec.Int.bounded_u16 7).
        (*could not prove post-condition*)
        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
        (forall (return_val: MiniParse.Spec.Int.bounded_u16 7).
            return_val == MiniParse.Spec.Int.mk_u16 0 ==>
            (forall (any_result: Prims.bool).
                MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0) == any_result ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
                (forall (any_result:
                    (
                        _:
                        MiniParse.Tac.Base.ctest true
                          (MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0)) ->
                        Prims.Tot Bench.MiniParse.Size7.Factor10.Seed00.Goal.test)).
                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1) == any_result ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
                    (forall (x14:
                        MiniParse.Tac.Base.ctest false
                          (MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0))).
                        (*could not prove post-condition*)
                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7 /\
                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 7).
                            return_val == MiniParse.Spec.Int.mk_u16 1 ==>
                            (forall (any_result: Prims.bool).
                                MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 1) ==
                                any_result ==>
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7 /\
                                (forall (any_result:
                                    (
                                        _:
                                        MiniParse.Tac.Base.ctest true
                                          (MiniParse.Spec.Int.bounded_u16_eq 7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1)) ->
                                        Prims.Tot Bench.MiniParse.Size7.Factor10.Seed00.Goal.test)).
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2) ==
                                    any_result ==>
                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7 /\
                                    (forall (x12:
                                        MiniParse.Tac.Base.ctest false
                                          (MiniParse.Spec.Int.bounded_u16_eq 7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1))).
                                        (*could not prove post-condition*)
                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 7 /\
                                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 7).
                                            return_val == MiniParse.Spec.Int.mk_u16 2 ==>
                                            (forall (any_result: Prims.bool).
                                                MiniParse.Spec.Int.bounded_u16_eq 7
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 2) ==
                                                any_result ==>
                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 7 /\
                                                (forall (any_result:
                                                    (
                                                        _:
                                                        MiniParse.Tac.Base.ctest true
                                                          (MiniParse.Spec.Int.bounded_u16_eq 7
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2)) ->
                                                        Prims.Tot
                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                    )).
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3
                                                    ) ==
                                                    any_result ==>
                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 7 /\
                                                    (forall (x10:
                                                        MiniParse.Tac.Base.ctest false
                                                          (MiniParse.Spec.Int.bounded_u16_eq 7
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2))).
                                                        (*could not prove post-condition*)
                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) <
                                                        7 /\
                                                        (forall (return_val:
                                                            MiniParse.Spec.Int.bounded_u16 7).
                                                            return_val ==
                                                            MiniParse.Spec.Int.mk_u16 3 ==>
                                                            (forall (any_result: Prims.bool).
                                                                MiniParse.Spec.Int.bounded_u16_eq 7
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 3) ==
                                                                any_result ==>
                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                      3) <
                                                                7 /\
                                                                (forall (any_result:
                                                                    (
                                                                        _:
                                                                        MiniParse.Tac.Base.ctest true
                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                              7
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  3)) ->
                                                                        Prims.Tot
                                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                    )).
                                                                    (fun _ ->
                                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4
                                                                    ) ==
                                                                    any_result ==>
                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                          3) <
                                                                    7 /\
                                                                    (forall (x8:
                                                                        MiniParse.Tac.Base.ctest false
                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                              7
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  3))).
                                                                        (*could not prove post-condition*)
                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                              4) <
                                                                        7 /\
                                                                        (forall (return_val:
                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                              7).
                                                                            return_val ==
                                                                            MiniParse.Spec.Int.mk_u16 
                                                                              4 ==>
                                                                            (forall (any_result:
                                                                                Prims.bool).
                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  7
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      4) ==
                                                                                any_result ==>
                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                      4) <
                                                                                7 /\
                                                                                (forall (any_result:
                                                                                    (
                                                                                        _:
                                                                                        MiniParse.Tac.Base.ctest 
                                                                                          true
                                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                              7
                                                                                              x2
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  4)
                                                                                          ) ->
                                                                                        Prims.Tot
                                                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                                    )).
                                                                                    (fun _ ->
                                                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5
                                                                                    ) ==
                                                                                    any_result ==>
                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                          4) <
                                                                                    7 /\
                                                                                    (forall (x6:
                                                                                        MiniParse.Tac.Base.ctest 
                                                                                          false
                                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                              7
                                                                                              x2
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  4)
                                                                                          )).
                                                                                        (*could not prove post-condition*)
                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                        FStar.UInt16.v 
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              5) <
                                                                                        7 /\
                                                                                        (forall (return_val:
                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                              7).
                                                                                            return_val ==
                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                              5 ==>
                                                                                            (forall (any_result:
                                                                                                Prims.bool)
                                                                                              .
                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                  7
                                                                                                  x2
                                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                                      5
                                                                                                    
                                                                                                  ) ==
                                                                                                any_result ==>
                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                FStar.UInt16.v 
                                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                                      5
                                                                                                    
                                                                                                  ) <
                                                                                                7 /\
                                                                                                (forall 
                                                                                                    (any_result:
                                                                                                    (
                                                                                                      
                                                                                                        _:
                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                          true
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                              7
                                                                                                              x2
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                  5
                                                                                                                
                                                                                                              )
                                                                                                            
                                                                                                          )
                                                                                                         ->
                                                                                                        Prims.Tot
                                                                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                                                                                                    ))
                                                                                                  .
                                                                                                    (
                                                                                                      fun
                                                                                                        _
                                                                                                        ->
                                                                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6
                                                                                                    ) ==
                                                                                                    any_result ==>
                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                                                                                                    FStar.UInt16.v 
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                          5
                                                                                                        
                                                                                                      )
                                                                                                     <
                                                                                                    7
                                                                                                ))))
                                                                                )))))))))))))))))))) /\
    (forall (any_result:
        (_: MiniParse.Spec.Int.bounded_u16 7 ->
            Prims.GTot Bench.MiniParse.Size7.Factor10.Seed00.Goal.test)).
        (fun x2 ->
            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                  x2
                  (MiniParse.Spec.Int.mk_u16 0))
              (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
              (fun _ ->
                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                        x2
                        (MiniParse.Spec.Int.mk_u16 1))
                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                    (fun _ ->
                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                              x2
                              (MiniParse.Spec.Int.mk_u16 2))
                          (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                          (fun _ ->
                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                    x2
                                    (MiniParse.Spec.Int.mk_u16 3))
                                (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                                (fun _ ->
                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 4))
                                      (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                                      (fun _ ->
                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                7
                                                x2
                                                (MiniParse.Spec.Int.mk_u16 5))
                                            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7)
                                      )))))) ==
        any_result ==>
        (forall (any_result:
            (
                f2:
                (_: Bench.MiniParse.Size7.Factor10.Seed00.Goal.test ->
                    Prims.GTot (MiniParse.Spec.Int.bounded_u16 7)) ->
                u1269171:
                Prims.squash (MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16' 7
                      Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
                      (fun x2 ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x2
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 3))
                                              (fun _ ->
                                                  Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        7
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 4))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              7
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 5))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6
                                                          )
                                                          (fun _ ->
                                                              Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7
                                                          )))))))
                      f2) ->
                Prims.Tot
                (Prims.squash (MiniParse.Spec.Combinators.synth_inverse f2
                        (fun x2 ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 0))
                              (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 1))
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 2))
                                          (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    7
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 3))
                                                (fun _ ->
                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          7
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 4))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                7
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 5))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6
                                                            )
                                                            (fun _ ->
                                                                Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7
                                                            )))))))))))
            (x1: Bench.MiniParse.Size7.Factor10.Seed00.Goal.test).
            (*could not prove post-condition*)
            C7? x1 == true ==>
            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 6) < 7 /\
            ~(C7? x1 == true) ==>
            (C6? x1 == true ==>
              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 5) < 7) /\
            (~(C6? x1 == true) ==>
              C5? x1 == true ==>
              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 4) < 7 /\
              ~(C5? x1 == true) ==>
              (C4? x1 == true ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) < 7) /\
              (~(C4? x1 == true) ==>
                C3? x1 == true ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 7 /\
                ~(C3? x1 == true) ==>
                (C2? x1 == true ==>
                  (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                  FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 7) /\
                (~(C2? x1 == true) ==>
                  C1? x1 == true ==>
                  (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                  FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 7 /\
                  ~(C1? x1 == true) ==>
                  (forall (b: Bench.MiniParse.Size7.Factor10.Seed00.Goal.test).
                      x1 == b ==>
                      (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 7; got type FStar.UInt16.t*)
                      FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 6) < 7)))))))
SMT goals (0):

TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
/home/guido/r/fstar/examples/miniparse/MiniParse.Spec.List.fst(106,54-106,65): (Warning 288) FStar.Seq.Base.createEmpty is deprecated, use Seq.empty instead
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Unfolded definition: MiniParse.Tac.Spec.t
TAC>> Applied: implies_intro
TAC>> Unfolded definition: MiniParse.Tac.Spec.u8
TAC>> Unfolded definition: MiniParse.Tac.Spec.u8
TAC>> Unfolded definition: MiniParse.Tac.Spec.u8
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> No goals left
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Applied: forall_intro
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Unfolded definition: MiniParse.Tac.Impl.p
TAC>> No goals left
TAC>> Applied: forall_intro
TAC>> gen_parser_impl spits:
TAC>> MiniParse.Impl.Combinators.parse_nondep_then_impl MiniParse.Impl.Int.parse_u8_impl
  (MiniParse.Impl.Combinators.parse_ret_impl 42)
TAC>> Applied: forall_intro
TAC>> Unfolded definition: MiniParse.Tac.Impl.p'
TAC>> Unfolded definition: MiniParse.Tac.Impl.p
TAC>> No goals left
TAC>> gen_parser_impl spits:
TAC>> MiniParse.Impl.Combinators.parse_nondep_then_impl #(FStar.UInt8.t * Prims.int)
  #MiniParse.Tac.Impl.p
  (MiniParse.Impl.Combinators.parse_nondep_then_impl #FStar.UInt8.t
      #MiniParse.Spec.Int.parse_u8
      MiniParse.Impl.Int.parse_u8_impl
      #Prims.int
      #(MiniParse.Spec.Combinators.parse_ret #Prims.int 42)
      (MiniParse.Impl.Combinators.parse_ret_impl #Prims.int 42))
  #FStar.UInt8.t
  #MiniParse.Spec.Int.parse_u8
  MiniParse.Impl.Int.parse_u8_impl
TAC>> Applied: implies_intro
TAC>> Unfolded definition: MiniParse.Tac.Impl.r
TAC>> No goals left
TAC>> gen_parser_impl spits:
TAC>> MiniParse.Impl.Combinators.parse_synth_impl #Prims.int
  #Prims.int
  #(MiniParse.Spec.Combinators.parse_ret #Prims.int 42)
  (MiniParse.Impl.Combinators.parse_ret_impl #Prims.int 42)
  (fun x -> x + 1)
  (fun x0 -> (fun x -> x + 1) x0)
  (fun x -> x - 1)
  ()
TAC>> Unfolded definition: MiniParse.Tac.Impl.j
TAC>> Unfolded definition: MiniParse.Tac.Spec.p
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> No goals left
TAC>> gen_parser_impl spits:
TAC>> MiniParse.Impl.Combinators.parse_nondep_then_impl #MiniParse.Tac.Spec.u8
  #MiniParse.Spec.Int.parse_u8
  MiniParse.Impl.Int.parse_u8_impl
  #(MiniParse.Spec.List.nlist 79 MiniParse.Tac.Spec.u8 * MiniParse.Tac.Spec.u8)
  #(MiniParse.Spec.Combinators.nondep_then #(MiniParse.Spec.List.nlist 79 MiniParse.Tac.Spec.u8)
      (MiniParse.Spec.List.parse_nlist 79 #MiniParse.Tac.Spec.u8 MiniParse.Spec.Int.parse_u8)
      #MiniParse.Tac.Spec.u8
      MiniParse.Spec.Int.parse_u8)
  (MiniParse.Impl.Combinators.parse_nondep_then_impl #(MiniParse.Spec.List.nlist 79
          MiniParse.Tac.Spec.u8)
      #(MiniParse.Spec.List.parse_nlist 79 #MiniParse.Tac.Spec.u8 MiniParse.Spec.Int.parse_u8)
      (MiniParse.Impl.List.parse_nlist_impl 79
          (MiniParse.Tac.Impl.mk_u32 79)
          #MiniParse.Tac.Spec.u8
          #MiniParse.Spec.Int.parse_u8
          MiniParse.Impl.Int.parse_u8_impl)
      #MiniParse.Tac.Spec.u8
      #MiniParse.Spec.Int.parse_u8
      MiniParse.Impl.Int.parse_u8_impl)
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Inductive type with 10
TAC>> Applied: forall_intro
TAC>> function
| Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10 ->
  MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10
| Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9 ->
  MiniParse.Spec.Int.mk_u16 8 <: MiniParse.Spec.Int.bounded_u16 10
| Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8 ->
  MiniParse.Spec.Int.mk_u16 7 <: MiniParse.Spec.Int.bounded_u16 10
| Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7 ->
  MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 10
| Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6 ->
  MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 10
| Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5 ->
  MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 10
| Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4 ->
  MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 10
| Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3 ->
  MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 10
| Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2 ->
  MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 10
| Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1 ->
  MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 10
| _ -> MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> No goals left
TAC>> Checking success for: synth_inverse_forall_bounded_u16_solve
TAC>> Success: synth_inverse_forall_bounded_u16_solve
TAC>> Checking success for: return_squash imm_solve
TAC>> Success: return_squash imm_solve
TAC>> Applied: implies_intro
proof-state: State dump @ depth 2 (Some goals left):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Tac.Base.fst(169,4-169,28)
ACTIVE goals (1):
 |- _ : Prims.squash ((forall (x2: MiniParse.Spec.Int.bounded_u16 10).
        (*could not prove post-condition*)
        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10 /\
        (forall (return_val: MiniParse.Spec.Int.bounded_u16 10).
            return_val == MiniParse.Spec.Int.mk_u16 0 ==>
            (forall (any_result: Prims.bool).
                MiniParse.Spec.Int.bounded_u16_eq 10 x2 (MiniParse.Spec.Int.mk_u16 0) == any_result ==>
                (forall (any_result:
                    (
                        x1:
                        (
                            _:
                            MiniParse.Tac.Base.ctest true
                              (MiniParse.Spec.Int.bounded_u16_eq 10 x2 (MiniParse.Spec.Int.mk_u16 0)
                              ) ->
                            Prims.Tot Bench.MiniParse.Size10.Factor10.Seed00.Goal.test) ->
                        x2:
                        (
                            _:
                            MiniParse.Tac.Base.ctest false
                              (MiniParse.Spec.Int.bounded_u16_eq 10 x2 (MiniParse.Spec.Int.mk_u16 0)
                              ) ->
                            Prims.Tot Bench.MiniParse.Size10.Factor10.Seed00.Goal.test) ->
                        Prims.Tot Bench.MiniParse.Size10.Factor10.Seed00.Goal.test)).
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10 /\
                    (forall (any_result:
                        (
                            _:
                            MiniParse.Tac.Base.ctest true
                              (MiniParse.Spec.Int.bounded_u16_eq 10 x2 (MiniParse.Spec.Int.mk_u16 0)
                              ) ->
                            Prims.Tot Bench.MiniParse.Size10.Factor10.Seed00.Goal.test)).
                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1) == any_result ==>
                        (forall (any_result:
                            (
                                x2:
                                (
                                    _:
                                    MiniParse.Tac.Base.ctest false
                                      (MiniParse.Spec.Int.bounded_u16_eq 10
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 0)) ->
                                    Prims.Tot Bench.MiniParse.Size10.Factor10.Seed00.Goal.test) ->
                                Prims.Tot Bench.MiniParse.Size10.Factor10.Seed00.Goal.test)).
                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10 /\
                            (forall (x20:
                                MiniParse.Tac.Base.ctest false
                                  (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 0))).
                                (*could not prove post-condition*)
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                                (forall (return_val: MiniParse.Spec.Int.bounded_u16 10).
                                    return_val == MiniParse.Spec.Int.mk_u16 1 ==>
                                    (forall (any_result: Prims.bool).
                                        MiniParse.Spec.Int.bounded_u16_eq 10
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 1) ==
                                        any_result ==>
                                        (forall (any_result:
                                            (
                                                x1:
                                                (
                                                    _:
                                                    MiniParse.Tac.Base.ctest true
                                                      (MiniParse.Spec.Int.bounded_u16_eq 10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 1)) ->
                                                    Prims.Tot
                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                ) ->
                                                x2:
                                                (
                                                    _:
                                                    MiniParse.Tac.Base.ctest false
                                                      (MiniParse.Spec.Int.bounded_u16_eq 10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 1)) ->
                                                    Prims.Tot
                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                ) ->
                                                Prims.Tot
                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.test)).
                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                                            (forall (any_result:
                                                (
                                                    _:
                                                    MiniParse.Tac.Base.ctest true
                                                      (MiniParse.Spec.Int.bounded_u16_eq 10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 1)) ->
                                                    Prims.Tot
                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                )).
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2) ==
                                                any_result ==>
                                                (forall (any_result:
                                                    (
                                                        x2:
                                                        (
                                                            _:
                                                            MiniParse.Tac.Base.ctest false
                                                              (MiniParse.Spec.Int.bounded_u16_eq 10
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 1)) ->
                                                            Prims.Tot
                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                        ) ->
                                                        Prims.Tot
                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                    )).
                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) <
                                                    10 /\
                                                    (forall (x18:
                                                        MiniParse.Tac.Base.ctest false
                                                          (MiniParse.Spec.Int.bounded_u16_eq 10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 1))).
                                                        (*could not prove post-condition*)
                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) <
                                                        10 /\
                                                        (forall (return_val:
                                                            MiniParse.Spec.Int.bounded_u16 10).
                                                            return_val ==
                                                            MiniParse.Spec.Int.mk_u16 2 ==>
                                                            (forall (any_result: Prims.bool).
                                                                MiniParse.Spec.Int.bounded_u16_eq 10
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 2) ==
                                                                any_result ==>
                                                                (forall (any_result:
                                                                    (
                                                                        x1:
                                                                        (
                                                                            _:
                                                                            MiniParse.Tac.Base.ctest 
                                                                              true
                                                                              (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  10
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      2)) ->
                                                                            Prims.Tot
                                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                        ) ->
                                                                        x2:
                                                                        (
                                                                            _:
                                                                            MiniParse.Tac.Base.ctest 
                                                                              false
                                                                              (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  10
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      2)) ->
                                                                            Prims.Tot
                                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                        ) ->
                                                                        Prims.Tot
                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                    )).
                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                          2) <
                                                                    10 /\
                                                                    (forall (any_result:
                                                                        (
                                                                            _:
                                                                            MiniParse.Tac.Base.ctest 
                                                                              true
                                                                              (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  10
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      2)) ->
                                                                            Prims.Tot
                                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                        )).
                                                                        (fun _ ->
                                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3
                                                                        ) ==
                                                                        any_result ==>
                                                                        (forall (any_result:
                                                                            (
                                                                                x2:
                                                                                (
                                                                                    _:
                                                                                    MiniParse.Tac.Base.ctest 
                                                                                      false
                                                                                      (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                          10
                                                                                          x2
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              2)) ->
                                                                                    Prims.Tot
                                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                ) ->
                                                                                Prims.Tot
                                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                            )).
                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                  2) <
                                                                            10 /\
                                                                            (forall (x16:
                                                                                MiniParse.Tac.Base.ctest 
                                                                                  false
                                                                                  (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                      10
                                                                                      x2
                                                                                      (MiniParse.Spec.Int.mk_u16 
                                                                                          2))).
                                                                                (*could not prove post-condition*)
                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                      3) <
                                                                                10 /\
                                                                                (forall (return_val:
                                                                                    MiniParse.Spec.Int.bounded_u16 
                                                                                      10).
                                                                                    return_val ==
                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                      3 ==>
                                                                                    (forall (any_result:
                                                                                        Prims.bool).
                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                          10
                                                                                          x2
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              3) ==
                                                                                        any_result ==>
                                                                                        (forall (any_result:
                                                                                            (
                                                                                                x1:
                                                                                                (
                                                                                                    _:
                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                      true
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                          10
                                                                                                          x2
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              3
                                                                                                            
                                                                                                          )
                                                                                                        
                                                                                                      )
                                                                                                     ->
                                                                                                    Prims.Tot
                                                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                ) ->
                                                                                                x2:
                                                                                                (
                                                                                                    _:
                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                      false
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                          10
                                                                                                          x2
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              3
                                                                                                            
                                                                                                          )
                                                                                                        
                                                                                                      )
                                                                                                     ->
                                                                                                    Prims.Tot
                                                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                ) ->
                                                                                                Prims.Tot
                                                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                            )).
                                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                            FStar.UInt16.v 
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  3) <
                                                                                            10 /\
                                                                                            (forall (any_result:
                                                                                                (
                                                                                                    _:
                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                      true
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                          10
                                                                                                          x2
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              3
                                                                                                            
                                                                                                          )
                                                                                                        
                                                                                                      )
                                                                                                     ->
                                                                                                    Prims.Tot
                                                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                )).
                                                                                                (fun
                                                                                                    _
                                                                                                    ->
                                                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4
                                                                                                ) ==
                                                                                                any_result ==>
                                                                                                (forall 
                                                                                                    (any_result:
                                                                                                    (
                                                                                                      
                                                                                                        x2:
                                                                                                        (
                                                                                                          
                                                                                                            _:
                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                              false
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                  10
                                                                                                                  x2
                                                                                                                  (
                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                      3
                                                                                                                    
                                                                                                                  )
                                                                                                                
                                                                                                              )
                                                                                                             ->
                                                                                                            Prims.Tot
                                                                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                        ) ->
                                                                                                        Prims.Tot
                                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                    ))
                                                                                                  .
                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                    FStar.UInt16.v 
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                          3
                                                                                                        
                                                                                                      )
                                                                                                     <
                                                                                                    10 /\
                                                                                                    (
                                                                                                      forall 
                                                                                                        (x14:
                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                          false
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                              10
                                                                                                              x2
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                  3
                                                                                                                
                                                                                                              )
                                                                                                            
                                                                                                          )
                                                                                                        )
                                                                                                      .
                                                                                                        (*could not prove post-condition*)
                                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                        FStar.UInt16.v 
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              4
                                                                                                            
                                                                                                          )
                                                                                                         <
                                                                                                        10 /\
                                                                                                        (
                                                                                                          forall 
                                                                                                            (return_val:
                                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                                              10
                                                                                                            )
                                                                                                          .
                                                                                                            return_val ==
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              4
                                                                                                             ==>
                                                                                                            (
                                                                                                              forall 
                                                                                                                (any_result:
                                                                                                                Prims.bool)
                                                                                                              .
                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                  10
                                                                                                                  x2
                                                                                                                  (
                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                      4
                                                                                                                    
                                                                                                                  )
                                                                                                                 ==
                                                                                                                any_result ==>
                                                                                                                (
                                                                                                                  forall 
                                                                                                                    (any_result:
                                                                                                                    (
                                                                                                                      
                                                                                                                        x1:
                                                                                                                        (
                                                                                                                          
                                                                                                                            _:
                                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                                              true
                                                                                                                              (
                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                  10
                                                                                                                                  x2
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      4
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                
                                                                                                                              )
                                                                                                                             ->
                                                                                                                            Prims.Tot
                                                                                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                        ) ->
                                                                                                                        x2:
                                                                                                                        (
                                                                                                                          
                                                                                                                            _:
                                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                                              false
                                                                                                                              (
                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                  10
                                                                                                                                  x2
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      4
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                
                                                                                                                              )
                                                                                                                             ->
                                                                                                                            Prims.Tot
                                                                                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                        ) ->
                                                                                                                        Prims.Tot
                                                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                    ))
                                                                                                                  .
                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                    FStar.UInt16.v 
                                                                                                                      (
                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                          4
                                                                                                                        
                                                                                                                      )
                                                                                                                     <
                                                                                                                    10 /\
                                                                                                                    (
                                                                                                                      forall 
                                                                                                                        (any_result:
                                                                                                                        (
                                                                                                                          
                                                                                                                            _:
                                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                                              true
                                                                                                                              (
                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                  10
                                                                                                                                  x2
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      4
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                
                                                                                                                              )
                                                                                                                             ->
                                                                                                                            Prims.Tot
                                                                                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                        ))
                                                                                                                      .
                                                                                                                        (
                                                                                                                          fun
                                                                                                                            _
                                                                                                                            ->
                                                                                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5
                                                                                                                        ) ==
                                                                                                                        any_result ==>
                                                                                                                        (
                                                                                                                          forall 
                                                                                                                            (any_result:
                                                                                                                            (
                                                                                                                              
                                                                                                                                x2:
                                                                                                                                (
                                                                                                                                  
                                                                                                                                    _:
                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                      false
                                                                                                                                      (
                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                          10
                                                                                                                                          x2
                                                                                                                                          (
                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                              4
                                                                                                                                            
                                                                                                                                          )
                                                                                                                                        
                                                                                                                                      )
                                                                                                                                     ->
                                                                                                                                    Prims.Tot
                                                                                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                ) ->
                                                                                                                                Prims.Tot
                                                                                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                            ))
                                                                                                                          .
                                                                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                            FStar.UInt16.v 
                                                                                                                              (
                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                  4
                                                                                                                                
                                                                                                                              )
                                                                                                                             <
                                                                                                                            10 /\
                                                                                                                            (
                                                                                                                              forall 
                                                                                                                                (x12:
                                                                                                                                MiniParse.Tac.Base.ctest 
                                                                                                                                  false
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                      10
                                                                                                                                      x2
                                                                                                                                      (
                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                          4
                                                                                                                                        
                                                                                                                                      )
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                )
                                                                                                                              .
                                                                                                                                (*could not prove post-condition*)
                                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                FStar.UInt16.v 
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      5
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                 <
                                                                                                                                10 /\
                                                                                                                                (
                                                                                                                                  forall 
                                                                                                                                    (return_val:
                                                                                                                                    MiniParse.Spec.Int.bounded_u16 
                                                                                                                                      10
                                                                                                                                    )
                                                                                                                                  .
                                                                                                                                    return_val ==
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      5
                                                                                                                                     ==>
                                                                                                                                    (
                                                                                                                                      forall 
                                                                                                                                        (any_result:
                                                                                                                                        Prims.bool)
                                                                                                                                      .
                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                          10
                                                                                                                                          x2
                                                                                                                                          (
                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                              5
                                                                                                                                            
                                                                                                                                          )
                                                                                                                                         ==
                                                                                                                                        any_result ==>
                                                                                                                                        (
                                                                                                                                          forall 
                                                                                                                                            (any_result:
                                                                                                                                            (
                                                                                                                                              
                                                                                                                                                x1:
                                                                                                                                                (
                                                                                                                                                  
                                                                                                                                                    _:
                                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                                      true
                                                                                                                                                      (
                                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                          10
                                                                                                                                                          x2
                                                                                                                                                          (
                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                              5
                                                                                                                                                            
                                                                                                                                                          )
                                                                                                                                                        
                                                                                                                                                      )
                                                                                                                                                     ->
                                                                                                                                                    Prims.Tot
                                                                                                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                                ) ->
                                                                                                                                                x2:
                                                                                                                                                (
                                                                                                                                                  
                                                                                                                                                    _:
                                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                                      false
                                                                                                                                                      (
                                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                          10
                                                                                                                                                          x2
                                                                                                                                                          (
                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                              5
                                                                                                                                                            
                                                                                                                                                          )
                                                                                                                                                        
                                                                                                                                                      )
                                                                                                                                                     ->
                                                                                                                                                    Prims.Tot
                                                                                                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                                ) ->
                                                                                                                                                Prims.Tot
                                                                                                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                            ))
                                                                                                                                          .
                                                                                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                            FStar.UInt16.v 
                                                                                                                                              (
                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                  5
                                                                                                                                                
                                                                                                                                              )
                                                                                                                                             <
                                                                                                                                            10 /\
                                                                                                                                            (
                                                                                                                                              forall 
                                                                                                                                                (any_result:
                                                                                                                                                (
                                                                                                                                                  
                                                                                                                                                    _:
                                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                                      true
                                                                                                                                                      (
                                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                          10
                                                                                                                                                          x2
                                                                                                                                                          (
                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                              5
                                                                                                                                                            
                                                                                                                                                          )
                                                                                                                                                        
                                                                                                                                                      )
                                                                                                                                                     ->
                                                                                                                                                    Prims.Tot
                                                                                                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                                ))
                                                                                                                                              .
                                                                                                                                                (
                                                                                                                                                  fun
                                                                                                                                                    _
                                                                                                                                                    ->
                                                                                                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6
                                                                                                                                                ) ==
                                                                                                                                                any_result ==>
                                                                                                                                                (
                                                                                                                                                  forall 
                                                                                                                                                    (any_result:
                                                                                                                                                    (
                                                                                                                                                      
                                                                                                                                                        x2:
                                                                                                                                                        (
                                                                                                                                                          
                                                                                                                                                            _:
                                                                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                                                                              false
                                                                                                                                                              (
                                                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                  10
                                                                                                                                                                  x2
                                                                                                                                                                  (
                                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                      5
                                                                                                                                                                    
                                                                                                                                                                  )
                                                                                                                                                                
                                                                                                                                                              )
                                                                                                                                                             ->
                                                                                                                                                            Prims.Tot
                                                                                                                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                                        ) ->
                                                                                                                                                        Prims.Tot
                                                                                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                                    ))
                                                                                                                                                  .
                                                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                    FStar.UInt16.v 
                                                                                                                                                      (
                                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                                          5
                                                                                                                                                        
                                                                                                                                                      )
                                                                                                                                                     <
                                                                                                                                                    10 /\
                                                                                                                                                    (
                                                                                                                                                      forall 
                                                                                                                                                        (x10:
                                                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                                                          false
                                                                                                                                                          (
                                                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                              10
                                                                                                                                                              x2
                                                                                                                                                              (
                                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                  5
                                                                                                                                                                
                                                                                                                                                              )
                                                                                                                                                            
                                                                                                                                                          )
                                                                                                                                                        )
                                                                                                                                                      .
                                                                                                                                                        (*could not prove post-condition*)
                                                                                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                        FStar.UInt16.v 
                                                                                                                                                          (
                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                              6
                                                                                                                                                            
                                                                                                                                                          )
                                                                                                                                                         <
                                                                                                                                                        10 /\
                                                                                                                                                        (
                                                                                                                                                          forall 
                                                                                                                                                            (return_val:
                                                                                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                                                                                              10
                                                                                                                                                            )
                                                                                                                                                          .
                                                                                                                                                            return_val ==
                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                              6
                                                                                                                                                             ==>
                                                                                                                                                            (
                                                                                                                                                              forall 
                                                                                                                                                                (any_result:
                                                                                                                                                                Prims.bool)
                                                                                                                                                              .
                                                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                  10
                                                                                                                                                                  x2
                                                                                                                                                                  (
                                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                      6
                                                                                                                                                                    
                                                                                                                                                                  )
                                                                                                                                                                 ==
                                                                                                                                                                any_result ==>
                                                                                                                                                                (
                                                                                                                                                                  forall 
                                                                                                                                                                    (any_result:
                                                                                                                                                                    (
                                                                                                                                                                      
                                                                                                                                                                        x1:
                                                                                                                                                                        (
                                                                                                                                                                          
                                                                                                                                                                            _:
                                                                                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                                                                                              true
                                                                                                                                                                              (
                                                                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                                  10
                                                                                                                                                                                  x2
                                                                                                                                                                                  (
                                                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                      6
                                                                                                                                                                                    
                                                                                                                                                                                  )
                                                                                                                                                                                
                                                                                                                                                                              )
                                                                                                                                                                             ->
                                                                                                                                                                            Prims.Tot
                                                                                                                                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                                                        ) ->
                                                                                                                                                                        x2:
                                                                                                                                                                        (
                                                                                                                                                                          
                                                                                                                                                                            _:
                                                                                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                                                                                              false
                                                                                                                                                                              (
                                                                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                                  10
                                                                                                                                                                                  x2
                                                                                                                                                                                  (
                                                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                      6
                                                                                                                                                                                    
                                                                                                                                                                                  )
                                                                                                                                                                                
                                                                                                                                                                              )
                                                                                                                                                                             ->
                                                                                                                                                                            Prims.Tot
                                                                                                                                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                                                        ) ->
                                                                                                                                                                        Prims.Tot
                                                                                                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                                                    ))
                                                                                                                                                                  .
                                                                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                                    FStar.UInt16.v 
                                                                                                                                                                      (
                                                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                          6
                                                                                                                                                                        
                                                                                                                                                                      )
                                                                                                                                                                     <
                                                                                                                                                                    10 /\
                                                                                                                                                                    (
                                                                                                                                                                      forall 
                                                                                                                                                                        (any_result:
                                                                                                                                                                        (
                                                                                                                                                                          
                                                                                                                                                                            _:
                                                                                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                                                                                              true
                                                                                                                                                                              (
                                                                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                                  10
                                                                                                                                                                                  x2
                                                                                                                                                                                  (
                                                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                      6
                                                                                                                                                                                    
                                                                                                                                                                                  )
                                                                                                                                                                                
                                                                                                                                                                              )
                                                                                                                                                                             ->
                                                                                                                                                                            Prims.Tot
                                                                                                                                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                                                        ))
                                                                                                                                                                      .
                                                                                                                                                                        (
                                                                                                                                                                          fun
                                                                                                                                                                            _
                                                                                                                                                                            ->
                                                                                                                                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                                                                                                                                        ) ==
                                                                                                                                                                        any_result ==>
                                                                                                                                                                        (
                                                                                                                                                                          forall 
                                                                                                                                                                            (any_result:
                                                                                                                                                                            (
                                                                                                                                                                              
                                                                                                                                                                                x2:
                                                                                                                                                                                (
                                                                                                                                                                                  
                                                                                                                                                                                    _:
                                                                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                                                                      false
                                                                                                                                                                                      (
                                                                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                                          10
                                                                                                                                                                                          x2
                                                                                                                                                                                          (
                                                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                              6
                                                                                                                                                                                            
                                                                                                                                                                                          )
                                                                                                                                                                                        
                                                                                                                                                                                      )
                                                                                                                                                                                     ->
                                                                                                                                                                                    Prims.Tot
                                                                                                                                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                                                                ) ->
                                                                                                                                                                                Prims.Tot
                                                                                                                                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                                                            ))
                                                                                                                                                                          .
                                                                                                                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                                            FStar.UInt16.v 
                                                                                                                                                                              (
                                                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                  6
                                                                                                                                                                                
                                                                                                                                                                              )
                                                                                                                                                                             <
                                                                                                                                                                            10 /\
                                                                                                                                                                            (
                                                                                                                                                                              forall 
                                                                                                                                                                                (x8:
                                                                                                                                                                                MiniParse.Tac.Base.ctest 
                                                                                                                                                                                  false
                                                                                                                                                                                  (
                                                                                                                                                                                    MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                                      10
                                                                                                                                                                                      x2
                                                                                                                                                                                      (
                                                                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                          6
                                                                                                                                                                                        
                                                                                                                                                                                      )
                                                                                                                                                                                    
                                                                                                                                                                                  )
                                                                                                                                                                                )
                                                                                                                                                                              .
                                                                                                                                                                                (*could not prove post-condition*)
                                                                                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                                                FStar.UInt16.v 
                                                                                                                                                                                  (
                                                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                      7
                                                                                                                                                                                    
                                                                                                                                                                                  )
                                                                                                                                                                                 <
                                                                                                                                                                                10 /\
                                                                                                                                                                                (
                                                                                                                                                                                  forall 
                                                                                                                                                                                    (return_val:
                                                                                                                                                                                    MiniParse.Spec.Int.bounded_u16 
                                                                                                                                                                                      10
                                                                                                                                                                                    )
                                                                                                                                                                                  .
                                                                                                                                                                                    return_val ==
                                                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                      7
                                                                                                                                                                                     ==>
                                                                                                                                                                                    (
                                                                                                                                                                                      forall 
                                                                                                                                                                                        (any_result:
                                                                                                                                                                                        Prims.bool)
                                                                                                                                                                                      .
                                                                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                                          10
                                                                                                                                                                                          x2
                                                                                                                                                                                          (
                                                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                              7
                                                                                                                                                                                            
                                                                                                                                                                                          )
                                                                                                                                                                                         ==
                                                                                                                                                                                        any_result ==>
                                                                                                                                                                                        (
                                                                                                                                                                                          forall 
                                                                                                                                                                                            (any_result:
                                                                                                                                                                                            (
                                                                                                                                                                                              
                                                                                                                                                                                                x1:
                                                                                                                                                                                                (
                                                                                                                                                                                                  
                                                                                                                                                                                                    _:
                                                                                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                                                                                      true
                                                                                                                                                                                                      (
                                                                                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                                                          10
                                                                                                                                                                                                          x2
                                                                                                                                                                                                          (
                                                                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                                              7
                                                                                                                                                                                                            
                                                                                                                                                                                                          )
                                                                                                                                                                                                        
                                                                                                                                                                                                      )
                                                                                                                                                                                                     ->
                                                                                                                                                                                                    Prims.Tot
                                                                                                                                                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                                                                                ) ->
                                                                                                                                                                                                x2:
                                                                                                                                                                                                (
                                                                                                                                                                                                  
                                                                                                                                                                                                    _:
                                                                                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                                                                                      false
                                                                                                                                                                                                      (
                                                                                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                                                          10
                                                                                                                                                                                                          x2
                                                                                                                                                                                                          (
                                                                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                                              7
                                                                                                                                                                                                            
                                                                                                                                                                                                          )
                                                                                                                                                                                                        
                                                                                                                                                                                                      )
                                                                                                                                                                                                     ->
                                                                                                                                                                                                    Prims.Tot
                                                                                                                                                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                                                                                ) ->
                                                                                                                                                                                                Prims.Tot
                                                                                                                                                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                                                                            ))
                                                                                                                                                                                          .
                                                                                                                                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                                                            FStar.UInt16.v 
                                                                                                                                                                                              (
                                                                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                                  7
                                                                                                                                                                                                
                                                                                                                                                                                              )
                                                                                                                                                                                             <
                                                                                                                                                                                            10 /\
                                                                                                                                                                                            (
                                                                                                                                                                                              forall 
                                                                                                                                                                                                (any_result:
                                                                                                                                                                                                (
                                                                                                                                                                                                  
                                                                                                                                                                                                    _:
                                                                                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                                                                                      true
                                                                                                                                                                                                      (
                                                                                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                                                          10
                                                                                                                                                                                                          x2
                                                                                                                                                                                                          (
                                                                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                                              7
                                                                                                                                                                                                            
                                                                                                                                                                                                          )
                                                                                                                                                                                                        
                                                                                                                                                                                                      )
                                                                                                                                                                                                     ->
                                                                                                                                                                                                    Prims.Tot
                                                                                                                                                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                                                                                ))
                                                                                                                                                                                              .
                                                                                                                                                                                                (
                                                                                                                                                                                                  fun
                                                                                                                                                                                                    _
                                                                                                                                                                                                    ->
                                                                                                                                                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                                                                                                                                                                ) ==
                                                                                                                                                                                                any_result ==>
                                                                                                                                                                                                (
                                                                                                                                                                                                  forall 
                                                                                                                                                                                                    (any_result:
                                                                                                                                                                                                    (
                                                                                                                                                                                                      
                                                                                                                                                                                                        x2:
                                                                                                                                                                                                        (
                                                                                                                                                                                                          
                                                                                                                                                                                                            _:
                                                                                                                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                                                                                                                              false
                                                                                                                                                                                                              (
                                                                                                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                                                                  10
                                                                                                                                                                                                                  x2
                                                                                                                                                                                                                  (
                                                                                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                                                      7
                                                                                                                                                                                                                    
                                                                                                                                                                                                                  )
                                                                                                                                                                                                                
                                                                                                                                                                                                              )
                                                                                                                                                                                                             ->
                                                                                                                                                                                                            Prims.Tot
                                                                                                                                                                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                                                                                        ) ->
                                                                                                                                                                                                        Prims.Tot
                                                                                                                                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                                                                                    ))
                                                                                                                                                                                                  .
                                                                                                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                                                                    FStar.UInt16.v 
                                                                                                                                                                                                      (
                                                                                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                                          7
                                                                                                                                                                                                        
                                                                                                                                                                                                      )
                                                                                                                                                                                                     <
                                                                                                                                                                                                    10 /\
                                                                                                                                                                                                    (
                                                                                                                                                                                                      forall 
                                                                                                                                                                                                        (x6:
                                                                                                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                                                                                                          false
                                                                                                                                                                                                          (
                                                                                                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                                                              10
                                                                                                                                                                                                              x2
                                                                                                                                                                                                              (
                                                                                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                                                  7
                                                                                                                                                                                                                
                                                                                                                                                                                                              )
                                                                                                                                                                                                            
                                                                                                                                                                                                          )
                                                                                                                                                                                                        )
                                                                                                                                                                                                      .
                                                                                                                                                                                                        (*could not prove post-condition*)
                                                                                                                                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                                                                        FStar.UInt16.v 
                                                                                                                                                                                                          (
                                                                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                                              8
                                                                                                                                                                                                            
                                                                                                                                                                                                          )
                                                                                                                                                                                                         <
                                                                                                                                                                                                        10 /\
                                                                                                                                                                                                        (
                                                                                                                                                                                                          forall 
                                                                                                                                                                                                            (return_val:
                                                                                                                                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                                                                                                                                              10
                                                                                                                                                                                                            )
                                                                                                                                                                                                          .
                                                                                                                                                                                                            return_val ==
                                                                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                                              8
                                                                                                                                                                                                             ==>
                                                                                                                                                                                                            (
                                                                                                                                                                                                              forall 
                                                                                                                                                                                                                (any_result:
                                                                                                                                                                                                                Prims.bool)
                                                                                                                                                                                                              .
                                                                                                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                                                                  10
                                                                                                                                                                                                                  x2
                                                                                                                                                                                                                  (
                                                                                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                                                      8
                                                                                                                                                                                                                    
                                                                                                                                                                                                                  )
                                                                                                                                                                                                                 ==
                                                                                                                                                                                                                any_result ==>
                                                                                                                                                                                                                (
                                                                                                                                                                                                                  forall 
                                                                                                                                                                                                                    (any_result:
                                                                                                                                                                                                                    (
                                                                                                                                                                                                                      
                                                                                                                                                                                                                        x1:
                                                                                                                                                                                                                        (
                                                                                                                                                                                                                          
                                                                                                                                                                                                                            _:
                                                                                                                                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                                                                                                                                              true
                                                                                                                                                                                                                              (
                                                                                                                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                                                                                  10
                                                                                                                                                                                                                                  x2
                                                                                                                                                                                                                                  (
                                                                                                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                                                                      8
                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                
                                                                                                                                                                                                                              )
                                                                                                                                                                                                                             ->
                                                                                                                                                                                                                            Prims.Tot
                                                                                                                                                                                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                                                                                                        ) ->
                                                                                                                                                                                                                        x2:
                                                                                                                                                                                                                        (
                                                                                                                                                                                                                          
                                                                                                                                                                                                                            _:
                                                                                                                                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                                                                                                                                              false
                                                                                                                                                                                                                              (
                                                                                                                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                                                                                  10
                                                                                                                                                                                                                                  x2
                                                                                                                                                                                                                                  (
                                                                                                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                                                                      8
                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                
                                                                                                                                                                                                                              )
                                                                                                                                                                                                                             ->
                                                                                                                                                                                                                            Prims.Tot
                                                                                                                                                                                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                                                                                                        ) ->
                                                                                                                                                                                                                        Prims.Tot
                                                                                                                                                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                                                                                                    ))
                                                                                                                                                                                                                  .
                                                                                                                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                                                                                    FStar.UInt16.v 
                                                                                                                                                                                                                      (
                                                                                                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                                                          8
                                                                                                                                                                                                                        
                                                                                                                                                                                                                      )
                                                                                                                                                                                                                     <
                                                                                                                                                                                                                    10 /\
                                                                                                                                                                                                                    (
                                                                                                                                                                                                                      forall 
                                                                                                                                                                                                                        (any_result:
                                                                                                                                                                                                                        (
                                                                                                                                                                                                                          
                                                                                                                                                                                                                            _:
                                                                                                                                                                                                                            MiniParse.Tac.Base.ctest 
                                                                                                                                                                                                                              true
                                                                                                                                                                                                                              (
                                                                                                                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                                                                                  10
                                                                                                                                                                                                                                  x2
                                                                                                                                                                                                                                  (
                                                                                                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                                                                      8
                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                
                                                                                                                                                                                                                              )
                                                                                                                                                                                                                             ->
                                                                                                                                                                                                                            Prims.Tot
                                                                                                                                                                                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                                                                                                        ))
                                                                                                                                                                                                                      .
                                                                                                                                                                                                                        (
                                                                                                                                                                                                                          fun
                                                                                                                                                                                                                            _
                                                                                                                                                                                                                            ->
                                                                                                                                                                                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                                                                                                                                                                        ) ==
                                                                                                                                                                                                                        any_result ==>
                                                                                                                                                                                                                        (
                                                                                                                                                                                                                          forall 
                                                                                                                                                                                                                            (any_result:
                                                                                                                                                                                                                            (
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                x2:
                                                                                                                                                                                                                                (
                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                    _:
                                                                                                                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                                                                                                                      false
                                                                                                                                                                                                                                      (
                                                                                                                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                                                                                          10
                                                                                                                                                                                                                                          x2
                                                                                                                                                                                                                                          (
                                                                                                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                                                                              8
                                                                                                                                                                                                                                            
                                                                                                                                                                                                                                          )
                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                      )
                                                                                                                                                                                                                                     ->
                                                                                                                                                                                                                                    Prims.Tot
                                                                                                                                                                                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                                                                                                                ) ->
                                                                                                                                                                                                                                Prims.Tot
                                                                                                                                                                                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                                                                                                            ))
                                                                                                                                                                                                                          .
                                                                                                                                                                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                                                                                            FStar.UInt16.v 
                                                                                                                                                                                                                              (
                                                                                                                                         TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
                                                                                       MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                                                                                  8
                                                                                                                                                                                                                                
                                                                                                                                                                                                                              )
                                                                                                                                                                                                                             <
                                                                                                                                                                                                                            10
                                                                                                                                                                                                                        )
                                                                                                                                                                                                                    )
                                                                                                                                                                                                                )
                                                                                                                                                                                                            )
                                                                                                                                                                                                        )
                                                                                                                                                                                                    )
                                                                                                                                                                                                )
                                                                                                                                                                                            )
                                                                                                                                                                                        )
                                                                                                                                                                                    )
                                                                                                                                                                                )
                                                                                                                                                                            )
                                                                                                                                                                        )
                                                                                                                                                                    )
                                                                                                                                                                )
                                                                                                                                                            )
                                                                                                                                                        )
                                                                                                                                                    )
                                                                                                                                                )
                                                                                                                                            )
                                                                                                                                        )
                                                                                                                                    )
                                                                                                                                )
                                                                                                                            )
                                                                                                                        )
                                                                                                                    )
                                                                                                                )
                                                                                                            )
                                                                                                        )
                                                                                                    )
                                                                                                ))))
                                                                                )))))))))))))))))))) /\
    (forall (any_result:
        (_: MiniParse.Spec.Int.bounded_u16 10 ->
            Prims.GTot Bench.MiniParse.Size10.Factor10.Seed00.Goal.test)).
        (fun x2 ->
            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                  x2
                  (MiniParse.Spec.Int.mk_u16 0))
              (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
              (fun _ ->
                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                        x2
                        (MiniParse.Spec.Int.mk_u16 1))
                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                    (fun _ ->
                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                              x2
                              (MiniParse.Spec.Int.mk_u16 2))
                          (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                          (fun _ ->
                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                    x2
                                    (MiniParse.Spec.Int.mk_u16 3))
                                (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                                (fun _ ->
                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 4))
                                      (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                                      (fun _ ->
                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                10
                                                x2
                                                (MiniParse.Spec.Int.mk_u16 5))
                                            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6
                                            )
                                            (fun _ ->
                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                      10
                                                      x2
                                                      (MiniParse.Spec.Int.mk_u16 6))
                                                  (fun _ ->
                                                      Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                  )
                                                  (fun _ ->
                                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                            10
                                                            x2
                                                            (MiniParse.Spec.Int.mk_u16 7))
                                                        (fun _ ->
                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                        )
                                                        (fun _ ->
                                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                  10
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 8))
                                                              (fun _ ->
                                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                              )
                                                              (fun _ ->
                                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                              )))))))))) ==
        any_result ==>
        (forall (any_result:
            (
                g1:
                (_: Bench.MiniParse.Size10.Factor10.Seed00.Goal.test ->
                    Prims.GTot (MiniParse.Spec.Int.bounded_u16 10)) ->
                Prims.Pure
                  (MiniParse.Spec.Base.parser_spec Bench.MiniParse.Size10.Factor10.Seed00.Goal.test)
                  (MiniParse.Spec.Combinators.synth_inverse g1
                      (fun x2 ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x2
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 3))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 4))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 5))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x2
                                                                    (MiniParse.Spec.Int.mk_u16 6))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                                )
                                                                (fun _ ->
                                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          10
                                                                          x2
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              7))
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                                      )
                                                                      (fun _ ->
                                                                          MiniParse.Tac.Base.mk_if_t 
                                                                            (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                10
                                                                                x2
                                                                                (MiniParse.Spec.Int.mk_u16 
                                                                                    8))
                                                                            (fun _ ->
                                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                            )
                                                                            (fun _ ->
                                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                                            )))))))))))
                  (fun _ -> Prims.l_True))).
            (forall (x1: Bench.MiniParse.Size10.Factor10.Seed00.Goal.test).
                (*could not prove post-condition*)
                C10? x1 == true ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 9) < 10 /\
                ~(C10? x1 == true) ==>
                (C9? x1 == true ==>
                  (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                  FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 8) < 10) /\
                (~(C9? x1 == true) ==>
                  C8? x1 == true ==>
                  (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                  FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 7) < 10 /\
                  ~(C8? x1 == true) ==>
                  (C7? x1 == true ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 6) < 10) /\
                  (~(C7? x1 == true) ==>
                    C6? x1 == true ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 5) < 10 /\
                    ~(C6? x1 == true) ==>
                    (C5? x1 == true ==>
                      (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                      FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 4) < 10) /\
                    (~(C5? x1 == true) ==>
                      C4? x1 == true ==>
                      (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                      FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) < 10 /\
                      ~(C4? x1 == true) ==>
                      (C3? x1 == true ==>
                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 10) /\
                      (~(C3? x1 == true) ==>
                        C2? x1 == true ==>
                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                        ~(C2? x1 == true) ==>
                        (C1? x1 == true ==>
                          (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                          FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10) /\
                        (~(C1? x1 == true) ==>
                          (forall (b: Bench.MiniParse.Size10.Factor10.Seed00.Goal.test).
                              x1 == b ==>
                              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 9) < 10))))))) /\
            (forall (any_result:
                (_: Bench.MiniParse.Size10.Factor10.Seed00.Goal.test ->
                    Prims.GTot (MiniParse.Spec.Int.bounded_u16 10))).
                (fun x1 ->
                    (match x1 with
                      | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10 ->
                        MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10
                      | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9 ->
                        MiniParse.Spec.Int.mk_u16 8 <: MiniParse.Spec.Int.bounded_u16 10
                      | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8 ->
                        MiniParse.Spec.Int.mk_u16 7 <: MiniParse.Spec.Int.bounded_u16 10
                      | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7 ->
                        MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 10
                      | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6 ->
                        MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 10
                      | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5 ->
                        MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 10
                      | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4 ->
                        MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 10
                      | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3 ->
                        MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 10
                      | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2 ->
                        MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 10
                      | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1 ->
                        MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 10
                      | _ -> MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10)
                    <:
                    MiniParse.Spec.Int.bounded_u16 10) ==
                any_result ==>
                MiniParse.Spec.Combinators.synth_inverse (fun x1 ->
                      (match x1 with
                        | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10 ->
                          MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10
                        | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9 ->
                          MiniParse.Spec.Int.mk_u16 8 <: MiniParse.Spec.Int.bounded_u16 10
                        | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8 ->
                          MiniParse.Spec.Int.mk_u16 7 <: MiniParse.Spec.Int.bounded_u16 10
                        | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7 ->
                          MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 10
                        | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6 ->
                          MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 10
                        | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5 ->
                          MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 10
                        | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4 ->
                          MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 10
                        | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3 ->
                          MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 10
                        | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2 ->
                          MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 10
                        | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1 ->
                          MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 10
                        | _ -> MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10)
                      <:
                      MiniParse.Spec.Int.bounded_u16 10)
                  (fun x2 ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 0))
                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 1))
                              (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 2))
                                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 3))
                                          (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 4))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 5))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 6))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                            )
                                                            (fun _ ->
                                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                      10
                                                                      x2
                                                                      (MiniParse.Spec.Int.mk_u16 7))
                                                                  (fun _ ->
                                                                      Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                                  )
                                                                  (fun _ ->
                                                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                            10
                                                                            x2
                                                                            (MiniParse.Spec.Int.mk_u16 
                                                                                8))
                                                                        (fun _ ->
                                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                        )
                                                                        (fun _ ->
                                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                                        ))))))))))))))
SMT goals (0):

TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> No goals left
TAC>> Checking success for: synth_inverse_forall_bounded_u16_solve
TAC>> Success: synth_inverse_forall_bounded_u16_solve
TAC>> Checking success for: return_squash imm_solve
TAC>> Success: return_squash imm_solve
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Applied: forall_intro
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Applied: forall_intro
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
proof-state: State dump @ depth 47 (synth_inverse_forall_tenum_solve FAILED here:):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Spec.TEnum.fst(183,12-183,66)
ACTIVE goals (1):
(x:
(_: MiniParse.Spec.Int.bounded_u16 7 -> Prims.GTot Bench.MiniParse.Size7.Factor10.Seed00.Goal.test)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7))))))) ==
x), (x:
(
    f2':
    (x: MiniParse.Spec.Int.bounded_u16 7 ->
        Prims.Tot
        (y:
          Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
            { y ==
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                    x
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                          x
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x
                                      (MiniParse.Spec.Int.mk_u16 3))
                                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x
                                            (MiniParse.Spec.Int.mk_u16 4))
                                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x
                                                  (MiniParse.Spec.Int.mk_u16 5))
                                              (fun _ ->
                                                  Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                              (fun _ ->
                                                  Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7)))))
                ) })) ->
    g1:
    (_: Bench.MiniParse.Size7.Factor10.Seed00.Goal.test ->
        Prims.GTot (MiniParse.Spec.Int.bounded_u16 7)) ->
    u1818490:
    u1818519:
    Prims.unit
      { MiniParse.Spec.Combinators.synth_inverse g1
          (fun x2 ->
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                    x2
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                          x2
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                x2
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 3))
                                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 4))
                                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  7
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 5))
                                              (fun _ ->
                                                  Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                              (fun _ ->
                                                  Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7)))))
                )) } ->
    Prims.Tot
    (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                7)
            (fun x2 ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x2
                      (MiniParse.Spec.Int.mk_u16 0))
                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 1))
                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 2))
                              (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 3))
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 4))
                                          (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    7
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 5))
                                                (fun _ ->
                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                                (fun _ ->
                                                    Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7)))
                              ))))
            g1)))), (x:
(x: MiniParse.Spec.Int.bounded_u16 7 ->
    Prims.Tot
    (y:
      Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
        { y ==
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                          (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7)))
                        ))) }))), (_:
(fun x0 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7 x0 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x0
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x0
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x0
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x0
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x0
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7))))))) ==
x), (x:
(_: Bench.MiniParse.Size7.Factor10.Seed00.Goal.test -> Prims.GTot (MiniParse.Spec.Int.bounded_u16 7)
)), (x:
u1818561:
Prims.unit
  { MiniParse.Spec.Combinators.synth_inverse x
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                          (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7)))
                        )))) }), (x:
(_: MiniParse.Spec.Int.bounded_u16 7 -> Prims.GTot Bench.MiniParse.Size7.Factor10.Seed00.Goal.test)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7))))))) ==
x) |- _ : Prims.squash (MiniParse.Spec.Combinators.synth_inverse x
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                          (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7)))
                        )))))
SMT goals (0):

TAC>> Checking success for: assumption
TAC>> Success: assumption
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
proof-state: State dump @ depth 47 (synth_inverse_forall_tenum_solve FAILED here:):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Spec.TEnum.fst(183,12-183,66)
ACTIVE goals (1):
(x:
(_: MiniParse.Spec.Int.bounded_u16 10 -> Prims.GTot Bench.MiniParse.Size10.Factor1.Seed00.Goal.test)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
          x2
          (MiniParse.Spec.Int.mk_u16 0))
      (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 6))
                                          (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 7))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 8))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                      )
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                      )))))))))) ==
x), (x:
(
    f2':
    (x: MiniParse.Spec.Int.bounded_u16 10 ->
        Prims.Tot
        (y:
          Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
            { y ==
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                    x
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                          x
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x
                                      (MiniParse.Spec.Int.mk_u16 3))
                                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x
                                            (MiniParse.Spec.Int.mk_u16 4))
                                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x
                                                  (MiniParse.Spec.Int.mk_u16 5))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x
                                                        (MiniParse.Spec.Int.mk_u16 6))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x
                                                              (MiniParse.Spec.Int.mk_u16 7))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x
                                                                    (MiniParse.Spec.Int.mk_u16 8))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                )
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                                ))))))))) })) ->
    g1:
    (_: Bench.MiniParse.Size10.Factor1.Seed00.Goal.test ->
        Prims.GTot (MiniParse.Spec.Int.bounded_u16 10)) ->
    u3476338:
    u3476379:
    Prims.unit
      { MiniParse.Spec.Combinators.synth_inverse g1
          (fun x2 ->
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                    x2
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                          x2
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x2
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 3))
                                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 4))
                                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 5))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 6))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 7))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x2
                                                                    (MiniParse.Spec.Int.mk_u16 8))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                )
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                                )))))))))) } ->
    Prims.Tot
    (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                10)
            (fun x2 ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x2
                      (MiniParse.Spec.Int.mk_u16 0))
                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 1))
                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 2))
                              (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 3))
                                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 4))
                                          (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 5))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 6))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 7))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                            )
                                                            (fun _ ->
                                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                      10
                                                                      x2
                                                                      (MiniParse.Spec.Int.mk_u16 8))
                                                                  (fun _ ->
                                                                      Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                                  )
                                                                  (fun _ ->
                                                                      Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                                  ))))))))))
            g1)))), (x:
(x: MiniParse.Spec.Int.bounded_u16 10 ->
    Prims.Tot
    (y:
      Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
        { y ==
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x
                                                    (MiniParse.Spec.Int.mk_u16 6))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x
                                                          (MiniParse.Spec.Int.mk_u16 7))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x
                                                                (MiniParse.Spec.Int.mk_u16 8))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                            )
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                            ))))))))) }))), (_:
(fun x0 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
          x0
          (MiniParse.Spec.Int.mk_u16 0))
      (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x0
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x0
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x0
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x0
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x0
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x0
                                              (MiniParse.Spec.Int.mk_u16 6))
                                          (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x0
                                                    (MiniParse.Spec.Int.mk_u16 7))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x0
                                                          (MiniParse.Spec.Int.mk_u16 8))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                      )
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                      )))))))))) ==
x), (x:
(_: Bench.MiniParse.Size10.Factor1.Seed00.Goal.test ->
    Prims.GTot (MiniParse.Spec.Int.bounded_u16 10))), (x:
u3476439:
Prims.unit
  { MiniParse.Spec.Combinators.synth_inverse x
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 6))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 7))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 8))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                            )
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                            )))))))))) }), (x:
(_: MiniParse.Spec.Int.bounded_u16 10 -> Prims.GTot Bench.MiniParse.Size10.Factor1.Seed00.Goal.test)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
          x2
          (MiniParse.Spec.Int.mk_u16 0))
      (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 6))
                                          (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 7))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 8))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                      )
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                      )))))))))) ==
x) |- _ : Prims.squash (MiniParse.Spec.Combinators.synth_inverse x
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 6))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 7))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 8))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                            )
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                            )))))))))))
SMT goals (0):

TAC>> Checking success for: assumption
TAC>> Success: assumption
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: synth_inverse_forall_bounded_u16_solve, main goal
TAC>> Success: synth_inverse_forall_bounded_u16_solve, main goal
proof-state: State dump @ depth 28 (Some goals left):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Tac.Base.fst(169,4-169,28)
ACTIVE goals (1):
(x:
(_: MiniParse.Spec.Int.bounded_u16 10 -> Prims.GTot Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
          x2
          (MiniParse.Spec.Int.mk_u16 0))
      (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 6))
                                          (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 7))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 8))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                      )
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                      )))))))))) ==
x), (x:
(
    g1:
    (_: Bench.MiniParse.Size10.Factor10.Seed00.Goal.test ->
        Prims.GTot (MiniParse.Spec.Int.bounded_u16 10)) ->
    Prims.Pure (MiniParse.Spec.Base.parser_spec Bench.MiniParse.Size10.Factor10.Seed00.Goal.test)
      (MiniParse.Spec.Combinators.synth_inverse g1
          (fun x2 ->
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                    x2
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                          x2
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x2
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 3))
                                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 4))
                                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 5))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 6))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 7))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x2
                                                                    (MiniParse.Spec.Int.mk_u16 8))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                )
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                                )))))))))))
      (fun _ -> Prims.l_True))), (x:
(_: Bench.MiniParse.Size10.Factor10.Seed00.Goal.test ->
    Prims.GTot (MiniParse.Spec.Int.bounded_u16 10))), (_:
(fun x1 ->
    (match x1 with
      | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10 ->
        MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9 ->
        MiniParse.Spec.Int.mk_u16 8 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8 ->
        MiniParse.Spec.Int.mk_u16 7 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7 ->
        MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6 ->
        MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5 ->
        MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4 ->
        MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3 ->
        MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2 ->
        MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1 ->
        MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 10
      | _ -> MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10)
    <:
    MiniParse.Spec.Int.bounded_u16 10) ==
x) |- _ : Prims.squash ((forall (x2: MiniParse.Spec.Int.bounded_u16 10).
        (*could not prove post-condition*)
        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10 /\
        (forall (return_val: MiniParse.Spec.Int.bounded_u16 10).
            return_val == MiniParse.Spec.Int.mk_u16 0 ==>
            (forall (any_result: Prims.bool).
                MiniParse.Spec.Int.bounded_u16_eq 10 x2 (MiniParse.Spec.Int.mk_u16 0) == any_result ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10 /\
                (forall (any_result:
                    (
                        _:
                        MiniParse.Tac.Base.ctest true
                          (MiniParse.Spec.Int.bounded_u16_eq 10 x2 (MiniParse.Spec.Int.mk_u16 0)) ->
                        Prims.Tot Bench.MiniParse.Size10.Factor10.Seed00.Goal.test)).
                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1) == any_result ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10 /\
                    (forall (x20:
                        MiniParse.Tac.Base.ctest false
                          (MiniParse.Spec.Int.bounded_u16_eq 10 x2 (MiniParse.Spec.Int.mk_u16 0))).
                        (*could not prove post-condition*)
                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 10).
                            return_val == MiniParse.Spec.Int.mk_u16 1 ==>
                            (forall (any_result: Prims.bool).
                                MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 1) ==
                                any_result ==>
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                                (forall (any_result:
                                    (
                                        _:
                                        MiniParse.Tac.Base.ctest true
                                          (MiniParse.Spec.Int.bounded_u16_eq 10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1)) ->
                                        Prims.Tot Bench.MiniParse.Size10.Factor10.Seed00.Goal.test))
                                  .
                                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2) ==
                                    any_result ==>
                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                                    (forall (x18:
                                        MiniParse.Tac.Base.ctest false
                                          (MiniParse.Spec.Int.bounded_u16_eq 10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1))).
                                        (*could not prove post-condition*)
                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 10 /\
                                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 10).
                                            return_val == MiniParse.Spec.Int.mk_u16 2 ==>
                                            (forall (any_result: Prims.bool).
                                                MiniParse.Spec.Int.bounded_u16_eq 10
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 2) ==
                                                any_result ==>
                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 10 /\
                                                (forall (any_result:
                                                    (
                                                        _:
                                                        MiniParse.Tac.Base.ctest true
                                                          (MiniParse.Spec.Int.bounded_u16_eq 10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2)) ->
                                                        Prims.Tot
                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                    )).
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3
                                                    ) ==
                                                    any_result ==>
                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) <
                                                    10 /\
                                                    (forall (x16:
                                                        MiniParse.Tac.Base.ctest false
                                                          (MiniParse.Spec.Int.bounded_u16_eq 10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2))).
                                                        (*could not prove post-condition*)
                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) <
                                                        10 /\
                                                        (forall (return_val:
                                                            MiniParse.Spec.Int.bounded_u16 10).
                                                            return_val ==
                                                            MiniParse.Spec.Int.mk_u16 3 ==>
                                                            (forall (any_result: Prims.bool).
                                                                MiniParse.Spec.Int.bounded_u16_eq 10
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 3) ==
                                                                any_result ==>
                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                      3) <
                                                                10 /\
                                                                (forall (any_result:
                                                                    (
                                                                        _:
                                                                        MiniParse.Tac.Base.ctest true
                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                              10
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  3)) ->
                                                                        Prims.Tot
                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                    )).
                                                                    (fun _ ->
                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4
                                                                    ) ==
                                                                    any_result ==>
                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                          3) <
                                                                    10 /\
                                                                    (forall (x14:
                                                                        MiniParse.Tac.Base.ctest false
                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                              10
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  3))).
                                                                        (*could not prove post-condition*)
                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                              4) <
                                                                        10 /\
                                                                        (forall (return_val:
                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                              10).
                                                                            return_val ==
                                                                            MiniParse.Spec.Int.mk_u16 
                                                                              4 ==>
                                                                            (forall (any_result:
                                                                                Prims.bool).
                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  10
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      4) ==
                                                                                any_result ==>
                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                      4) <
                                                                                10 /\
                                                                                (forall (any_result:
                                                                                    (
                                                                                        _:
                                                                                        MiniParse.Tac.Base.ctest 
                                                                                          true
                                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                              10
                                                                                              x2
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  4)
                                                                                          ) ->
                                                                                        Prims.Tot
                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                    )).
                                                                                    (fun _ ->
                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5
                                                                                    ) ==
                                                                                    any_result ==>
                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                          4) <
                                                                                    10 /\
                                                                                    (forall (x12:
                                                                                        MiniParse.Tac.Base.ctest 
                                                                                          false
                                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                              10
                                                                                              x2
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  4)
                                                                                          )).
                                                                                        (*could not prove post-condition*)
                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                        FStar.UInt16.v 
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              5) <
                                                                                        10 /\
                                                                                        (forall (return_val:
                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                              10).
                                                                                            return_val ==
                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                              5 ==>
                                                                                            (forall (any_result:
                                                                                                Prims.bool)
                                                                                              .
                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                  10
                                                                                                  x2
                                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                                      5
                                                                                                    
                                                                                                  ) ==
                                                                                                any_result ==>
                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                FStar.UInt16.v 
                                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                                      5
                                                                                                    
                                                                                                  ) <
                                                                                                10 /\
                                                                                                (forall 
                                                                                                    (any_result:
                                                                                                    (
                                                                                                      
                                                                                                        _:
                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                          true
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                              10
                                                                                                              x2
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                  5
                                                                                                                
                                                                                                              )
                                                                                                            
                                                                                                          )
                                                                                                         ->
                                                                                                        Prims.Tot
                                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                    ))
                                                                                                  .
                                                                                                    (
                                                                                                      fun
                                                                                                        _
                                                                                                        ->
                                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6
                                                                                                    ) ==
                                                                                                    any_result ==>
                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                    FStar.UInt16.v 
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                          5
                                                                                                        
                                                                                                      )
                                                                                                     <
                                                                                                    10 /\
                                                                                                    (
                                                                                                      forall 
                                                                                                        (x10:
                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                          false
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                              10
                                                                                                              x2
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                  5
                                                                                                                
                                                                                                              )
                                                                                                            
                                                                                                          )
                                                                                                        )
                                                                                                      .
                                                                                                        (*could not prove post-condition*)
                                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                        FStar.UInt16.v 
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              6
                                                                                                            
                                                                                                          )
                                                                                                         <
                                                                                                        10 /\
                                                                                                        (
                                                                                                          forall 
                                                                                                            (return_val:
                                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                                              10
                                                                                                            )
                                                                                                          .
                                                                                                            return_val ==
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              6
                                                                                                             ==>
                                                                                                            (
                                                                                                              forall 
                                                                                                                (any_result:
                                                                                                                Prims.bool)
                                                                                                              .
                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                  10
                                                                                                                  x2
                                                                                                                  (
                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                      6
                                                                                                                    
                                                                                                                  )
                                                                                                                 ==
                                                                                                                any_result ==>
                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                FStar.UInt16.v 
                                                                                                                  (
                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                      6
                                                                                                                    
                                                                                                                  )
                                                                                                                 <
                                                                                                                10 /\
                                                                                                                (
                                                                                                                  forall 
                                                                                                                    (any_result:
                                                                                                                    (
                                                                                                                      
                                                                                                                        _:
                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                          true
                                                                                                                          (
                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                              10
                                                                                                                              x2
                                                                                                                              (
                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                  6
                                                                                                                                
                                                                                                                              )
                                                                                                                            
                                                                                                                          )
                                                                                                                         ->
                                                                                                                        Prims.Tot
                                                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                    ))
                                                                                                                  .
                                                                                                                    (
                                                                                                                      fun
                                                                                                                        _
                                                                                                                        ->
                                                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                                                                                    ) ==
                                                                                                                    any_result ==>
                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                    FStar.UInt16.v 
                                                                                                                      (
                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                          6
                                                                                                                        
                                                                                                                      )
                                                                                                                     <
                                                                                                                    10 /\
                                                                                                                    (
                                                                                                                      forall 
                                                                                                                        (x8:
                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                          false
                                                                                                                          (
                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                              10
                                                                                                                              x2
                                                                                                                              (
                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                  6
                                                                                                                                
                                                                                                                              )
                                                                                                                            
                                                                                                                          )
                                                                                                                        )
                                                                                                                      .
                                                                                                                        (*could not prove post-condition*)
                                                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                        FStar.UInt16.v 
                                                                                                                          (
                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                              7
                                                                                                                            
                                                                                                                          )
                                                                                                                         <
                                                                                                                        10 /\
                                                                                                                        (
                                                                                                                          forall 
                                                                                                                            (return_val:
                                                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                                                              10
                                                                                                                            )
                                                                                                                          .
                                                                                                                            return_val ==
                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                              7
                                                                                                                             ==>
                                                                                                                            (
                                                                                                                              forall 
                                                                                                                                (any_result:
                                                                                                                                Prims.bool)
                                                                                                                              .
                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                  10
                                                                                                                                  x2
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      7
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                 ==
                                                                                                                                any_result ==>
                                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                FStar.UInt16.v 
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      7
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                 <
                                                                                                                                10 /\
                                                                                                                                (
                                                                                                                                  forall 
                                                                                                                                    (any_result:
                                                                                                                                    (
                                                                                                                                      
                                                                                                                                        _:
                                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                                          true
                                                                                                                                          (
                                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                              10
                                                                                                                                              x2
                                                                                                                                              (
                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                  7
                                                                                                                                                
                                                                                                                                              )
                                                                                                                                            
                                                                                                                                          )
                                                                                                                                         ->
                                                                                                                                        Prims.Tot
                                                                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                    ))
                                                                                                                                  .
                                                                                                                                    (
                                                                                                                                      fun
                                                                                                                                        _
                                                                                                                                        ->
                                                                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                                                                                                    ) ==
                                                                                                                                    any_result ==>
                                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                    FStar.UInt16.v 
                                                                                                                                      (
                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                          7
                                                                                                                                        
                                                                                                                                      )
                                                                                                                                     <
                                                                                                                                    10 /\
                                                                                                                                    (
                                                                                                                                      forall 
                                                                                                                                        (x6:
                                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                                          false
                                                                                                                                          (
                                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                              10
                                                                                                                                              x2
                                                                                                                                              (
                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                  7
                                                                                                                                                
                                                                                                                                              )
                                                                                                                                            
                                                                                                                                          )
                                                                                                                                        )
                                                                                                                                      .
                                                                                                                                        (*could not prove post-condition*)
                                                                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                        FStar.UInt16.v 
                                                                                                                                          (
                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                              8
                                                                                                                                            
                                                                                                                                          )
                                                                                                           TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
                              <
                                                                                                                                        10 /\
                                                                                                                                        (
                                                                                                                                          forall 
                                                                                                                                            (return_val:
                                                                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                                                                              10
                                                                                                                                            )
                                                                                                                                          .
                                                                                                                                            return_val ==
                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                              8
                                                                                                                                             ==>
                                                                                                                                            (
                                                                                                                                              forall 
                                                                                                                                                (any_result:
                                                                                                                                                Prims.bool)
                                                                                                                                              .
                                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                  10
                                                                                                                                                  x2
                                                                                                                                                  (
                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                      8
                                                                                                                                                    
                                                                                                                                                  )
                                                                                                                                                 ==
                                                                                                                                                any_result ==>
                                                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                FStar.UInt16.v 
                                                                                                                                                  (
                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                      8
                                                                                                                                                    
                                                                                                                                                  )
                                                                                                                                                 <
                                                                                                                                                10 /\
                                                                                                                                                (
                                                                                                                                                  forall 
                                                                                                                                                    (any_result:
                                                                                                                                                    (
                                                                                                                                                      
                                                                                                                                                        _:
                                                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                                                          true
                                                                                                                                                          (
                                                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                              10
                                                                                                                                                              x2
                                                                                                                                                              (
                                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                  8
                                                                                                                                                                
                                                                                                                                                              )
                                                                                                                                                            
                                                                                                                                                          )
                                                                                                                                                         ->
                                                                                                                                                        Prims.Tot
                                                                                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                                    ))
                                                                                                                                                  .
                                                                                                                                                    (
                                                                                                                                                      fun
                                                                                                                                                        _
                                                                                                                                                        ->
                                                                                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                                                                                                    ) ==
                                                                                                                                                    any_result ==>
                                                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                    FStar.UInt16.v 
                                                                                                                                                      (
                                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                                          8
                                                                                                                                                        
                                                                                                                                                      )
                                                                                                                                                     <
                                                                                                                                                    10
                                                                                                                                                )
                                                                                                                                            )
                                                                                                                                        )
                                                                                                                                    )
                                                                                                                                )
                                                                                                                            )
                                                                                                                        )
                                                                                                                    )
                                                                                                                )
                                                                                                            )
                                                                                                        )
                                                                                                    )
                                                                                                ))))
                                                                                )))))))))))))))))))) /\
    (forall (any_result:
        (_: MiniParse.Spec.Int.bounded_u16 10 ->
            Prims.GTot Bench.MiniParse.Size10.Factor10.Seed00.Goal.test)).
        (fun x2 ->
            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                  x2
                  (MiniParse.Spec.Int.mk_u16 0))
              (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
              (fun _ ->
                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                        x2
                        (MiniParse.Spec.Int.mk_u16 1))
                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                    (fun _ ->
                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                              x2
                              (MiniParse.Spec.Int.mk_u16 2))
                          (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                          (fun _ ->
                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                    x2
                                    (MiniParse.Spec.Int.mk_u16 3))
                                (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                                (fun _ ->
                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 4))
                                      (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                                      (fun _ ->
                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                10
                                                x2
                                                (MiniParse.Spec.Int.mk_u16 5))
                                            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6
                                            )
                                            (fun _ ->
                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                      10
                                                      x2
                                                      (MiniParse.Spec.Int.mk_u16 6))
                                                  (fun _ ->
                                                      Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                  )
                                                  (fun _ ->
                                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                            10
                                                            x2
                                                            (MiniParse.Spec.Int.mk_u16 7))
                                                        (fun _ ->
                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                        )
                                                        (fun _ ->
                                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                  10
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 8))
                                                              (fun _ ->
                                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                              )
                                                              (fun _ ->
                                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                              )))))))))) ==
        any_result ==>
        (forall (any_result:
            (
                f2:
                (_: Bench.MiniParse.Size10.Factor10.Seed00.Goal.test ->
                    Prims.GTot (MiniParse.Spec.Int.bounded_u16 10)) ->
                u566962:
                Prims.squash (MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16' 10
                      Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                      (fun x2 ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x2
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 3))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 4))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 5))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x2
                                                                    (MiniParse.Spec.Int.mk_u16 6))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                                )
                                                                (fun _ ->
                                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          10
                                                                          x2
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              7))
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                                      )
                                                                      (fun _ ->
                                                                          MiniParse.Tac.Base.mk_if_t 
                                                                            (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                10
                                                                                x2
                                                                                (MiniParse.Spec.Int.mk_u16 
                                                                                    8))
                                                                            (fun _ ->
                                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                            )
                                                                            (fun _ ->
                                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                                            ))))))))))
                      f2) ->
                Prims.Tot
                (Prims.squash (MiniParse.Spec.Combinators.synth_inverse f2
                        (fun x2 ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 0))
                              (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 1))
                                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 2))
                                          (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 3))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 4))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 5))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6
                                                            )
                                                            (fun _ ->
                                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                      10
                                                                      x2
                                                                      (MiniParse.Spec.Int.mk_u16 6))
                                                                  (fun _ ->
                                                                      Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                                  )
                                                                  (fun _ ->
                                                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                            10
                                                                            x2
                                                                            (MiniParse.Spec.Int.mk_u16 
                                                                                7))
                                                                        (fun _ ->
                                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                                        )
                                                                        (fun _ ->
                                                                            MiniParse.Tac.Base.mk_if_t 
                                                                              (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  10
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      8))
                                                                              (fun _ ->
                                                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                              )
                                                                              (fun _ ->
                                                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                                              ))))))))))))))
            (x1: Bench.MiniParse.Size10.Factor10.Seed00.Goal.test).
            (*could not prove post-condition*)
            C10? x1 == true ==>
            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 9) < 10 /\
            ~(C10? x1 == true) ==>
            (C9? x1 == true ==>
              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 8) < 10) /\
            (~(C9? x1 == true) ==>
              C8? x1 == true ==>
              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 7) < 10 /\
              ~(C8? x1 == true) ==>
              (C7? x1 == true ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 6) < 10) /\
              (~(C7? x1 == true) ==>
                C6? x1 == true ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 5) < 10 /\
                ~(C6? x1 == true) ==>
                (C5? x1 == true ==>
                  (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                  FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 4) < 10) /\
                (~(C5? x1 == true) ==>
                  C4? x1 == true ==>
                  (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                  FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) < 10 /\
                  ~(C4? x1 == true) ==>
                  (C3? x1 == true ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 10) /\
                  (~(C3? x1 == true) ==>
                    C2? x1 == true ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                    ~(C2? x1 == true) ==>
                    (C1? x1 == true ==>
                      (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                      FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10) /\
                    (~(C1? x1 == true) ==>
                      (forall (b: Bench.MiniParse.Size10.Factor10.Seed00.Goal.test).
                          x1 == b ==>
                          (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                          FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 9) < 10)))))))))
SMT goals (0):

TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Applied: implies_intro
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
proof-state: State dump @ depth 39 (synth_inverse_forall_tenum_solve FAILED here:):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Spec.TEnum.fst(183,12-183,66)
ACTIVE goals (1):
(x:
(_: MiniParse.Spec.Int.bounded_u16 7 -> Prims.GTot Bench.MiniParse.Size7.Factor10.Seed00.Goal.test)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7))))))) ==
x), (x:
(x: MiniParse.Spec.Int.bounded_u16 7 ->
    Prims.Tot
    (y:
      Bench.MiniParse.Size7.Factor10.Seed00.Goal.test
        { y ==
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                          (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7)))
                        ))) }))), (x:
(_: Bench.MiniParse.Size7.Factor10.Seed00.Goal.test -> Prims.GTot (MiniParse.Spec.Int.bounded_u16 7)
)), (x:
u2373416:
Prims.unit
  { MiniParse.Spec.Combinators.synth_inverse x
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                          (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7)))
                        )))) }), (x:
(_: MiniParse.Spec.Int.bounded_u16 7 -> Prims.GTot Bench.MiniParse.Size7.Factor10.Seed00.Goal.test)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7 x2 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7))))))) ==
x) |- _ : Prims.squash (MiniParse.Spec.Combinators.synth_inverse x
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                          (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7)))
                        )))))
SMT goals (0):

TAC>> Checking success for: assumption
TAC>> Success: assumption
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> No goals left
TAC>> gen_parser_impl spits:
TAC>> MiniParse.Impl.Combinators.parse_synth_impl (MiniParse.Impl.Int.parse_bounded_u16_impl 7)
  (fun x2 ->
      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
            x2
            (MiniParse.Spec.Int.mk_u16 0))
        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
        (fun _ ->
            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                  x2
                  (MiniParse.Spec.Int.mk_u16 1))
              (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
              (fun _ ->
                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                        x2
                        (MiniParse.Spec.Int.mk_u16 2))
                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                    (fun _ ->
                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                              x2
                              (MiniParse.Spec.Int.mk_u16 3))
                          (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                          (fun _ ->
                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                    x2
                                    (MiniParse.Spec.Int.mk_u16 4))
                                (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                                (fun _ ->
                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 5))
                                      (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                      (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7)))))))
  (fun x0 ->
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 7
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              7
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6)
                                          (fun _ -> Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7)))
                        )))) x0)
  (fun x1 ->
      (match x1 with
        | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C7 ->
          MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7
        | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C6 ->
          MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 7
        | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C5 ->
          MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 7
        | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C4 ->
          MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 7
        | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C3 ->
          MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 7
        | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C2 ->
          MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 7
        | Bench.MiniParse.Size7.Factor10.Seed00.Goal.C1 ->
          MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 7
        | _ -> MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 7)
      <:
      MiniParse.Spec.Int.bounded_u16 7)
  ()
Tactic fun _ ->
  MiniParse.Tac.Impl.gen_parser_impl (FStar.Tactics.Types.Goal)
  <:
  FStar.Tactics.Effect.TAC Prims.unit ran in 76638 ms (Goal)
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
Verified module: Bench.MiniParse.Size7.Factor10.Seed00.Goal (117139 milliseconds)
All verification conditions discharged successfully
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
../../../bin/fstar.exe --cache_off --odir _output --cache_dir _cache Bench.MiniParse.Size4.Factor10.Seed00.Goal.fst --include ..
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> No goals left
TAC>> Checking success for: synth_inverse_forall_bounded_u16_solve
TAC>> Success: synth_inverse_forall_bounded_u16_solve
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
/home/guido/r/fstar/examples/miniparse/MiniParse.Spec.List.fst(106,54-106,65): (Warning 288) FStar.Seq.Base.createEmpty is deprecated, use Seq.empty instead
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Unfolded definition: MiniParse.Tac.Spec.t
TAC>> Unfolded definition: MiniParse.Tac.Spec.u8
TAC>> Unfolded definition: MiniParse.Tac.Spec.u8
TAC>> Unfolded definition: MiniParse.Tac.Spec.u8
TAC>> No goals left
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Unfolded definition: MiniParse.Tac.Impl.p
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> No goals left
TAC>> gen_parser_impl spits:
TAC>> MiniParse.Impl.Combinators.parse_nondep_then_impl MiniParse.Impl.Int.parse_u8_impl
  (MiniParse.Impl.Combinators.parse_ret_impl 42)
TAC>> Unfolded definition: MiniParse.Tac.Impl.p'
TAC>> Unfolded definition: MiniParse.Tac.Impl.p
TAC>> No goals left
TAC>> gen_parser_impl spits:
TAC>> MiniParse.Impl.Combinators.parse_nondep_then_impl #(FStar.UInt8.t * Prims.int)
  #MiniParse.Tac.Impl.p
  (MiniParse.Impl.Combinators.parse_nondep_then_impl #FStar.UInt8.t
      #MiniParse.Spec.Int.parse_u8
      MiniParse.Impl.Int.parse_u8_impl
      #Prims.int
      #(MiniParse.Spec.Combinators.parse_ret #Prims.int 42)
      (MiniParse.Impl.Combinators.parse_ret_impl #Prims.int 42))
  #FStar.UInt8.t
  #MiniParse.Spec.Int.parse_u8
  MiniParse.Impl.Int.parse_u8_impl
TAC>> Unfolded definition: MiniParse.Tac.Impl.r
TAC>> No goals left
TAC>> gen_parser_impl spits:
TAC>> MiniParse.Impl.Combinators.parse_synth_impl #Prims.int
  #Prims.int
  #(MiniParse.Spec.Combinators.parse_ret #Prims.int 42)
  (MiniParse.Impl.Combinators.parse_ret_impl #Prims.int 42)
  (fun x -> x + 1)
  (fun x0 -> (fun x -> x + 1) x0)
  (fun x -> x - 1)
  ()
TAC>> Unfolded definition: MiniParse.Tac.Impl.j
TAC>> Unfolded definition: MiniParse.Tac.Spec.p
TAC>> Applied: implies_intro
TAC>> No goals left
TAC>> gen_parser_impl spits:
TAC>> MiniParse.Impl.Combinators.parse_nondep_then_impl #MiniParse.Tac.Spec.u8
  #MiniParse.Spec.Int.parse_u8
  MiniParse.Impl.Int.parse_u8_impl
  #(MiniParse.Spec.List.nlist 79 MiniParse.Tac.Spec.u8 * MiniParse.Tac.Spec.u8)
  #(MiniParse.Spec.Combinators.nondep_then #(MiniParse.Spec.List.nlist 79 MiniParse.Tac.Spec.u8)
      (MiniParse.Spec.List.parse_nlist 79 #MiniParse.Tac.Spec.u8 MiniParse.Spec.Int.parse_u8)
      #MiniParse.Tac.Spec.u8
      MiniParse.Spec.Int.parse_u8)
  (MiniParse.Impl.Combinators.parse_nondep_then_impl #(MiniParse.Spec.List.nlist 79
          MiniParse.Tac.Spec.u8)
      #(MiniParse.Spec.List.parse_nlist 79 #MiniParse.Tac.Spec.u8 MiniParse.Spec.Int.parse_u8)
      (MiniParse.Impl.List.parse_nlist_impl 79
          (MiniParse.Tac.Impl.mk_u32 79)
          #MiniParse.Tac.Spec.u8
          #MiniParse.Spec.Int.parse_u8
          MiniParse.Impl.Int.parse_u8_impl)
      #MiniParse.Tac.Spec.u8
      #MiniParse.Spec.Int.parse_u8
      MiniParse.Impl.Int.parse_u8_impl)
TAC>> Applied: forall_intro
TAC>> Inductive type with 4
TAC>> function
| Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4 ->
  MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4
| Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3 ->
  MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 4
| Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2 ->
  MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 4
| Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1 ->
  MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 4
| _ -> MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
proof-state: State dump @ depth 2 (Some goals left):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Tac.Base.fst(169,4-169,28)
ACTIVE goals (1):
 |- _ : Prims.squash ((forall (x2: MiniParse.Spec.Int.bounded_u16 4).
        (*could not prove post-condition*)
        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4 /\
        (forall (return_val: MiniParse.Spec.Int.bounded_u16 4).
            return_val == MiniParse.Spec.Int.mk_u16 0 ==>
            (forall (any_result: Prims.bool).
                MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0) == any_result ==>
                (forall (any_result:
                    (
                        x1:
                        (
                            _:
                            MiniParse.Tac.Base.ctest true
                              (MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0)) ->
                            Prims.Tot Bench.MiniParse.Size4.Factor10.Seed00.Goal.test) ->
                        x2:
                        (
                            _:
                            MiniParse.Tac.Base.ctest false
                              (MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0)) ->
                            Prims.Tot Bench.MiniParse.Size4.Factor10.Seed00.Goal.test) ->
                        Prims.Tot Bench.MiniParse.Size4.Factor10.Seed00.Goal.test)).
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4 /\
                    (forall (any_result:
                        (
                            _:
                            MiniParse.Tac.Base.ctest true
                              (MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0)) ->
                            Prims.Tot Bench.MiniParse.Size4.Factor10.Seed00.Goal.test)).
                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1) == any_result ==>
                        (forall (any_result:
                            (
                                x2:
                                (
                                    _:
                                    MiniParse.Tac.Base.ctest false
                                      (MiniParse.Spec.Int.bounded_u16_eq 4
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 0)) ->
                                    Prims.Tot Bench.MiniParse.Size4.Factor10.Seed00.Goal.test) ->
                                Prims.Tot Bench.MiniParse.Size4.Factor10.Seed00.Goal.test)).
                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4 /\
                            (forall (x8:
                                MiniParse.Tac.Base.ctest false
                                  (MiniParse.Spec.Int.bounded_u16_eq 4
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 0))).
                                (*could not prove post-condition*)
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                                (forall (return_val: MiniParse.Spec.Int.bounded_u16 4).
                                    return_val == MiniParse.Spec.Int.mk_u16 1 ==>
                                    (forall (any_result: Prims.bool).
                                        MiniParse.Spec.Int.bounded_u16_eq 4
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 1) ==
                                        any_result ==>
                                        (forall (any_result:
                                            (
                                                x1:
                                                (
                                                    _:
                                                    MiniParse.Tac.Base.ctest true
                                                      (MiniParse.Spec.Int.bounded_u16_eq 4
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 1)) ->
                                                    Prims.Tot
                                                    Bench.MiniParse.Size4.Factor10.Seed00.Goal.test) ->
                                                x2:
                                                (
                                                    _:
                                                    MiniParse.Tac.Base.ctest false
                                                      (MiniParse.Spec.Int.bounded_u16_eq 4
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 1)) ->
                                                    Prims.Tot
                                                    Bench.MiniParse.Size4.Factor10.Seed00.Goal.test) ->
                                                Prims.Tot
                                                Bench.MiniParse.Size4.Factor10.Seed00.Goal.test)).
                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                                            (forall (any_result:
                                                (
                                                    _:
                                                    MiniParse.Tac.Base.ctest true
                                                      (MiniParse.Spec.Int.bounded_u16_eq 4
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 1)) ->
                                                    Prims.Tot
                                                    Bench.MiniParse.Size4.Factor10.Seed00.Goal.test))
                                              .
                                                (fun _ ->
                                                    Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2) ==
                                                any_result ==>
                                                (forall (any_result:
                                                    (
                                                        x2:
                                                        (
                                                            _:
                                                            MiniParse.Tac.Base.ctest false
                                                              (MiniParse.Spec.Int.bounded_u16_eq 4
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 1)) ->
                                                            Prims.Tot
                                                            Bench.MiniParse.Size4.Factor10.Seed00.Goal.test
                                                        ) ->
                                                        Prims.Tot
                                                        Bench.MiniParse.Size4.Factor10.Seed00.Goal.test
                                                    )).
                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                                                    (forall (x6:
                                                        MiniParse.Tac.Base.ctest false
                                                          (MiniParse.Spec.Int.bounded_u16_eq 4
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 1))).
                                                        (*could not prove post-condition*)
                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) <
                                                        4 /\
                                                        (forall (return_val:
                                                            MiniParse.Spec.Int.bounded_u16 4).
                                                            return_val ==
                                                            MiniParse.Spec.Int.mk_u16 2 ==>
                                                            (forall (any_result: Prims.bool).
                                                                MiniParse.Spec.Int.bounded_u16_eq 4
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 2) ==
                                                                any_result ==>
                                                                (forall (any_result:
                                                                    (
                                                                        x1:
                                                                        (
                                                                            _:
                                                                            MiniParse.Tac.Base.ctest 
                                                                              true
                                                                              (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  4
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      2)) ->
                                                                            Prims.Tot
                                                                            Bench.MiniParse.Size4.Factor10.Seed00.Goal.test
                                                                        ) ->
                                                                        x2:
                                                                        (
                                                                            _:
                                                                            MiniParse.Tac.Base.ctest 
                                                                              false
                                                                              (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  4
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      2)) ->
                                                                            Prims.Tot
                                                                            Bench.MiniParse.Size4.Factor10.Seed00.Goal.test
                                                                        ) ->
                                                                        Prims.Tot
                                                                        Bench.MiniParse.Size4.Factor10.Seed00.Goal.test
                                                                    )).
                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                          2) <
                                                                    4 /\
                                                                    (forall (any_result:
                                                                        (
                                                                            _:
                                                                            MiniParse.Tac.Base.ctest 
                                                                              true
                                                                              (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  4
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      2)) ->
                                                                            Prims.Tot
                                                                            Bench.MiniParse.Size4.Factor10.Seed00.Goal.test
                                                                        )).
                                                                        (fun _ ->
                                                                            Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3
                                                                        ) ==
                                                                        any_result ==>
                                                                        (forall (any_result:
                                                                            (
                                                                                x2:
                                                                                (
                                                                                    _:
                                                                                    MiniParse.Tac.Base.ctest 
                                                                                      false
                                                                                      (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                          4
                                                                                          x2
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              2)) ->
                                                                                    Prims.Tot
                                                                                    Bench.MiniParse.Size4.Factor10.Seed00.Goal.test
                                                                                ) ->
                                                                                Prims.Tot
                                                                                Bench.MiniParse.Size4.Factor10.Seed00.Goal.test
                                                                            )).
                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                                                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                  2) <
                                                                            4)))))))))))))))))) /\
    (forall (any_result:
        (_: MiniParse.Spec.Int.bounded_u16 4 ->
            Prims.GTot Bench.MiniParse.Size4.Factor10.Seed00.Goal.test)).
        (fun x2 ->
            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                  x2
                  (MiniParse.Spec.Int.mk_u16 0))
              (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
              (fun _ ->
                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                        x2
                        (MiniParse.Spec.Int.mk_u16 1))
                    (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                    (fun _ ->
                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                              x2
                              (MiniParse.Spec.Int.mk_u16 2))
                          (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                          (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4)))) ==
        any_result ==>
        (forall (any_result:
            (
                g1:
                (_: Bench.MiniParse.Size4.Factor10.Seed00.Goal.test ->
                    Prims.GTot (MiniParse.Spec.Int.bounded_u16 4)) ->
                Prims.Pure
                  (MiniParse.Spec.Base.parser_spec Bench.MiniParse.Size4.Factor10.Seed00.Goal.test)
                  (MiniParse.Spec.Combinators.synth_inverse g1
                      (fun x2 ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x2
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4)))))
                  (fun _ -> Prims.l_True))).
            (forall (x1: Bench.MiniParse.Size4.Factor10.Seed00.Goal.test).
                (*could not prove post-condition*)
                C4? x1 == true ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) < 4 /\
                ~(C4? x1 == true) ==>
                (C3? x1 == true ==>
                  (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                  FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 4) /\
                (~(C3? x1 == true) ==>
                  C2? x1 == true ==>
                  (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                  FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                  ~(C2? x1 == true) ==>
                  (C1? x1 == true ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4) /\
                  (~(C1? x1 == true) ==>
                    (forall (b: Bench.MiniParse.Size4.Factor10.Seed00.Goal.test).
                        x1 == b ==>
                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) < 4)))) /\
            (forall (any_result:
                (_: Bench.MiniParse.Size4.Factor10.Seed00.Goal.test ->
                    Prims.GTot (MiniParse.Spec.Int.bounded_u16 4))).
                (fun x1 ->
                    (match x1 with
                      | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4 ->
                        MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4
                      | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3 ->
                        MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 4
                      | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2 ->
                        MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 4
                      | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1 ->
                        MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 4
                      | _ -> MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4)
                    <:
                    MiniParse.Spec.Int.bounded_u16 4) ==
                any_result ==>
                MiniParse.Spec.Combinators.synth_inverse (fun x1 ->
                      (match x1 with
                        | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4 ->
                          MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4
                        | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3 ->
                          MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 4
                        | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2 ->
                          MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 4
                        | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1 ->
                          MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 4
                        | _ -> MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4)
                      <:
                      MiniParse.Spec.Int.bounded_u16 4)
                  (fun x2 ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                            x2
                            (MiniParse.Spec.Int.mk_u16 0))
                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 1))
                              (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 2))
                                    (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                                    (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4))))))))
SMT goals (0):

TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
proof-state: State dump @ depth 39 (synth_inverse_forall_tenum_solve FAILED here:):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Spec.TEnum.fst(183,12-183,66)
ACTIVE goals (1):
(x:
(_: MiniParse.Spec.Int.bounded_u16 10 -> Prims.GTot Bench.MiniParse.Size10.Factor1.Seed00.Goal.test)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
          x2
          (MiniParse.Spec.Int.mk_u16 0))
      (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 6))
                                          (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 7))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 8))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                      )
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                      )))))))))) ==
x), (x:
(x: MiniParse.Spec.Int.bounded_u16 10 ->
    Prims.Tot
    (y:
      Bench.MiniParse.Size10.Factor1.Seed00.Goal.test
        { y ==
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x
                                                    (MiniParse.Spec.Int.mk_u16 6))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x
                                                          (MiniParse.Spec.Int.mk_u16 7))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x
                                                                (MiniParse.Spec.Int.mk_u16 8))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                            )
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                            ))))))))) }))), (x:
(_: Bench.MiniParse.Size10.Factor1.Seed00.Goal.test ->
    Prims.GTot (MiniParse.Spec.Int.bounded_u16 10))), (x:
u4567535:
Prims.unit
  { MiniParse.Spec.Combinators.synth_inverse x
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 6))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 7))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 8))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                            )
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                            )))))))))) }), (x:
(_: MiniParse.Spec.Int.bounded_u16 10 -> Prims.GTot Bench.MiniParse.Size10.Factor1.Seed00.Goal.test)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
          x2
          (MiniParse.Spec.Int.mk_u16 0))
      (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 6))
                                          (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 7))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 8))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                      )
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                      )))))))))) ==
x) |- _ : Prims.squash (MiniParse.Spec.Combinators.synth_inverse x
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 6))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 7))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 8))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                            )
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                            )))))))))))
SMT goals (0):

TAC>> Checking success for: assumption
TAC>> Success: assumption
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: synth_inverse_forall_bounded_u16_solve, main goal
TAC>> Success: synth_inverse_forall_bounded_u16_solve, main goal
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
proof-state: State dump @ depth 28 (Some goals left):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Tac.Base.fst(169,4-169,28)
ACTIVE goals (1):
(x:
(_: MiniParse.Spec.Int.bounded_u16 4 -> Prims.GTot Bench.MiniParse.Size4.Factor10.Seed00.Goal.test)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4)))) ==
x), (x:
(
    g1:
    (_: Bench.MiniParse.Size4.Factor10.Seed00.Goal.test ->
        Prims.GTot (MiniParse.Spec.Int.bounded_u16 4)) ->
    Prims.Pure (MiniParse.Spec.Base.parser_spec Bench.MiniParse.Size4.Factor10.Seed00.Goal.test)
      (MiniParse.Spec.Combinators.synth_inverse g1
          (fun x2 ->
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                    x2
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                          x2
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x2
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4)))))
      (fun _ -> Prims.l_True))), (x:
(_: Bench.MiniParse.Size4.Factor10.Seed00.Goal.test -> Prims.GTot (MiniParse.Spec.Int.bounded_u16 4)
)), (_:
(fun x1 ->
    (match x1 with
      | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4 ->
        MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4
      | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3 ->
        MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 4
      | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2 ->
        MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 4
      | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1 ->
        MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 4
      | _ -> MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4)
    <:
    MiniParse.Spec.Int.bounded_u16 4) ==
x) |- _ : Prims.squash ((forall (x2: MiniParse.Spec.Int.bounded_u16 4).
        (*could not prove post-condition*)
        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4 /\
        (forall (return_val: MiniParse.Spec.Int.bounded_u16 4).
            return_val == MiniParse.Spec.Int.mk_u16 0 ==>
            (forall (any_result: Prims.bool).
                MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0) == any_result ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4 /\
                (forall (any_result:
                    (
                        _:
                        MiniParse.Tac.Base.ctest true
                          (MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0)) ->
                        Prims.Tot Bench.MiniParse.Size4.Factor10.Seed00.Goal.test)).
                    (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1) == any_result ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4 /\
                    (forall (x8:
                        MiniParse.Tac.Base.ctest false
                          (MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0))).
                        (*could not prove post-condition*)
                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 4).
                            return_val == MiniParse.Spec.Int.mk_u16 1 ==>
                            (forall (any_result: Prims.bool).
                                MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 1) ==
                                any_result ==>
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                                (forall (any_result:
                                    (
                                        _:
                                        MiniParse.Tac.Base.ctest true
                                          (MiniParse.Spec.Int.bounded_u16_eq 4
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1)) ->
                                        Prims.Tot Bench.MiniParse.Size4.Factor10.Seed00.Goal.test)).
                                    (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2) ==
                                    any_result ==>
                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                                    (forall (x6:
                                        MiniParse.Tac.Base.ctest false
                                          (MiniParse.Spec.Int.bounded_u16_eq 4
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1))).
                                        (*could not prove post-condition*)
                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 4 /\
                                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 4).
                                            return_val == MiniParse.Spec.Int.mk_u16 2 ==>
                                            (forall (any_result: Prims.bool).
                                                MiniParse.Spec.Int.bounded_u16_eq 4
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 2) ==
                                                any_result ==>
                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 4 /\
                                                (forall (any_result:
                                                    (
                                                        _:
                                                        MiniParse.Tac.Base.ctest true
                                                          (MiniParse.Spec.Int.bounded_u16_eq 4
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2)) ->
                                                        Prims.Tot
                                                        Bench.MiniParse.Size4.Factor10.Seed00.Goal.test
                                                    )).
                                                    (fun _ ->
                                                        Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3
                                                    ) ==
                                                    any_result ==>
                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 4
                                                )))))))))))) /\
    (forall (any_result:
        (_: MiniParse.Spec.Int.bounded_u16 4 ->
            Prims.GTot Bench.MiniParse.Size4.Factor10.Seed00.Goal.test)).
        (fun x2 ->
            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                  x2
                  (MiniParse.Spec.Int.mk_u16 0))
              (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
              (fun _ ->
                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                        x2
                        (MiniParse.Spec.Int.mk_u16 1))
                    (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                    (fun _ ->
                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                              x2
                              (MiniParse.Spec.Int.mk_u16 2))
                          (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                          (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4)))) ==
        any_result ==>
        (forall (any_result:
            (
                f2:
                (_: Bench.MiniParse.Size4.Factor10.Seed00.Goal.test ->
                    Prims.GTot (MiniParse.Spec.Int.bounded_u16 4)) ->
                u98476:
                Prims.squash (MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16' 4
                      Bench.MiniParse.Size4.Factor10.Seed00.Goal.test
                      (fun x2 ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x2
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4))))
                      f2) ->
                Prims.Tot
                (Prims.squash (MiniParse.Spec.Combinators.synth_inverse f2
                        (fun x2 ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 0))
                              (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 1))
                                    (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              4
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 2))
                                          (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                                          (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4)))
                        )))))
            (x1: Bench.MiniParse.Size4.Factor10.Seed00.Goal.test).
            (*could not prove post-condition*)
            C4? x1 == true ==>
            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) < 4 /\
            ~(C4? x1 == true) ==>
            (C3? x1 == true ==>
              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 4) /\
            (~(C3? x1 == true) ==>
              C2? x1 == true ==>
              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
              ~(C2? x1 == true) ==>
              (C1? x1 == true ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4) /\
              (~(C1? x1 == true) ==>
                (forall (b: Bench.MiniParse.Size4.Factor10.Seed00.Goal.test).
                    x1 == b ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) < 4))))))
SMT goals (0):

TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Applied: forall_intro
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> No goals left
TAC>> Checking success for: synth_inverse_forall_bounded_u16_solve
TAC>> Success: synth_inverse_forall_bounded_u16_solve
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> No goals left
Tactic fun _ ->
  MiniParse.Spec.TEnum.gen_enum_parser (FStar.Tactics.Types.Goal)
    (`Bench.MiniParse.Size10.Factor10.Seed00.Goal.test)
  <:
  FStar.Tactics.Effect.TAC Prims.unit ran in 81012 ms (Goal)
TAC>> Applied: implies_intro
TAC>> Unfolded definition: Bench.MiniParse.Size10.Factor10.Seed00.Goal.pBenchMiniParseSize10Factor10Seed00Goal
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
proof-state: State dump @ depth 3 (Some goals left):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Tac.Base.fst(169,4-169,28)
ACTIVE goals (1):
 |- _ : Prims.squash ((forall (x2: MiniParse.Spec.Int.bounded_u16 10).
        (*could not prove post-condition*)
        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10 /\
        (forall (return_val: MiniParse.Spec.Int.bounded_u16 10).
            return_val == MiniParse.Spec.Int.mk_u16 0 ==>
            (forall (any_result: Prims.bool).
                MiniParse.Spec.Int.bounded_u16_eq 10 x2 (MiniParse.Spec.Int.mk_u16 0) == any_result ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10 /\
                (forall (any_result:
                    (
                        _:
                        MiniParse.Tac.Base.ctest true
                          (MiniParse.Spec.Int.bounded_u16_eq 10 x2 (MiniParse.Spec.Int.mk_u16 0)) ->
                        Prims.Tot Bench.MiniParse.Size10.Factor10.Seed00.Goal.test)).
                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1) == any_result ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10 /\
                    (forall (x20:
                        MiniParse.Tac.Base.ctest false
                          (MiniParse.Spec.Int.bounded_u16_eq 10 x2 (MiniParse.Spec.Int.mk_u16 0))).
                        (*could not prove post-condition*)
                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 10).
                            return_val == MiniParse.Spec.Int.mk_u16 1 ==>
                            (forall (any_result: Prims.bool).
                                MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 1) ==
                                any_result ==>
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                                (forall (any_result:
                                    (
                                        _:
                                        MiniParse.Tac.Base.ctest true
                                          (MiniParse.Spec.Int.bounded_u16_eq 10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1)) ->
                                        Prims.Tot Bench.MiniParse.Size10.Factor10.Seed00.Goal.test))
                                  .
                                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2) ==
                                    any_result ==>
                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                                    (forall (x18:
                                        MiniParse.Tac.Base.ctest false
                                          (MiniParse.Spec.Int.bounded_u16_eq 10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1))).
                                        (*could not prove post-condition*)
                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 10 /\
                                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 10).
                                            return_val == MiniParse.Spec.Int.mk_u16 2 ==>
                                            (forall (any_result: Prims.bool).
                                                MiniParse.Spec.Int.bounded_u16_eq 10
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 2) ==
                                                any_result ==>
                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 10 /\
                                                (forall (any_result:
                                                    (
                                                        _:
                                                        MiniParse.Tac.Base.ctest true
                                                          (MiniParse.Spec.Int.bounded_u16_eq 10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2)) ->
                                                        Prims.Tot
                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                    )).
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3
                                                    ) ==
                                                    any_result ==>
                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) <
                                                    10 /\
                                                    (forall (x16:
                                                        MiniParse.Tac.Base.ctest false
                                                          (MiniParse.Spec.Int.bounded_u16_eq 10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2))).
                                                        (*could not prove post-condition*)
                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) <
                                                        10 /\
                                                        (forall (return_val:
                                                            MiniParse.Spec.Int.bounded_u16 10).
                                                            return_val ==
                                                            MiniParse.Spec.Int.mk_u16 3 ==>
                                                            (forall (any_result: Prims.bool).
                                                                MiniParse.Spec.Int.bounded_u16_eq 10
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 3) ==
                                                                any_result ==>
                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                      3) <
                                                                10 /\
                                                                (forall (any_result:
                                                                    (
                                                                        _:
                                                                        MiniParse.Tac.Base.ctest true
                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                              10
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  3)) ->
                                                                        Prims.Tot
                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                    )).
                                                                    (fun _ ->
                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4
                                                                    ) ==
                                                                    any_result ==>
                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                          3) <
                                                                    10 /\
                                                                    (forall (x14:
                                                                        MiniParse.Tac.Base.ctest false
                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                              10
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  3))).
                                                                        (*could not prove post-condition*)
                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                              4) <
                                                                        10 /\
                                                                        (forall (return_val:
                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                              10).
                                                                            return_val ==
                                                                            MiniParse.Spec.Int.mk_u16 
                                                                              4 ==>
                                                                            (forall (any_result:
                                                                                Prims.bool).
                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  10
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      4) ==
                                                                                any_result ==>
                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                      4) <
                                                                                10 /\
                                                                                (forall (any_result:
                                                                                    (
                                                                                        _:
                                                                                        MiniParse.Tac.Base.ctest 
                                                                                          true
                                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                              10
                                                                                              x2
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  4)
                                                                                          ) ->
                                                                                        Prims.Tot
                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                    )).
                                                                                    (fun _ ->
                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5
                                                                                    ) ==
                                                                                    any_result ==>
                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                          4) <
                                                                                    10 /\
                                                                                    (forall (x12:
                                                                                        MiniParse.Tac.Base.ctest 
                                                                                          false
                                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                              10
                                                                                              x2
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  4)
                                                                                          )).
                                                                                        (*could not prove post-condition*)
                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                        FStar.UInt16.v 
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              5) <
                                                                                        10 /\
                                                                                        (forall (return_val:
                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                              10).
                                                                                            return_val ==
                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                              5 ==>
                                                                                            (forall (any_result:
                                                                                                Prims.bool)
                                                                                              .
                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                  10
                                                                                                  x2
                                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                                      5
                                                                                                    
                                                                                                  ) ==
                                                                                                any_result ==>
                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                FStar.UInt16.v 
                                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                                      5
                                                                                                    
                                                                                                  ) <
                                                                                                10 /\
                                                                                                (forall 
                                                                                                    (any_result:
                                                                                                    (
                                                                                                      
                                                                                                        _:
                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                          true
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                              10
                                                                                                              x2
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                  5
                                                                                                                
                                                                                                              )
                                                                                                            
                                                                                                          )
                                                                                                         ->
                                                                                                        Prims.Tot
                                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                    ))
                                                                                                  .
                                                                                                    (
                                                                                                      fun
                                                                                                        _
                                                                                                        ->
                                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6
                                                                                                    ) ==
                                                                                                    any_result ==>
                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                    FStar.UInt16.v 
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                          5
                                                                                                        
                                                                                                      )
                                                                                                     <
                                                                                                    10 /\
                                                                                                    (
                                                                                                      forall 
                                                                                                        (x10:
                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                          false
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                              10
                                                                                                              x2
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                  5
                                                                                                                
                                                                                                              )
                                                                                                            
                                                                                                          )
                                                                                                        )
                                                                                                      .
                                                                                                        (*could not prove post-condition*)
                                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                        FStar.UInt16.v 
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              6
                                                                                                            
                                                                                                          )
                                                                                                         <
                                                                                                        10 /\
                                                                                                        (
                                                                                                          forall 
                                                                                                            (return_val:
                                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                                              10
                                                                                                            )
                                                                                                          .
                                                                                                            return_val ==
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              6
                                                                                                             ==>
                                                                                                            (
                                                                                                              forall 
                                                                                                                (any_result:
                                                                                                                Prims.bool)
                                                                                                              .
                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                  10
                                                                                                                  x2
                                                                                                                  (
                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                      6
                                                                                                                    
                                                                                                                  )
                                                                                                                 ==
                                                                                                                any_result ==>
                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                FStar.UInt16.v 
                                                                                                                  (
                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                      6
                                                                                                                    
                                                                                                                  )
                                                                                                                 <
                                                                                                                10 /\
                                                                                                                (
                                                                                                                  forall 
                                                                                                                    (any_result:
                                                                                                                    (
                                                                                                                      
                                                                                                                        _:
                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                          true
                                                                                                                          (
                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                              10
                                                                                                                              x2
                                                                                                                              (
                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                  6
                                                                                                                                
                                                                                                                              )
                                                                                                                            
                                                                                                                          )
                                                                                                                         ->
                                                                                                                        Prims.Tot
                                                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                    ))
                                                                                                                  .
                                                                                                                    (
                                                                                                                      fun
                                                                                                                        _
                                                                                                                        ->
                                                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                                                                                    ) ==
                                                                                                                    any_result ==>
                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                    FStar.UInt16.v 
                                                                                                                      (
                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                          6
                                                                                                                        
                                                                                                                      )
                                                                                                                     <
                                                                                                                    10 /\
                                                                                                                    (
                                                                                                                      forall 
                                                                                                                        (x8:
                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                          false
                                                                                                                          (
                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                              10
                                                                                                                              x2
                                                                                                                              (
                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                  6
                                                                                                                                
                                                                                                                              )
                                                                                                                            
                                                                                                                          )
                                                                                                                        )
                                                                                                                      .
                                                                                                                        (*could not prove post-condition*)
                                                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                        FStar.UInt16.v 
                                                                                                                          (
                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                              7
                                                                                                                            
                                                                                                                          )
                                                                                                                         <
                                                                                                                        10 /\
                                                                                                                        (
                                                                                                                          forall 
                                                                                                                            (return_val:
                                                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                                                              10
                                                                                                                            )
                                                                                                                          .
                                                                                                                            return_val ==
                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                              7
                                                                                                                             ==>
                                                                                                                            (
                                                                                                                              forall 
                                                                                                                                (any_result:
                                                                                                                                Prims.bool)
                                                                                                                              .
                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                  10
                                                                                                                                  x2
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      7
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                 ==
                                                                                                                                any_result ==>
                                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                FStar.UInt16.v 
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      7
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                 <
                                                                                                                                10 /\
                                                                                                                                (
                                                                                                                                  forall 
                                                                                                                                    (any_result:
                                                                                                                                    (
                                                                                                                                      
                                                                                                                                        _:
                                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                                          true
                                                                                                                                          (
                                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                              10
                                                                                                                                              x2
                                                                                                                                              (
                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                  7
                                                                                                                                                
                                                                                                                                              )
                                                                                                                                            
                                                                                                                                          )
                                                                                                                                         ->
                                                                                                                                        Prims.Tot
                                                                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                    ))
                                                                                                                                  .
                                                                                                                                    (
                                                                                                                                      fun
                                                                                                                                        _
                                                                                                                                        ->
                                                                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                                                                                                    ) ==
                                                                                                                                    any_result ==>
                                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                    FStar.UInt16.v 
                                                                                                                                      (
                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                          7
                                                                                                                                        
                                                                                                                                      )
                                                                                                                                     <
                                                                                                                                    10 /\
                                                                                                                                    (
                                                                                                                                      forall 
                                                                                                                                        (x6:
                                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                                          false
                                                                                                                                          (
                                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                              10
                                                                                                                                              x2
                                                                                                                                              (
                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                  7
                                                                                                                                                
                                                                                                                                              )
                                                                                                                                            
                                                                                                                                          )
                                                                                                                                        )
                                                                                                                                      .
                                                                                                                                        (*could not prove post-condition*)
                                                                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                        FStar.UInt16.v 
                                                                                                                                          (
                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                              8
                                                                                                                                            
                                                                                                                                          )
                                                                                                                                         <
                                                                                                                                        10 /\
                                                                                                                                        (
                                                                                                                                          forall 
                                                                                                                                            (return_val:
                                                                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                                                                              10
                                                                                                                                            )
                                                                                                                                          .
                                                                                                                                            return_val ==
                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                              8
                                                                                                                                             ==>
                                                                                                                                            (
                                                                                                                                              forall 
                                                                                                                                                (any_result:
                                                                                                                                                Prims.bool)
                                                                                                                                              .
                                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                  10
                                                                                                                                                  x2
                                                                                                                                                  (
                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                      8
                                                                                                                                                    
                                                                                                                                                  )
                                                                                                                                                 ==
                                                                                                                                                any_result ==>
                                                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                FStar.UInt16.v 
                                                                                                                                                  (
                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                      8
                                                                                                                                                    
                                                                                                                                                  )
                                                                                                                                                 <
                                                                                                                                                10 /\
                                                                                                                                                (
                                                                                                                                                  forall 
                                                                                                                                                    (any_result:
                                                                                                                                                    (
                                                                                                                                                      
                                                                                                                                                        _:
                                                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                                                          true
                                                                                                                                                          (
                                                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                              10
                                                                                                                                                              x2
                                                                                                                                                              (
                                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                  8
                                                                                                                                                                
                                                                                                                                                              )
                                                                                                                                                            
                                                                                                                                                          )
                                                                                                                                                         ->
                                                                                                                                                        Prims.Tot
                                                                                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                                    ))
                                                                                                                                                  .
                                                                                                                                                    (
                                                                                                                                                      fun
                                                                                                                                                        _
                                                                                                                                                        ->
                                                                                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                                                                                                    ) ==
                                                                                                                                                    any_result ==>
                                                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                    FStar.UInt16.v 
                                                                                                                                                      (
                                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                                          8
                                                                                                                                                        
                                                                                                                                                      )
                                                                                                                                                     <
                                                                                                                                                    10
                                                                                                                                                )
                                                                                                                                            )
                                                                                                                                        )
                                                                                                                                    )
                                                                                                                                )
                                                                                                                            )
                                                                                                                        )
                                                                                                                    )
                                                                                                                )
                                                                                                            )
                                                                                                        )
                                                                                                    )
                                                                                                ))))
                                                                                )))))))))))))))))))) /\
    (forall (any_result:
        (_: MiniParse.Spec.Int.bounded_u16 10 ->
            Prims.GTot Bench.MiniParse.Size10.Factor10.Seed00.Goal.test)).
        (fun x2 ->
            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                  x2
                  (MiniParse.Spec.Int.mk_u16 0))
              (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
              (fun _ ->
                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                        x2
                        (MiniParse.Spec.Int.mk_u16 1))
                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                    (fun _ ->
                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                              x2
                              (MiniParse.Spec.Int.mk_u16 2))
                          (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                          (fun _ ->
                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                    x2
                                    (MiniParse.Spec.Int.mk_u16 3))
                                (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                                (fun _ ->
                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 4))
                                      (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                                      (fun _ ->
                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                10
                                                x2
                                                (MiniParse.Spec.Int.mk_u16 5))
                                            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6
                                            )
                                            (fun _ ->
                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                      10
                                                      x2
                                                      (MiniParse.Spec.Int.mk_u16 6))
                                                  (fun _ ->
                                                      Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                  )
                                                  (fun _ ->
                                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                            10
                                                            x2
                                                            (MiniParse.Spec.Int.mk_u16 7))
                                                        (fun _ ->
                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                        )
                                                        (fun _ ->
                                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                  10
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 8))
                                                              (fun _ ->
                                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                              )
                                                              (fun _ ->
                                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                              )))))))))) ==
        any_result ==>
        (forall (any_result:
            (
                f2':
                (x: MiniParse.Spec.Int.bounded_u16 10 ->
                    Prims.Tot
                    (y:
                      Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                        { y ==
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x
                                                  (MiniParse.Spec.Int.mk_u16 3))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x
                                                        (MiniParse.Spec.Int.mk_u16 4))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x
                                                              (MiniParse.Spec.Int.mk_u16 5))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x
                                                                    (MiniParse.Spec.Int.mk_u16 6))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                                )
                                                                (fun _ ->
                                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          10
                                                                          x
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              7))
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                                      )
                                                                      (fun _ ->
                                                                          MiniParse.Tac.Base.mk_if_t 
                                                                            (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                10
                                                                                x
                                                                                (MiniParse.Spec.Int.mk_u16 
                                                                                    8))
                                                                            (fun _ ->
                                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                            )
                                                                            (fun _ ->
                                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                                            ))))))))) })) ->
                g1:
                (_: Bench.MiniParse.Size10.Factor10.Seed00.Goal.test ->
                    Prims.GTot (MiniParse.Spec.Int.bounded_u16 10)) ->
                u1663936:
                u1663977:
                Prims.unit
                  { MiniParse.Spec.Combinators.synth_inverse g1
                      (fun x2 ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x2
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 3))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 4))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 5))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x2
                                                                    (MiniParse.Spec.Int.mk_u16 6))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                                )
                                                                (fun _ ->
                                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          10
                                                                          x2
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              7))
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                                      )
                                                                      (fun _ ->
                                                                          MiniParse.Tac.Base.mk_if_t 
                                                                            (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                10
                                                                                x2
                                                                                (MiniParse.Spec.Int.mk_u16 
                                                                                    8))
                                                                            (fun _ ->
                                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                            )
                                                                            (fun _ ->
                                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                                            )))))))))) } ->
                Prims.Tot
                (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                            10)
                        (fun x2 ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 0))
                              (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 1))
                                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 2))
                                          (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 3))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 4))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 5))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6
                                                            )
                                                            (fun _ ->
                                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                      10
                                                                      x2
                                                                      (MiniParse.Spec.Int.mk_u16 6))
                                                                  (fun _ ->
                                                                      Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                                  )
                                                                  (fun _ ->
                                                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                            10
                                                                            x2
                                                                            (MiniParse.Spec.Int.mk_u16 
                                                                                7))
                                                                        (fun _ ->
                                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                                        )
                                                                        (fun _ ->
                                                                            MiniParse.Tac.Base.mk_if_t 
                                                                              (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  10
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      8))
                                                                              (fun _ ->
                                                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                              )
                                                                              (fun _ ->
                                                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                                              ))))))))))
                        g1)))).
            (forall (x0: MiniParse.Spec.Int.bounded_u16 10).
                (*could not prove post-condition*)
                (forall (x2: MiniParse.Spec.Int.bounded_u16 10).
                    (*could not prove post-condition*)
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10 /\
                    (forall (return_val: MiniParse.Spec.Int.bounded_u16 10).
                        return_val == MiniParse.Spec.Int.mk_u16 0 ==>
                        (forall (any_result: Prims.bool).
                            MiniParse.Spec.Int.bounded_u16_eq 10 x2 (MiniParse.Spec.Int.mk_u16 0) ==
                            any_result ==>
                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10 /\
                            (forall (any_result:
                                (
                                    _:
                                    MiniParse.Tac.Base.ctest true
                                      (MiniParse.Spec.Int.bounded_u16_eq 10
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 0)) ->
                                    Prims.Tot Bench.MiniParse.Size10.Factor10.Seed00.Goal.test)).
                                (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1) ==
                                any_result ==>
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10 /\
                                (forall (x20:
                                    MiniParse.Tac.Base.ctest false
                                      (MiniParse.Spec.Int.bounded_u16_eq 10
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 0))).
                                    (*could not prove post-condition*)
                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                                    (forall (return_val: MiniParse.Spec.Int.bounded_u16 10).
                                        return_val == MiniParse.Spec.Int.mk_u16 1 ==>
                                        (forall (any_result: Prims.bool).
                                            MiniParse.Spec.Int.bounded_u16_eq 10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1) ==
                                            any_result ==>
                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                                            (forall (any_result:
                                                (
                                                    _:
                                                    MiniParse.Tac.Base.ctest true
                                                      (MiniParse.Spec.Int.bounded_u16_eq 10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 1)) ->
                                                    Prims.Tot
                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                )).
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2) ==
                                                any_result ==>
                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                                                (forall (x18:
                                                    MiniParse.Tac.Base.ctest false
                                                      (MiniParse.Spec.Int.bounded_u16_eq 10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 1))).
                                                    (*could not prove post-condition*)
                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) <
                                                    10 /\
                                                    (forall (return_val:
                                                        MiniParse.Spec.Int.bounded_u16 10).
                                                        return_val == MiniParse.Spec.Int.mk_u16 2 ==>
                                                        (forall (any_result: Prims.bool).
                                                            MiniParse.Spec.Int.bounded_u16_eq 10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2) ==
                                                            any_result ==>
                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                  2) <
                                                            10 /\
                                                            (forall (any_result:
                                                                (
                                                                    _:
                                                                    MiniParse.Tac.Base.ctest true
                                                                      (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          10
                                                                          x2
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              2)) ->
                                                                    Prims.Tot
                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                )).
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3
                                                                ) ==
                                                                any_result ==>
                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                      2) <
                                                                10 /\
                                                                (forall (x16:
                                                                    MiniParse.Tac.Base.ctest false
                                                                      (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          10
                                                                          x2
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              2))).
                                                                    (*could not prove post-condition*)
                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                          3) <
                                                                    10 /\
                                                                    (forall (return_val:
                                                                        MiniParse.Spec.Int.bounded_u16 
                                                                          10).
                                                                        return_val ==
                                                                        MiniParse.Spec.Int.mk_u16 3 ==>
                                                                        (forall (any_result:
                                                                            Prims.bool).
                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                              10
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  3) ==
                                                                            any_result ==>
                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                  3) <
                                                                            10 /\
                                                                            (forall (any_result:
                                                                                (
                                                                                    _:
                                                                                    MiniParse.Tac.Base.ctest 
                                                                                      true
                                                                                      (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                          10
                                                                                          x2
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              3)) ->
                                                                                    Prims.Tot
                                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                )).
                                                                                (fun _ ->
                                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4
                                                                                ) ==
                                                                                any_result ==>
                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                      3) <
                                                                                10 /\
                                                                                (forall (x14:
                                                                                    MiniParse.Tac.Base.ctest 
                                                                                      false
                                                                                      (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                          10
                                                                                          x2
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              3))).
                                                                                    (*could not prove post-condition*)
                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                          4) <
                                                                                    10 /\
                                                                                    (forall (return_val:
                                                                                        MiniParse.Spec.Int.bounded_u16 
                                                                                          10).
                                                                                        return_val ==
                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                          4 ==>
                                                                                        (forall (any_result:
                                                                                            Prims.bool)
                                                                                          .
                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                              10
                                                                                              x2
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  4) ==
                                                                                            any_result ==>
                                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                            FStar.UInt16.v 
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  4) <
                                                                                            10 /\
                                                                                            (forall (any_result:
                                                                                                (
                                                                                                    _:
                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                      true
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                          10
                                                                                                          x2
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              4
                                                                                                            
                                                                                                          )
                                                                                                        
                                                                                                      )
                                                                                                     ->
                                                                                                    Prims.Tot
                                                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                )).
                                                                                                (fun
                                                                                                    _
                                                                                                    ->
                                                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5
                                                                                                ) ==
                                                                                                any_result ==>
                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                FStar.UInt16.v 
                                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                                      4
                                                                                                    
                                                                                                  ) <
                                                                                                10 /\
                                                                                                (forall 
                                                                                                    (x12:
                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                      false
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                          10
                                                                                                          x2
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              4
                                                                                                            
                                                                                                          )
                                                                                                        
                                                                                                      )
                                                                                                    )
                                                                                                  .
                                                                                                    (*could not prove post-condition*)
                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                    FStar.UInt16.v 
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                          5
                                                                                                        
                                                                                                      )
                                                                                                     <
                                                                                                    10 /\
                                                                                                    (
                                                                                                      forall 
                                                                                                        (return_val:
                                                                                                        MiniParse.Spec.Int.bounded_u16 
                                                                                                          10
                                                                                                        )
                                                                                                      .
                                                                                                        return_val ==
                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                          5
                                                                                                         ==>
                                                                                                        (
                                                                                                          forall 
                                                                                                            (any_result:
                                                                                                            Prims.bool)
                                                                                                          .
                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                              10
                                                                                                              x2
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                  5
                                                                                                                
                                                                                                              )
                                                                                                             ==
                                                                                                            any_result ==>
                                                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                            FStar.UInt16.v 
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                  5
                                                                                                                
                                                                                                              )
                                                                                                             <
                                                                                                            10 /\
                                                                                                            (
                                                                                                              forall 
                                                                                                                (any_result:
                                                                                                                (
                                                                                                                  
                                                                                                                    _:
                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                      true
                                                                                                                      (
                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                          10
                                                                                                                          x2
                                                                                                                          (
                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                              5
                                                                                                                            
                                                                                                                          )
                                                                                                                        
                                                                                                                      )
                                                                                                                     ->
                                                                                                                    Prims.Tot
                                                                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                ))
                                                                                                              .
                                                                                                                (
                                                                                                                  fun
                                                                                                                    _
                                                                                                                    ->
                                                                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6
                                                                                                                ) ==
                                                                                                                any_result ==>
                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                FStar.UInt16.v 
                                                                                                                  (
                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                      5
                                                                                                                    
                                                                                                                  )
                                                                                                                 <
                                                                                                                10 /\
                                                                                                                (
                                                                                                                  forall 
                                                                                                                    (x10:
                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                      false
                                                                                                                      (
                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                          10
                                                                                                                          x2
                                                                                                                          (
                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                              5
                                                                                                                            
                                                                                                                          )
                                                                                                                        
                                                                                                                      )
                                                                                                                    )
                                                                                                                  .
                                                                                                                    (*could not prove post-condition*)
                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                    FStar.UInt16.v 
                                                                                                                      (
                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                          6
                                                                                                                        
                                                                                                                      )
                                                                                                                     <
                                                                                                                    10 /\
                                                                                                                    (
                                                                                                                      forall 
                                                                                                                        (return_val:
                                                                                                                        MiniParse.Spec.Int.bounded_u16 
                                                                                                                          10
                                                                                                                        )
                                                                                                                      .
                                                                                                                        return_val ==
                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                          6
                                                                                                                         ==>
                                                                                                                        (
                                                                                                                          forall 
                                                                                                                            (any_result:
                                                                                                                            Prims.bool)
                                                                                                                          .
                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                              10
                                                                                                                              x2
                                                                                                                              (
                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                  6
                                                                                                                                
                                                                                                                              )
                                                                                                                             ==
                                                                                                                            any_result ==>
                                                                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                            FStar.UInt16.v 
                                                                                                                              (
                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                  6
                                                                                                                                
                                                                                                                              )
                                                                                                                             <
                                                                                                                            10 /\
                                                                                                                            (
                                                                                                                              forall 
                                                                                                                                (any_result:
                                                                                                                                (
                                                                                                                                  
                                                                                                                                    _:
                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                      true
                                                                                                                                      (
                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                          10
                                                                                                                                          x2
                                                                                                                                          (
                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                              6
                                                                                                                                            
                                                                                                                                          )
                                                                                                                                        
                                                                                                                                      )
                                                                                                                                     ->
                                                                                                                                    Prims.Tot
                                                                                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                ))
                                                                                                                              .
                                                                                                                                (
                                                                                                                                  fun
                                                                                                                                    _
                                                                                                                                    ->
                                                                                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                                                                                                ) ==
                                                                                                                                any_result ==>
                                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                FStar.UInt16.v 
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      6
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                 <
                                                                                                                                10 /\
                                                                                                                                (
                                                                                                                                  forall 
                                                                                                                                    (x8:
                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                      false
                                                                                                                                      (
                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                          10
                                                                                                                                          x2
                                                                                                                                          (
                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                              6
                                                                                                                                            
                                                                                                                                          )
                                                                                                                                        
                                                                                                                                      )
                                                                                                                                    )
                                                                                                                                  .
                                                                                                                                    (*could not prove post-condition*)
                                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                    FStar.UInt16.v 
                                                                                                                                      (
                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                          7
                                                                                                                                        
                                                                                                                                      )
                                                                                                                                     <
                                                                                                                                    10 /\
                                                                                                                                    (
                                                                                                                                      forall 
                                                                                                                                        (return_val:
                                                                                                                                        MiniParse.Spec.Int.bounded_u16 
                                                                                                                                          10
                                                                                                                                        )
                                                                                                                                      .
                                                                                                                                        return_val ==
                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                          7
                                                                                                                                         ==>
                                                                                                                                        (
                                                                                                                                          forall 
                                                                                                                                            (any_result:
                                                                                                                                            Prims.bool)
                                                                                                                                          .
                                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                              10
                                                                                                                                              x2
                                                                                                                                              (
                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                  7
                                                                                                                                                
                                                                                                                                              )
                                                                                                                                             ==
                                                                                                                                            any_result ==>
                                                                                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                            FStar.UInt16.v 
                                                                                                                                              (
                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                  7
                                                                                                                                                
                                                                                                                                              )
                                                                                                                                             <
                                                                                                                                            10 /\
                                                                                                                                            (
                                                                                                                                              forall 
                                                                                                                                                (any_result:
                                                                                                                                                (
                                                                                                                                                  
                                                                                                                                                    _:
                                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                                      true
                                                                                                                                                      (
                                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                          10
                                                                                                                                                          x2
                                                                                                                                                          (
                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                              7
                                                                                                                                                            
                                                                                                                                                          )
                                                                                                                                                        
                                                                                                                                                      )
                                                                                                                                                     ->
                                                                                                                                                    Prims.Tot
                                                                                                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                                ))
                                                                                                                                              .
                                                                                                                                                (
                                                                                                                                                  fun
                                                                                                                                                    _
                                                                                                                                                    ->
                                                                                                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                                                                                                                ) ==
                                                                                                                                                any_result ==>
                                                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                FStar.UInt16.v 
                                                                                                                                                  (
                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                      7
                                                                                                                                                    
                                                                                                                                                  )
                                                                                                                                                 <
                                                                                                                                                10 /\
                                                                                                                                                (
                                                                                                                                                  forall 
                                                                                                                                                    (x6:
                                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                                      false
                                                                                                                                                      (
                                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                          10
                                                                                                                                                          x2
                                                                                                                                                          (
                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                              7
                                                                                                                                                            
                                                                                                                                                          )
                                                                                                                                                        
                                                                                                                                                      )
                                                                                                                                                    )
                                                                                                                                                  .
                                                                                                                                                    (*could not prove post-condition*)
                                                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                    FStar.UInt16.v 
                                                                                                                                                      (
                                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                                          8
                                                                                                                                                        
                                                                                                                                                      )
                                                                                                                                                     <
                                                                                                                                                    10 /\
                                                                                                                                                    (
                                                                                                                                                      forall 
                                                                                                                                                        (return_val:
                                                                                                                                                        MiniParse.Spec.Int.bounded_u16 
                                                                                                                                                          10
                                                                                                                                                        )
                                                                                                                                                      .
                                                                                                                                                        return_val ==
                                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                                          8
                                                                                                                                                         ==>
                                                                                                                                                        (
                                                                                                                                                          forall 
                                                                                                                                                            (any_result:
                                                                                                                                                            Prims.bool)
                                                                                                                                                          .
                                                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                              10
                                                                                                                                                              x2
                                                                                                                                                              (
                                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                  8
                                                                                                                                                                
                                                                                                                                                              )
                                                                                                                                                             ==
                                                                                                                                                            any_result ==>
                                                                                                                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                            FStar.UInt16.v 
                                                                                                                                                              (
                                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                  8
                                                                                                                                                                
                                                                                                                                                              )
                                                                                                                                                             <
                                                                                                                                                            10 /\
                                                                                                                                                            (
                                                                                                                                                              forall 
                                                                                                                                                                (any_result:
                                                                                                                                                                (
                                                                                                                                                                  
                                                                                                                                                                    _:
                                                                                                                                                                    MiniParse.Tac.Base.ctest 
                                                                                                                                                                      true
                                                                                                                                                                      (
                                                                                                                                                                        MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                                          10
                                                                                                                                                                          x2
                                                                                                                                                                          (
                                                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                              8
                                                                                                                                                                            
                                                                                                                                                                          )
                                                                                                                                                                        
                                                                                                                                                                      )
                                                                                                                                                                     ->
                                                                                                                                                                    Prims.Tot
                                                                                                                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                                                ))
                                                                                                                                                              .
                                                                                                                                                                (
                                                                                                                                                                  fun
                                                                                                                                                                    _
                                                                                                                                                                    ->
                                                                                                                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                                                                                                                ) ==
                                                                                                                                                                any_result ==>
                                                                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                                FStar.UInt16.v 
                                                                                                                                                                  (
                                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                      8
                                                                                                                                                                    
                                                                                                                                                                  )
                                                                                                                                                                 <
                                                                                                                                                                10
                                                                                                                                                            )
                                                                                                                                                        )
                                                                                                                                                    )
                                                                                                                                                )
                                                                                                                                            )
                                                                                                                                        )
                                                                                                                                    )
                                                                                                                                )
                                                                                                                            )
                                                                                                                        )
                                                                                                                    )
                                                                                                                )
                                                                                                            )
                                                                                                        )
                                                                                                    )
                                                                                                ))))
                                                                                ))))))))))))))))) /\
                (forall (any_result:
                    (x2: MiniParse.Spec.Int.bounded_u16 10 ->
                        Prims.Tot Bench.MiniParse.Size10.Factor10.Seed00.Goal.test))
                    (any_result: Bench.MiniParse.Size10.Factor10.Seed00.Goal.test).
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                          x0
                          (MiniParse.Spec.Int.mk_u16 0))
                      (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x0
                                (MiniParse.Spec.Int.mk_u16 1))
                            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x0
                                      (MiniParse.Spec.Int.mk_u16 2))
                                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x0
                                            (MiniParse.Spec.Int.mk_u16 3))
                                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x0
                                                  (MiniParse.Spec.Int.mk_u16 4))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x0
                                                        (MiniParse.Spec.Int.mk_u16 5))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x0
                                                              (MiniParse.Spec.Int.mk_u16 6))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x0
                                                                    (MiniParse.Spec.Int.mk_u16 7))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                                )
                                                                (fun _ ->
                                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          10
                                                                          x0
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              8))
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                      )
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                                      ))))))))) ==
                    any_result ==>
                    (*Subtyping check failed; expected type y:
Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
  { y ==
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
          x0
          (MiniParse.Spec.Int.mk_u16 0))
      (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x0
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x0
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x0
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x0
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x0
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x0
                                              (MiniParse.Spec.Int.mk_u16 6))
                                          (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x0
                                                    (MiniParse.Spec.Int.mk_u16 7))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x0
                                                          (MiniParse.Spec.Int.mk_u16 8))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                      )
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                      ))))))))) }; got type Bench.MiniParse.Size10.Factor10.Seed00.Goal.test*)
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                          x0
                          (MiniParse.Spec.Int.mk_u16 0))
                      (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x0
                                (MiniParse.Spec.Int.mk_u16 1))
                            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x0
                                      (MiniParse.Spec.Int.mk_u16 2))
                                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x0
                                            (MiniParse.Spec.Int.mk_u16 3))
                                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x0
                                                  (MiniParse.Spec.Int.mk_u16 4))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x0
                                                        (MiniParse.Spec.Int.mk_u16 5))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x0
                                                              (MiniParse.Spec.Int.mk_u16 6))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x0
                                                                    (MiniParse.Spec.Int.mk_u16 7))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                                )
                                                                (fun _ ->
                                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          10
                                                                          x0
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              8))
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                      )
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                                      ))))))))) ==
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                          x0
                          (MiniParse.Spec.Int.mk_u16 0))
                      (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x0
                                (MiniParse.Spec.Int.mk_u16 1))
                            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x0
                                      (MiniParse.Spec.Int.mk_u16 2))
                                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x0
                                            (MiniParse.Spec.Int.mk_u16 3))
                                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x0
                                                  (MiniParse.Spec.Int.mk_u16 4))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x0
                                                        (MiniParse.Spec.Int.mk_u16 5))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x0
                                                              (MiniParse.Spec.Int.mk_u16 6))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x0
                                                                    (MiniParse.Spec.Int.mk_u16 7))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                                )
                                                                (fun _ ->
                                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          10
                                                                          x0
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              8))
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                      )
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                                      ))))))))))) /\
            (forall (any_result:
                (x: MiniParse.Spec.Int.bounded_u16 10 ->
                    Prims.Tot
                    (y:
                      Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                        { y ==
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x
                                                  (MiniParse.Spec.Int.mk_u16 3))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x
                                                        (MiniParse.Spec.Int.mk_u16 4))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x
                                                              (MiniParse.Spec.Int.mk_u16 5))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x
                                                                    (MiniParse.Spec.Int.mk_u16 6))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                                )
                                                                (fun _ ->
                                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          10
                                                                          x
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              7))
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                                      )
                                                                      (fun _ ->
                                                                          MiniParse.Tac.Base.mk_if_t 
                                                                            (MiniParse.Spec.Int.bounded_u16_eq 
         TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
                                                                       10
                                                                                x
                                                                                (MiniParse.Spec.Int.mk_u16 
                                                                                    8))
                                                                            (fun _ ->
                                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                            )
                                                                            (fun _ ->
                                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                                            ))))))))) }))).
                (fun x0 ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                          x0
                          (MiniParse.Spec.Int.mk_u16 0))
                      (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x0
                                (MiniParse.Spec.Int.mk_u16 1))
                            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x0
                                      (MiniParse.Spec.Int.mk_u16 2))
                                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x0
                                            (MiniParse.Spec.Int.mk_u16 3))
                                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x0
                                                  (MiniParse.Spec.Int.mk_u16 4))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x0
                                                        (MiniParse.Spec.Int.mk_u16 5))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x0
                                                              (MiniParse.Spec.Int.mk_u16 6))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x0
                                                                    (MiniParse.Spec.Int.mk_u16 7))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                                )
                                                                (fun _ ->
                                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          10
                                                                          x0
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              8))
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                      )
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                                      )))))))))) ==
                any_result ==>
                (forall (any_result:
                    (
                        g1:
                        (_: Bench.MiniParse.Size10.Factor10.Seed00.Goal.test ->
                            Prims.GTot (MiniParse.Spec.Int.bounded_u16 10)) ->
                        u1664151:
                        u1664172:
                        Prims.unit
                          { MiniParse.Spec.Combinators.synth_inverse g1
                              (fun x2 ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 0))
                                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1))
                                          (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 2))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 3))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 4))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5
                                                            )
                                                            (fun _ ->
                                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                      10
                                                                      x2
                                                                      (MiniParse.Spec.Int.mk_u16 5))
                                                                  (fun _ ->
                                                                      Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6
                                                                  )
                                                                  (fun _ ->
                                                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                            10
                                                                            x2
                                                                            (MiniParse.Spec.Int.mk_u16 
                                                                                6))
                                                                        (fun _ ->
                                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                                        )
                                                                        (fun _ ->
                                                                            MiniParse.Tac.Base.mk_if_t 
                                                                              (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  10
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      7))
                                                                              (fun _ ->
                                                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                                              )
                                                                              (fun _ ->
                                                                                  MiniParse.Tac.Base.mk_if_t 
                                                                                    (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                        10
                                                                                        x2
                                                                                        (MiniParse.Spec.Int.mk_u16 
                                                                                            8))
                                                                                    (fun _ ->
                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                                    )
                                                                                    (fun _ ->
                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                                                    )))))))))) } ->
                        Prims.Tot
                        (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                                    10)
                                (fun x2 ->
                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 0))
                                      (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
                                      (fun _ ->
                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                10
                                                x2
                                                (MiniParse.Spec.Int.mk_u16 1))
                                            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2
                                            )
                                            (fun _ ->
                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                      10
                                                      x2
                                                      (MiniParse.Spec.Int.mk_u16 2))
                                                  (fun _ ->
                                                      Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3
                                                  )
                                                  (fun _ ->
                                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                            10
                                                            x2
                                                            (MiniParse.Spec.Int.mk_u16 3))
                                                        (fun _ ->
                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4
                                                        )
                                                        (fun _ ->
                                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                  10
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 4))
                                                              (fun _ ->
                                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5
                                                              )
                                                              (fun _ ->
                                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                        10
                                                                        x2
                                                                        (MiniParse.Spec.Int.mk_u16 5
                                                                        ))
                                                                    (fun _ ->
                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6
                                                                    )
                                                                    (fun _ ->
                                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                              10
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  6))
                                                                          (fun _ ->
                                                                              Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                                          )
                                                                          (fun _ ->
                                                                              MiniParse.Tac.Base.mk_if_t 
                                                                                (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                    10
                                                                                    x2
                                                                                    (MiniParse.Spec.Int.mk_u16 
                                                                                        7))
                                                                                (fun _ ->
                                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                                                )
                                                                                (fun _ ->
                                                                                    MiniParse.Tac.Base.mk_if_t 
                                                                                      (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                          10
                                                                                          x2
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              8))
                                                                                      (fun _ ->
                                                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                                      )
                                                                                      (fun _ ->
                                                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                                                      ))))))))))
                                g1)))).
                    (forall (x1: Bench.MiniParse.Size10.Factor10.Seed00.Goal.test).
                        (*could not prove post-condition*)
                        C10? x1 == true ==>
                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 9) < 10 /\
                        ~(C10? x1 == true) ==>
                        (C9? x1 == true ==>
                          (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                          FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 8) < 10) /\
                        (~(C9? x1 == true) ==>
                          C8? x1 == true ==>
                          (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                          FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 7) < 10 /\
                          ~(C8? x1 == true) ==>
                          (C7? x1 == true ==>
                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 6) < 10) /\
                          (~(C7? x1 == true) ==>
                            C6? x1 == true ==>
                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 5) < 10 /\
                            ~(C6? x1 == true) ==>
                            (C5? x1 == true ==>
                              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 4) < 10) /\
                            (~(C5? x1 == true) ==>
                              C4? x1 == true ==>
                              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) < 10 /\
                              ~(C4? x1 == true) ==>
                              (C3? x1 == true ==>
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 10) /\
                              (~(C3? x1 == true) ==>
                                C2? x1 == true ==>
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                                ~(C2? x1 == true) ==>
                                (C1? x1 == true ==>
                                  (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                  FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10) /\
                                (~(C1? x1 == true) ==>
                                  (forall (b: Bench.MiniParse.Size10.Factor10.Seed00.Goal.test).
                                      x1 == b ==>
                                      (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                      FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 9) < 10))))))) /\
                    (forall (any_result:
                        (_: Bench.MiniParse.Size10.Factor10.Seed00.Goal.test ->
                            Prims.GTot (MiniParse.Spec.Int.bounded_u16 10))).
                        (fun x1 ->
                            (match x1 with
                              | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10 ->
                                MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10
                              | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9 ->
                                MiniParse.Spec.Int.mk_u16 8 <: MiniParse.Spec.Int.bounded_u16 10
                              | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8 ->
                                MiniParse.Spec.Int.mk_u16 7 <: MiniParse.Spec.Int.bounded_u16 10
                              | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7 ->
                                MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 10
                              | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6 ->
                                MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 10
                              | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5 ->
                                MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 10
                              | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4 ->
                                MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 10
                              | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3 ->
                                MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 10
                              | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2 ->
                                MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 10
                              | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1 ->
                                MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 10
                              | _ ->
                                MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10)
                            <:
                            MiniParse.Spec.Int.bounded_u16 10) ==
                        any_result ==>
                        (forall (any_result:
                            (
                                u1664199:
                                u1664221:
                                Prims.unit
                                  { MiniParse.Spec.Combinators.synth_inverse (fun x1 ->
                                          (match x1 with
                                            | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10 ->
                                              MiniParse.Spec.Int.mk_u16 9
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 10
                                            | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9 ->
                                              MiniParse.Spec.Int.mk_u16 8
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 10
                                            | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8 ->
                                              MiniParse.Spec.Int.mk_u16 7
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 10
                                            | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7 ->
                                              MiniParse.Spec.Int.mk_u16 6
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 10
                                            | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6 ->
                                              MiniParse.Spec.Int.mk_u16 5
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 10
                                            | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5 ->
                                              MiniParse.Spec.Int.mk_u16 4
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 10
                                            | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4 ->
                                              MiniParse.Spec.Int.mk_u16 3
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 10
                                            | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3 ->
                                              MiniParse.Spec.Int.mk_u16 2
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 10
                                            | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2 ->
                                              MiniParse.Spec.Int.mk_u16 1
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 10
                                            | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1 ->
                                              MiniParse.Spec.Int.mk_u16 0
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 10
                                            | _ ->
                                              MiniParse.Spec.Int.mk_u16 9
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 10)
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 10)
                                      (fun x2 ->
                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                10
                                                x2
                                                (MiniParse.Spec.Int.mk_u16 0))
                                            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1
                                            )
                                            (fun _ ->
                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                      10
                                                      x2
                                                      (MiniParse.Spec.Int.mk_u16 1))
                                                  (fun _ ->
                                                      Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2
                                                  )
                                                  (fun _ ->
                                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                            10
                                                            x2
                                                            (MiniParse.Spec.Int.mk_u16 2))
                                                        (fun _ ->
                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3
                                                        )
                                                        (fun _ ->
                                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                  10
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 3))
                                                              (fun _ ->
                                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4
                                                              )
                                                              (fun _ ->
                                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                        10
                                                                        x2
                                                                        (MiniParse.Spec.Int.mk_u16 4
                                                                        ))
                                                                    (fun _ ->
                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5
                                                                    )
                                                                    (fun _ ->
                                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                              10
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  5))
                                                                          (fun _ ->
                                                                              Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6
                                                                          )
                                                                          (fun _ ->
                                                                              MiniParse.Tac.Base.mk_if_t 
                                                                                (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                    10
                                                                                    x2
                                                                                    (MiniParse.Spec.Int.mk_u16 
                                                                                        6))
                                                                                (fun _ ->
                                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                                                )
                                                                                (fun _ ->
                                                                                    MiniParse.Tac.Base.mk_if_t 
                                                                                      (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                          10
                                                                                          x2
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              7))
                                                                                      (fun _ ->
                                                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                                                      )
                                                                                      (fun _ ->
                                                                                          MiniParse.Tac.Base.mk_if_t 
                                                                                            (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                10
                                                                                                x2
                                                                                                (MiniParse.Spec.Int.mk_u16 
                                                                                                    8
                                                                                                  ))
                                                                                            (fun
                                                                                                _
                                                                                                ->
                                                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                                            )
                                                                                            (fun
                                                                                                _
                                                                                                ->
                                                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                                                            ))))))))
                                            )) } ->
                                Prims.Tot
                                (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth 
                                        (MiniParse.Spec.Int.parse_bounded_u16 10)
                                        (fun x2 ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 0))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 1))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x2
                                                                    (MiniParse.Spec.Int.mk_u16 3))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4
                                                                )
                                                                (fun _ ->
                                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          10
                                                                          x2
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              4))
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5
                                                                      )
                                                                      (fun _ ->
                                                                          MiniParse.Tac.Base.mk_if_t 
                                                                            (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                10
                                                                                x2
                                                                                (MiniParse.Spec.Int.mk_u16 
                                                                                    5))
                                                                            (fun _ ->
                                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6
                                                                            )
                                                                            (fun _ ->
                                                                                MiniParse.Tac.Base.mk_if_t 
                                                                                  (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                      10
                                                                                      x2
                                                                                      (MiniParse.Spec.Int.mk_u16 
                                                                                          6))
                                                                                  (fun _ ->
                                                                                      Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                                                  )
                                                                                  (fun _ ->
                                                                                      MiniParse.Tac.Base.mk_if_t 
                                                                                        (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                            10
                                                                                            x2
                                                                                            (MiniParse.Spec.Int.mk_u16 
                                                                                                7))
                                                                                        (fun _ ->
                                                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                                                        )
                                                                                        (fun _ ->
                                                                                            MiniParse.Tac.Base.mk_if_t 
                                                                                              (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                  10
                                                                                                  x2
                                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                                      8
                                                                                                    
                                                                                                  ))
                                                                                              (fun
                                                                                                  _
                                                                                                  ->
                                                                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                                              )
                                                                                              (fun
                                                                                                  _
                                                                                                  ->
                                                                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                                                              ))))))
                                                          ))))
                                        (fun x1 ->
                                            (match x1 with
                                              | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10 ->
                                                MiniParse.Spec.Int.mk_u16 9
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 10
                                              | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9 ->
                                                MiniParse.Spec.Int.mk_u16 8
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 10
                                              | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8 ->
                                                MiniParse.Spec.Int.mk_u16 7
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 10
                                              | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7 ->
                                                MiniParse.Spec.Int.mk_u16 6
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 10
                                              | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6 ->
                                                MiniParse.Spec.Int.mk_u16 5
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 10
                                              | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5 ->
                                                MiniParse.Spec.Int.mk_u16 4
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 10
                                              | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4 ->
                                                MiniParse.Spec.Int.mk_u16 3
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 10
                                              | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3 ->
                                                MiniParse.Spec.Int.mk_u16 2
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 10
                                              | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2 ->
                                                MiniParse.Spec.Int.mk_u16 1
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 10
                                              | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1 ->
                                                MiniParse.Spec.Int.mk_u16 0
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 10
                                              | _ ->
                                                MiniParse.Spec.Int.mk_u16 9
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 10)
                                            <:
                                            MiniParse.Spec.Int.bounded_u16 10))))).
                            (*Subtyping check failed; expected type u1656764:
Prims.unit
  { MiniParse.Spec.Combinators.synth_inverse (fun x1 ->
          (match x1 with
            | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10 ->
              MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10
            | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9 ->
              MiniParse.Spec.Int.mk_u16 8 <: MiniParse.Spec.Int.bounded_u16 10
            | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8 ->
              MiniParse.Spec.Int.mk_u16 7 <: MiniParse.Spec.Int.bounded_u16 10
            | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7 ->
              MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 10
            | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6 ->
              MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 10
            | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5 ->
              MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 10
            | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4 ->
              MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 10
            | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3 ->
              MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 10
            | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2 ->
              MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 10
            | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1 ->
              MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 10
            | _ -> MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10)
          <:
          MiniParse.Spec.Int.bounded_u16 10)
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 6))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 7))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 8))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                            )
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                            )))))))))) }; got type Prims.unit*)
                            Prims.auto_squash (MiniParse.Spec.Combinators.synth_inverse (fun x1 ->
                                      (match x1 with
                                        | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10 ->
                                          MiniParse.Spec.Int.mk_u16 9
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 10
                                        | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9 ->
                                          MiniParse.Spec.Int.mk_u16 8
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 10
                                        | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8 ->
                                          MiniParse.Spec.Int.mk_u16 7
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 10
                                        | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7 ->
                                          MiniParse.Spec.Int.mk_u16 6
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 10
                                        | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6 ->
                                          MiniParse.Spec.Int.mk_u16 5
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 10
                                        | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5 ->
                                          MiniParse.Spec.Int.mk_u16 4
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 10
                                        | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4 ->
                                          MiniParse.Spec.Int.mk_u16 3
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 10
                                        | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3 ->
                                          MiniParse.Spec.Int.mk_u16 2
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 10
                                        | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2 ->
                                          MiniParse.Spec.Int.mk_u16 1
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 10
                                        | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1 ->
                                          MiniParse.Spec.Int.mk_u16 0
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 10
                                        | _ ->
                                          MiniParse.Spec.Int.mk_u16 9
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 10)
                                      <:
                                      MiniParse.Spec.Int.bounded_u16 10)
                                  (fun x2 ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 0))
                                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 1))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 2))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 3))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x2
                                                                    (MiniParse.Spec.Int.mk_u16 4))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5
                                                                )
                                                                (fun _ ->
                                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          10
                                                                          x2
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              5))
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6
                                                                      )
                                                                      (fun _ ->
                                                                          MiniParse.Tac.Base.mk_if_t 
                                                                            (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                10
                                                                                x2
                                                                                (MiniParse.Spec.Int.mk_u16 
                                                                                    6))
                                                                            (fun _ ->
                                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                                            )
                                                                            (fun _ ->
                                                                                MiniParse.Tac.Base.mk_if_t 
                                                                                  (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                      10
                                                                                      x2
                                                                                      (MiniParse.Spec.Int.mk_u16 
                                                                                          7))
                                                                                  (fun _ ->
                                                                                      Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                                                  )
                                                                                  (fun _ ->
                                                                                      MiniParse.Tac.Base.mk_if_t 
                                                                                        (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                            10
                                                                                            x2
                                                                                            (MiniParse.Spec.Int.mk_u16 
                                                                                                8))
                                                                                        (fun _ ->
                                                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                                        )
                                                                                        (fun _ ->
                                                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                                                        ))))))))))))
                    ))))))
SMT goals (0):

TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> No goals left
Tactic fun _ ->
  MiniParse.Spec.TEnum.gen_enum_parser (FStar.Tactics.Types.Goal)
    (`Bench.MiniParse.Size4.Factor10.Seed00.Goal.test)
  <:
  FStar.Tactics.Effect.TAC Prims.unit ran in 11858 ms (Goal)
TAC>> Applied: forall_intro
TAC>> Unfolded definition: Bench.MiniParse.Size4.Factor10.Seed00.Goal.pBenchMiniParseSize4Factor10Seed00Goal
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
proof-state: State dump @ depth 3 (Some goals left):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Tac.Base.fst(169,4-169,28)
ACTIVE goals (1):
 |- _ : Prims.squash ((forall (x2: MiniParse.Spec.Int.bounded_u16 4).
        (*could not prove post-condition*)
        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4 /\
        (forall (return_val: MiniParse.Spec.Int.bounded_u16 4).
            return_val == MiniParse.Spec.Int.mk_u16 0 ==>
            (forall (any_result: Prims.bool).
                MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0) == any_result ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4 /\
                (forall (any_result:
                    (
                        _:
                        MiniParse.Tac.Base.ctest true
                          (MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0)) ->
                        Prims.Tot Bench.MiniParse.Size4.Factor10.Seed00.Goal.test)).
                    (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1) == any_result ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4 /\
                    (forall (x8:
                        MiniParse.Tac.Base.ctest false
                          (MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0))).
                        (*could not prove post-condition*)
                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 4).
                            return_val == MiniParse.Spec.Int.mk_u16 1 ==>
                            (forall (any_result: Prims.bool).
                                MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 1) ==
                                any_result ==>
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                                (forall (any_result:
                                    (
                                        _:
                                        MiniParse.Tac.Base.ctest true
                                          (MiniParse.Spec.Int.bounded_u16_eq 4
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1)) ->
                                        Prims.Tot Bench.MiniParse.Size4.Factor10.Seed00.Goal.test)).
                                    (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2) ==
                                    any_result ==>
                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                                    (forall (x6:
                                        MiniParse.Tac.Base.ctest false
                                          (MiniParse.Spec.Int.bounded_u16_eq 4
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1))).
                                        (*could not prove post-condition*)
                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 4 /\
                                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 4).
                                            return_val == MiniParse.Spec.Int.mk_u16 2 ==>
                                            (forall (any_result: Prims.bool).
                                                MiniParse.Spec.Int.bounded_u16_eq 4
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 2) ==
                                                any_result ==>
                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 4 /\
                                                (forall (any_result:
                                                    (
                                                        _:
                                                        MiniParse.Tac.Base.ctest true
                                                          (MiniParse.Spec.Int.bounded_u16_eq 4
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2)) ->
                                                        Prims.Tot
                                                        Bench.MiniParse.Size4.Factor10.Seed00.Goal.test
                                                    )).
                                                    (fun _ ->
                                                        Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3
                                                    ) ==
                                                    any_result ==>
                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 4
                                                )))))))))))) /\
    (forall (any_result:
        (_: MiniParse.Spec.Int.bounded_u16 4 ->
            Prims.GTot Bench.MiniParse.Size4.Factor10.Seed00.Goal.test)).
        (fun x2 ->
            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                  x2
                  (MiniParse.Spec.Int.mk_u16 0))
              (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
              (fun _ ->
                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                        x2
                        (MiniParse.Spec.Int.mk_u16 1))
                    (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                    (fun _ ->
                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                              x2
                              (MiniParse.Spec.Int.mk_u16 2))
                          (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                          (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4)))) ==
        any_result ==>
        (forall (any_result:
            (
                f2':
                (x: MiniParse.Spec.Int.bounded_u16 4 ->
                    Prims.Tot
                    (y:
                      Bench.MiniParse.Size4.Factor10.Seed00.Goal.test
                        { y ==
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                      x
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                            x
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4))) }
                    )) ->
                g1:
                (_: Bench.MiniParse.Size4.Factor10.Seed00.Goal.test ->
                    Prims.GTot (MiniParse.Spec.Int.bounded_u16 4)) ->
                u295390:
                u295407:
                Prims.unit
                  { MiniParse.Spec.Combinators.synth_inverse g1
                      (fun x2 ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x2
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4))))
                  } ->
                Prims.Tot
                (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                            4)
                        (fun x2 ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 0))
                              (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 1))
                                    (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              4
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 2))
                                          (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                                          (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4)))
                        )
                        g1)))).
            (forall (x0: MiniParse.Spec.Int.bounded_u16 4).
                (*could not prove post-condition*)
                (forall (x2: MiniParse.Spec.Int.bounded_u16 4).
                    (*could not prove post-condition*)
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4 /\
                    (forall (return_val: MiniParse.Spec.Int.bounded_u16 4).
                        return_val == MiniParse.Spec.Int.mk_u16 0 ==>
                        (forall (any_result: Prims.bool).
                            MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0) ==
                            any_result ==>
                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4 /\
                            (forall (any_result:
                                (
                                    _:
                                    MiniParse.Tac.Base.ctest true
                                      (MiniParse.Spec.Int.bounded_u16_eq 4
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 0)) ->
                                    Prims.Tot Bench.MiniParse.Size4.Factor10.Seed00.Goal.test)).
                                (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1) ==
                                any_result ==>
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4 /\
                                (forall (x8:
                                    MiniParse.Tac.Base.ctest false
                                      (MiniParse.Spec.Int.bounded_u16_eq 4
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 0))).
                                    (*could not prove post-condition*)
                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                                    (forall (return_val: MiniParse.Spec.Int.bounded_u16 4).
                                        return_val == MiniParse.Spec.Int.mk_u16 1 ==>
                                        (forall (any_result: Prims.bool).
                                            MiniParse.Spec.Int.bounded_u16_eq 4
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1) ==
                                            any_result ==>
                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                                            (forall (any_result:
                                                (
                                                    _:
                                                    MiniParse.Tac.Base.ctest true
                                                      (MiniParse.Spec.Int.bounded_u16_eq 4
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 1)) ->
                                                    Prims.Tot
                                                    Bench.MiniParse.Size4.Factor10.Seed00.Goal.test))
                                              .
                                                (fun _ ->
                                                    Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2) ==
                                                any_result ==>
                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                                                (forall (x6:
                                                    MiniParse.Tac.Base.ctest false
                                                      (MiniParse.Spec.Int.bounded_u16_eq 4
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 1))).
                                                    (*could not prove post-condition*)
                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 4 /\
                                                    (forall (return_val:
                                                        MiniParse.Spec.Int.bounded_u16 4).
                                                        return_val == MiniParse.Spec.Int.mk_u16 2 ==>
                                                        (forall (any_result: Prims.bool).
                                                            MiniParse.Spec.Int.bounded_u16_eq 4
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2) ==
                                                            any_result ==>
                                                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                  2) <
                                                            4 /\
                                                            (forall (any_result:
                                                                (
                                                                    _:
                                                                    MiniParse.Tac.Base.ctest true
                                                                      (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          4
                                                                          x2
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              2)) ->
                                                                    Prims.Tot
                                                                    Bench.MiniParse.Size4.Factor10.Seed00.Goal.test
                                                                )).
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3
                                                                ) ==
                                                                any_result ==>
                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                      2) <
                                                                4)))))))))))) /\
                (forall (any_result:
                    (x2: MiniParse.Spec.Int.bounded_u16 4 ->
                        Prims.Tot Bench.MiniParse.Size4.Factor10.Seed00.Goal.test))
                    (any_result: Bench.MiniParse.Size4.Factor10.Seed00.Goal.test).
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                          x0
                          (MiniParse.Spec.Int.mk_u16 0))
                      (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x0
                                (MiniParse.Spec.Int.mk_u16 1))
                            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                      x0
                                      (MiniParse.Spec.Int.mk_u16 2))
                                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4))) ==
                    any_result ==>
                    (*Subtyping check failed; expected type y:
Bench.MiniParse.Size4.Factor10.Seed00.Goal.test
  { y ==
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4 x0 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x0
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x0
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4))) }; got type Bench.MiniParse.Size4.Factor10.Seed00.Goal.test*)
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                          x0
                          (MiniParse.Spec.Int.mk_u16 0))
                      (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x0
                                (MiniParse.Spec.Int.mk_u16 1))
                            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                      x0
                                      (MiniParse.Spec.Int.mk_u16 2))
                                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4))) ==
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                          x0
                          (MiniParse.Spec.Int.mk_u16 0))
                      (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x0
                                (MiniParse.Spec.Int.mk_u16 1))
                            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                      x0
                                      (MiniParse.Spec.Int.mk_u16 2))
                                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4))))) /\
            (forall (any_result:
                (x: MiniParse.Spec.Int.bounded_u16 4 ->
                    Prims.Tot
                    (y:
                      Bench.MiniParse.Size4.Factor10.Seed00.Goal.test
                        { y ==
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                      x
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                            x
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4))) }
                    ))).
                (fun x0 ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                          x0
                          (MiniParse.Spec.Int.mk_u16 0))
                      (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x0
                                (MiniParse.Spec.Int.mk_u16 1))
                            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                      x0
                                      (MiniParse.Spec.Int.mk_u16 2))
                                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4)))) ==
                any_result ==>
                (forall (any_result:
                    (
                        g1:
                        (_: Bench.MiniParse.Size4.Factor10.Seed00.Goal.test ->
                            Prims.GTot (MiniParse.Spec.Int.bounded_u16 4)) ->
                        u295473:
                        u295482:
                        Prims.unit
                          { MiniParse.Spec.Combinators.synth_inverse g1
                              (fun x2 ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 0))
                                    (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              4
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1))
                                          (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    4
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 2))
                                                (fun _ ->
                                                    Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                                                (fun _ ->
                                                    Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4)))
                              ) } ->
                        Prims.Tot
                        (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                                    4)
                                (fun x2 ->
                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 0))
                                      (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
                                      (fun _ ->
                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                4
                                                x2
                                                (MiniParse.Spec.Int.mk_u16 1))
                                            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                                            (fun _ ->
                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                      4
                                                      x2
                                                      (MiniParse.Spec.Int.mk_u16 2))
                                                  (fun _ ->
                                                      Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                                                  (fun _ ->
                                                      Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4)
                                            )))
                                g1)))).
                    (forall (x1: Bench.MiniParse.Size4.Factor10.Seed00.Goal.test).
                        (*could not prove post-condition*)
                        C4? x1 == true ==>
                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) < 4 /\
                        ~(C4? x1 == true) ==>
                        (C3? x1 == true ==>
                          (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                          FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 4) /\
                        (~(C3? x1 == true) ==>
                          C2? x1 == true ==>
                          (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                          FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                          ~(C2? x1 == true) ==>
                          (C1? x1 == true ==>
                            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4) /\
                          (~(C1? x1 == true) ==>
                            (forall (b: Bench.MiniParse.Size4.Factor10.Seed00.Goal.test).
                                x1 == b ==>
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) < 4)))) /\
                    (forall (any_result:
                        (_: Bench.MiniParse.Size4.Factor10.Seed00.Goal.test ->
                            Prims.GTot (MiniParse.Spec.Int.bounded_u16 4))).
                        (fun x1 ->
                            (match x1 with
                              | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4 ->
                                MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4
                              | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3 ->
                                MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 4
                              | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2 ->
                                MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 4
                              | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1 ->
                                MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 4
                              | _ -> MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4
                            )
                            <:
                            MiniParse.Spec.Int.bounded_u16 4) ==
                        any_result ==>
                        (forall (any_result:
                            (
                                u295497:
                                u295507:
                                Prims.unit
                                  { MiniParse.Spec.Combinators.synth_inverse (fun x1 ->
                                          (match x1 with
                                            | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4 ->
                                              MiniParse.Spec.Int.mk_u16 3
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 4
                                            | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3 ->
                                              MiniParse.Spec.Int.mk_u16 2
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 4
                                            | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2 ->
                                              MiniParse.Spec.Int.mk_u16 1
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 4
                                            | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1 ->
                                              MiniParse.Spec.Int.mk_u16 0
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 4
                                            | _ ->
                                              MiniParse.Spec.Int.mk_u16 3
                                              <:
                                              MiniParse.Spec.Int.bounded_u16 4)
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 4)
                                      (fun x2 ->
                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                4
                                                x2
                                                (MiniParse.Spec.Int.mk_u16 0))
                                            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
                                            (fun _ ->
                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                      4
                                                      x2
                                                      (MiniParse.Spec.Int.mk_u16 1))
                                                  (fun _ ->
                                                      Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                                                  (fun _ ->
                                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                            4
                                                            x2
                                                            (MiniParse.Spec.Int.mk_u16 2))
                                                        (fun _ ->
                                                            Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3
                                                        )
                                                        (fun _ ->
                                                            Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4
                                                        )))) } ->
                                Prims.Tot
                                (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth 
                                        (MiniParse.Spec.Int.parse_bounded_u16 4)
                                        (fun x2 ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  4
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 0))
                                              (fun _ ->
                                                  Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        4
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 1))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              4
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3
                                                          )
                                                          (fun _ ->
                                                              Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4
                                                          ))))
                                        (fun x1 ->
                                            (match x1 with
                                              | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4 ->
                                                MiniParse.Spec.Int.mk_u16 3
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 4
                                              | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3 ->
                                                MiniParse.Spec.Int.mk_u16 2
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 4
                                              | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2 ->
                                                MiniParse.Spec.Int.mk_u16 1
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 4
                                              | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1 ->
                                                MiniParse.Spec.Int.mk_u16 0
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 4
                                              | _ ->
                                                MiniParse.Spec.Int.mk_u16 3
                                                <:
                                                MiniParse.Spec.Int.bounded_u16 4)
                                            <:
                                            MiniParse.Spec.Int.bounded_u16 4))))).
                            (*Subtyping check failed; expected type u292124:
Prims.unit
  { MiniParse.Spec.Combinators.synth_inverse (fun x1 ->
          (match x1 with
            | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4 ->
              MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4
            | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3 ->
              MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 4
            | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2 ->
              MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 4
            | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1 ->
              MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 4
            | _ -> MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4)
          <:
          MiniParse.Spec.Int.bounded_u16 4)
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4)))) }; got type Prims.unit*)
                            Prims.auto_squash (MiniParse.Spec.Combinators.synth_inverse (fun x1 ->
                                      (match x1 with
                                        | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4 ->
                                          MiniParse.Spec.Int.mk_u16 3
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 4
                                        | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3 ->
                                          MiniParse.Spec.Int.mk_u16 2
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 4
                                        | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2 ->
                                          MiniParse.Spec.Int.mk_u16 1
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 4
                                        | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1 ->
                                          MiniParse.Spec.Int.mk_u16 0
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 4
                                        | _ ->
                                          MiniParse.Spec.Int.mk_u16 3
                                          <:
                                          MiniParse.Spec.Int.bounded_u16 4)
                                      <:
                                      MiniParse.Spec.Int.bounded_u16 4)
                                  (fun x2 ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 0))
                                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  4
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 1))
                                              (fun _ ->
                                                  Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        4
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 2))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3
                                                    )
                                                    (fun _ ->
                                                        Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4
                                                    ))))))))))))
SMT goals (0):

TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> No goals left
TAC>> gen_parser_impl spits:
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> MiniParse.Impl.Combinators.parse_synth_impl (MiniParse.Impl.Int.parse_bounded_u16_impl 10)
  (fun x2 ->
      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
            x2
            (MiniParse.Spec.Int.mk_u16 0))
        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
        (fun _ ->
            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                  x2
                  (MiniParse.Spec.Int.mk_u16 1))
              (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
              (fun _ ->
                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                        x2
                        (MiniParse.Spec.Int.mk_u16 2))
                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                    (fun _ ->
                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                              x2
                              (MiniParse.Spec.Int.mk_u16 3))
                          (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                          (fun _ ->
                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                    x2
                                    (MiniParse.Spec.Int.mk_u16 4))
                                (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                                (fun _ ->
                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 5))
                                      (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                      (fun _ ->
                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                10
                                                x2
                                                (MiniParse.Spec.Int.mk_u16 6))
                                            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7)
                                            (fun _ ->
                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                      10
                                                      x2
                                                      (MiniParse.Spec.Int.mk_u16 7))
                                                  (fun _ ->
                                                      Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8)
                                                  (fun _ ->
                                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                            10
                                                            x2
                                                            (MiniParse.Spec.Int.mk_u16 8))
                                                        (fun _ ->
                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                        )
                                                        (fun _ ->
                                                            Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                        ))))))))))
  (fun x0 ->
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 6))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 7))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 8))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9
                                                            )
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10
                                                            )))))))))) x0)
  (fun x1 ->
      (match x1 with
        | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C10 ->
          MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10
        | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C9 ->
          MiniParse.Spec.Int.mk_u16 8 <: MiniParse.Spec.Int.bounded_u16 10
        | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C8 ->
          MiniParse.Spec.Int.mk_u16 7 <: MiniParse.Spec.Int.bounded_u16 10
        | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C7 ->
          MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 10
        | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C6 ->
          MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 10
        | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C5 ->
          MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 10
        | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C4 ->
          MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 10
        | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C3 ->
          MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 10
        | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C2 ->
          MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 10
        | Bench.MiniParse.Size10.Factor1.Seed00.Goal.C1 ->
          MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 10
        | _ -> MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10)
      <:
      MiniParse.Spec.Int.bounded_u16 10)
  ()
Tactic fun _ ->
  MiniParse.Tac.Impl.gen_parser_impl (FStar.Tactics.Types.Goal)
  <:
  FStar.Tactics.Effect.TAC Prims.unit ran in 148672 ms (Goal)
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
Verified module: Bench.MiniParse.Size10.Factor1.Seed00.Goal (223733 milliseconds)
All verification conditions discharged successfully
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: reflexivity
TAC>> Success: reflexivity
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: synth_inverse_forall_bounded_u16_solve, main goal
TAC>> Success: synth_inverse_forall_bounded_u16_solve, main goal
proof-state: State dump @ depth 46 (Some goals left):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Tac.Base.fst(169,4-169,28)
ACTIVE goals (1):
(x:
(_: MiniParse.Spec.Int.bounded_u16 4 -> Prims.GTot Bench.MiniParse.Size4.Factor10.Seed00.Goal.test)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4)))) ==
x), (x:
(
    f2':
    (x: MiniParse.Spec.Int.bounded_u16 4 ->
        Prims.Tot
        (y:
          Bench.MiniParse.Size4.Factor10.Seed00.Goal.test
            { y ==
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                    x
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                          x
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4))) })) ->
    g1:
    (_: Bench.MiniParse.Size4.Factor10.Seed00.Goal.test ->
        Prims.GTot (MiniParse.Spec.Int.bounded_u16 4)) ->
    u491272:
    u491289:
    Prims.unit
      { MiniParse.Spec.Combinators.synth_inverse g1
          (fun x2 ->
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                    x2
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                          x2
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x2
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4)))) } ->
    Prims.Tot
    (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                4)
            (fun x2 ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x2
                      (MiniParse.Spec.Int.mk_u16 0))
                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                            x2
                            (MiniParse.Spec.Int.mk_u16 1))
                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 2))
                              (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                              (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4))))
            g1)))), (x:
(x: MiniParse.Spec.Int.bounded_u16 4 ->
    Prims.Tot
    (y:
      Bench.MiniParse.Size4.Factor10.Seed00.Goal.test
        { y ==
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                            x
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4))) }))), (_:
(fun x0 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4 x0 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x0
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x0
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4)))) ==
x), (x:
(
    g1:
    (_: Bench.MiniParse.Size4.Factor10.Seed00.Goal.test ->
        Prims.GTot (MiniParse.Spec.Int.bounded_u16 4)) ->
    u491313:
    u491322:
    Prims.unit
      { MiniParse.Spec.Combinators.synth_inverse g1
          (fun x2 ->
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                    x2
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                          x2
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x2
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4)))) } ->
    Prims.Tot
    (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                4)
            (fun x2 ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x2
                      (MiniParse.Spec.Int.mk_u16 0))
                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                            x2
                            (MiniParse.Spec.Int.mk_u16 1))
                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 2))
                              (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                              (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4))))
            g1)))), (x:
(_: Bench.MiniParse.Size4.Factor10.Seed00.Goal.test -> Prims.GTot (MiniParse.Spec.Int.bounded_u16 4)
)), (_:
(fun x1 ->
    (match x1 with
      | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4 ->
        MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4
      | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3 ->
        MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 4
      | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2 ->
        MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 4
      | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1 ->
        MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 4
      | _ -> MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4)
    <:
    MiniParse.Spec.Int.bounded_u16 4) ==
x), (x:
(
    u491333:
    u491343:
    Prims.unit
      { MiniParse.Spec.Combinators.synth_inverse (fun x1 ->
              (match x1 with
                | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4 ->
                  MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4
                | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3 ->
                  MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 4
                | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2 ->
                  MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 4
                | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1 ->
                  MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 4
                | _ -> MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4)
              <:
              MiniParse.Spec.Int.bounded_u16 4)
          (fun x2 ->
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                    x2
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                          x2
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x2
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4)))) } ->
    Prims.Tot
    (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                4)
            (fun x2 ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x2
                      (MiniParse.Spec.Int.mk_u16 0))
                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                            x2
                            (MiniParse.Spec.Int.mk_u16 1))
                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 2))
                              (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                              (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4))))
            (fun x1 ->
                (match x1 with
                  | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4 ->
                    MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4
                  | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3 ->
                    MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 4
                  | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2 ->
                    MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 4
                  | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1 ->
                    MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 4
                  | _ -> MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4)
                <:
                MiniParse.Spec.Int.bounded_u16 4))))) |- _ : Prims.squash ((forall (x2: MiniParse.Spec.Int.bounded_u16 4).
        (*could not prove post-condition*)
        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4 /\
        (forall (return_val: MiniParse.Spec.Int.bounded_u16 4).
            return_val == MiniParse.Spec.Int.mk_u16 0 ==>
            (forall (any_result: Prims.bool).
                MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0) == any_result ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4 /\
                (forall (any_result:
                    (
                        _:
                        MiniParse.Tac.Base.ctest true
                          (MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0)) ->
                        Prims.Tot Bench.MiniParse.Size4.Factor10.Seed00.Goal.test)).
                    (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1) == any_result ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4 /\
                    (forall (x8:
                        MiniParse.Tac.Base.ctest false
                          (MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0))).
                        (*could not prove post-condition*)
                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 4).
                            return_val == MiniParse.Spec.Int.mk_u16 1 ==>
                            (forall (any_result: Prims.bool).
                                MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 1) ==
                                any_result ==>
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                                (forall (any_result:
                                    (
                                        _:
                                        MiniParse.Tac.Base.ctest true
                                          (MiniParse.Spec.Int.bounded_u16_eq 4
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1)) ->
                                        Prims.Tot Bench.MiniParse.Size4.Factor10.Seed00.Goal.test)).
                                    (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2) ==
                                    any_result ==>
                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
                                    (forall (x6:
                                        MiniParse.Tac.Base.ctest false
                                          (MiniParse.Spec.Int.bounded_u16_eq 4
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1))).
                                        (*could not prove post-condition*)
                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 4 /\
                                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 4).
                                            return_val == MiniParse.Spec.Int.mk_u16 2 ==>
                                            (forall (any_result: Prims.bool).
                                                MiniParse.Spec.Int.bounded_u16_eq 4
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 2) ==
                                                any_result ==>
                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 4 /\
                                                (forall (any_result:
                                                    (
                                                        _:
                                                        MiniParse.Tac.Base.ctest true
                                                          (MiniParse.Spec.Int.bounded_u16_eq 4
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2)) ->
                                                        Prims.Tot
                                                        Bench.MiniParse.Size4.Factor10.Seed00.Goal.test
                                                    )).
                                                    (fun _ ->
                                                        Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3
                                                    ) ==
                                                    any_result ==>
                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 4
                                                )))))))))))) /\
    (forall (any_result:
        (_: MiniParse.Spec.Int.bounded_u16 4 ->
            Prims.GTot Bench.MiniParse.Size4.Factor10.Seed00.Goal.test)).
        (fun x2 ->
            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                  x2
                  (MiniParse.Spec.Int.mk_u16 0))
              (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
              (fun _ ->
                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                        x2
                        (MiniParse.Spec.Int.mk_u16 1))
                    (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                    (fun _ ->
                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                              x2
                              (MiniParse.Spec.Int.mk_u16 2))
                          (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                          (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4)))) ==
        any_result ==>
        (forall (any_result:
            (
                f2:
                (_: Bench.MiniParse.Size4.Factor10.Seed00.Goal.test ->
                    Prims.GTot (MiniParse.Spec.Int.bounded_u16 4)) ->
                u491454:
                Prims.squash (MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16' 4
                      Bench.MiniParse.Size4.Factor10.Seed00.Goal.test
                      (fun x2 ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x2
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4))))
                      f2) ->
                Prims.Tot
                (Prims.squash (MiniParse.Spec.Combinators.synth_inverse f2
                        (fun x2 ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 0))
                              (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 1))
                                    (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              4
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 2))
                                          (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                                          (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4)))
                        )))))
            (x1: Bench.MiniParse.Size4.Factor10.Seed00.Goal.test).
            (*could not prove post-condition*)
            C4? x1 == true ==>
            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) < 4 /\
            ~(C4? x1 == true) ==>
            (C3? x1 == true ==>
              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 4) /\
            (~(C3? x1 == true) ==>
              C2? x1 == true ==>
              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 4 /\
              ~(C2? x1 == true) ==>
              (C1? x1 == true ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 4) /\
              (~(C1? x1 == true) ==>
                (forall (b: Bench.MiniParse.Size4.Factor10.Seed00.Goal.test).
                    x1 == b ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 4; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) < 4))))))
SMT goals (0):

TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Applied: forall_intro
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> No goals left
TAC>> Checking success for: synth_inverse_forall_bounded_u16_solve
TAC>> Success: synth_inverse_forall_bounded_u16_solve
TAC>> Checking success for: return_squash imm_solve
TAC>> Success: return_squash imm_solve
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
proof-state: State dump @ depth 47 (synth_inverse_forall_tenum_solve FAILED here:):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Spec.TEnum.fst(183,12-183,66)
ACTIVE goals (1):
(x:
(_: MiniParse.Spec.Int.bounded_u16 4 -> Prims.GTot Bench.MiniParse.Size4.Factor10.Seed00.Goal.test)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4)))) ==
x), (x:
(
    f2':
    (x: MiniParse.Spec.Int.bounded_u16 4 ->
        Prims.Tot
        (y:
          Bench.MiniParse.Size4.Factor10.Seed00.Goal.test
            { y ==
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                    x
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                          x
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4))) })) ->
    g1:
    (_: Bench.MiniParse.Size4.Factor10.Seed00.Goal.test ->
        Prims.GTot (MiniParse.Spec.Int.bounded_u16 4)) ->
    u683470:
    u683487:
    Prims.unit
      { MiniParse.Spec.Combinators.synth_inverse g1
          (fun x2 ->
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                    x2
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                          x2
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                x2
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4)))) } ->
    Prims.Tot
    (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                4)
            (fun x2 ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x2
                      (MiniParse.Spec.Int.mk_u16 0))
                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                            x2
                            (MiniParse.Spec.Int.mk_u16 1))
                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 2))
                              (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                              (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4))))
            g1)))), (x:
(x: MiniParse.Spec.Int.bounded_u16 4 ->
    Prims.Tot
    (y:
      Bench.MiniParse.Size4.Factor10.Seed00.Goal.test
        { y ==
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                            x
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4))) }))), (_:
(fun x0 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4 x0 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x0
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x0
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4)))) ==
x), (x:
(_: Bench.MiniParse.Size4.Factor10.Seed00.Goal.test -> Prims.GTot (MiniParse.Spec.Int.bounded_u16 4)
)), (x:
u683511:
Prims.unit
  { MiniParse.Spec.Combinators.synth_inverse x
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4)))) }), (x:
(_: MiniParse.Spec.Int.bounded_u16 4 -> Prims.GTot Bench.MiniParse.Size4.Factor10.Seed00.Goal.test)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4)))) ==
x) |- _ : Prims.squash (MiniParse.Spec.Combinators.synth_inverse x
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4)))))
SMT goals (0):

TAC>> Checking success for: assumption
TAC>> Success: assumption
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Applied: forall_intro
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: reflexivity
TAC>> Success: reflexivity
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
proof-state: State dump @ depth 39 (synth_inverse_forall_tenum_solve FAILED here:):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Spec.TEnum.fst(183,12-183,66)
ACTIVE goals (1):
(x:
(_: MiniParse.Spec.Int.bounded_u16 4 -> Prims.GTot Bench.MiniParse.Size4.Factor10.Seed00.Goal.test)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4)))) ==
x), (x:
(x: MiniParse.Spec.Int.bounded_u16 4 ->
    Prims.Tot
    (y:
      Bench.MiniParse.Size4.Factor10.Seed00.Goal.test
        { y ==
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                            x
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4))) }))), (x:
(_: Bench.MiniParse.Size4.Factor10.Seed00.Goal.test -> Prims.GTot (MiniParse.Spec.Int.bounded_u16 4)
)), (x:
u877067:
Prims.unit
  { MiniParse.Spec.Combinators.synth_inverse x
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4)))) }), (x:
(_: MiniParse.Spec.Int.bounded_u16 4 -> Prims.GTot Bench.MiniParse.Size4.Factor10.Seed00.Goal.test)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4 x2 (MiniParse.Spec.Int.mk_u16 0)
      )
      (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4)))) ==
x) |- _ : Prims.squash (MiniParse.Spec.Combinators.synth_inverse x
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4)))))
SMT goals (0):

TAC>> Checking success for: assumption
TAC>> Success: assumption
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> No goals left
TAC>> gen_parser_impl spits:
TAC>> MiniParse.Impl.Combinators.parse_synth_impl (MiniParse.Impl.Int.parse_bounded_u16_impl 4)
  (fun x2 ->
      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
            x2
            (MiniParse.Spec.Int.mk_u16 0))
        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
        (fun _ ->
            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                  x2
                  (MiniParse.Spec.Int.mk_u16 1))
              (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
              (fun _ ->
                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                        x2
                        (MiniParse.Spec.Int.mk_u16 2))
                    (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                    (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4))))
  (fun x0 ->
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 4
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3)
                        (fun _ -> Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4)))) x0)
  (fun x1 ->
      (match x1 with
        | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C4 ->
          MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4
        | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C3 ->
          MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 4
        | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C2 ->
          MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 4
        | Bench.MiniParse.Size4.Factor10.Seed00.Goal.C1 ->
          MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 4
        | _ -> MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 4)
      <:
      MiniParse.Spec.Int.bounded_u16 4)
  ()
Tactic fun _ ->
  MiniParse.Tac.Impl.gen_parser_impl (FStar.Tactics.Types.Goal)
  <:
  FStar.Tactics.Effect.TAC Prims.unit ran in 25897 ms (Goal)
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
Verified module: Bench.MiniParse.Size4.Factor10.Seed00.Goal (37901 milliseconds)
All verification conditions discharged successfully
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: synth_inverse_forall_bounded_u16_solve, main goal
TAC>> Success: synth_inverse_forall_bounded_u16_solve, main goal
proof-state: State dump @ depth 46 (Some goals left):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Tac.Base.fst(169,4-169,28)
ACTIVE goals (1):
(x:
(_: MiniParse.Spec.Int.bounded_u16 10 -> Prims.GTot Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
          x2
          (MiniParse.Spec.Int.mk_u16 0))
      (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 6))
                                          (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 7))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 8))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                      )
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                      )))))))))) ==
x), (x:
(
    f2':
    (x: MiniParse.Spec.Int.bounded_u16 10 ->
        Prims.Tot
        (y:
          Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
            { y ==
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                    x
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                          x
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x
                                      (MiniParse.Spec.Int.mk_u16 3))
                                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x
                                            (MiniParse.Spec.Int.mk_u16 4))
                                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x
                                                  (MiniParse.Spec.Int.mk_u16 5))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x
                                                        (MiniParse.Spec.Int.mk_u16 6))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x
                                                              (MiniParse.Spec.Int.mk_u16 7))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x
                                                                    (MiniParse.Spec.Int.mk_u16 8))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                )
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                                ))))))))) })) ->
    g1:
    (_: Bench.MiniParse.Size10.Factor10.Seed00.Goal.test ->
        Prims.GTot (MiniParse.Spec.Int.bounded_u16 10)) ->
    u2393572:
    u2393613:
    Prims.unit
      { MiniParse.Spec.Combinators.synth_inverse g1
          (fun x2 ->
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                    x2
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                          x2
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x2
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 3))
                                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 4))
                                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 5))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 6))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 7))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x2
                                                                    (MiniParse.Spec.Int.mk_u16 8))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                )
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                                )))))))))) } ->
    Prims.Tot
    (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                10)
            (fun x2 ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x2
                      (MiniParse.Spec.Int.mk_u16 0))
                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 1))
                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 2))
                              (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 3))
                                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 4))
                                          (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 5))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 6))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 7))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                            )
                                                            (fun _ ->
                                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                      10
                                                                      x2
                                                                      (MiniParse.Spec.Int.mk_u16 8))
                                                                  (fun _ ->
                                                                      Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                  )
                                                                  (fun _ ->
                                                                      Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                                  ))))))))))
            g1)))), (x:
(x: MiniParse.Spec.Int.bounded_u16 10 ->
    Prims.Tot
    (y:
      Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
        { y ==
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x
                                                    (MiniParse.Spec.Int.mk_u16 6))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x
                                                          (MiniParse.Spec.Int.mk_u16 7))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x
                                                                (MiniParse.Spec.Int.mk_u16 8))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                            )
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                            ))))))))) }))), (_:
(fun x0 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
          x0
          (MiniParse.Spec.Int.mk_u16 0))
      (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x0
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x0
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x0
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x0
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x0
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x0
                                              (MiniParse.Spec.Int.mk_u16 6))
                                          (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x0
                                                    (MiniParse.Spec.Int.mk_u16 7))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x0
                                                          (MiniParse.Spec.Int.mk_u16 8))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                      )
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                      )))))))))) ==
x), (x:
(
    g1:
    (_: Bench.MiniParse.Size10.Factor10.Seed00.Goal.test ->
        Prims.GTot (MiniParse.Spec.Int.bounded_u16 10)) ->
    u2393673:
    u2393694:
    Prims.unit
      { MiniParse.Spec.Combinators.synth_inverse g1
          (fun x2 ->
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                    x2
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                          x2
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x2
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 3))
                                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 4))
                                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 5))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 6))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 7))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x2
                                                                    (MiniParse.Spec.Int.mk_u16 8))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                )
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                                )))))))))) } ->
    Prims.Tot
    (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                10)
            (fun x2 ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x2
                      (MiniParse.Spec.Int.mk_u16 0))
                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 1))
                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 2))
                              (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 3))
                                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 4))
                                          (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 5))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 6))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 7))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                            )
                                                            (fun _ ->
                                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                      10
                                                                      x2
                                                                      (MiniParse.Spec.Int.mk_u16 8))
                                                                  (fun _ ->
                                                                      Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                  )
                                                                  (fun _ ->
                                                                      Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                                  ))))))))))
            g1)))), (x:
(_: Bench.MiniParse.Size10.Factor10.Seed00.Goal.test ->
    Prims.GTot (MiniParse.Spec.Int.bounded_u16 10))), (_:
(fun x1 ->
    (match x1 with
      | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10 ->
        MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9 ->
        MiniParse.Spec.Int.mk_u16 8 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8 ->
        MiniParse.Spec.Int.mk_u16 7 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7 ->
        MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6 ->
        MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5 ->
        MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4 ->
        MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3 ->
        MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2 ->
        MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 10
      | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1 ->
        MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 10
      | _ -> MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10)
    <:
    MiniParse.Spec.Int.bounded_u16 10) ==
x), (x:
(
    u2393717:
    u2393739:
    Prims.unit
      { MiniParse.Spec.Combinators.synth_inverse (fun x1 ->
              (match x1 with
                | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10 ->
                  MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10
                | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9 ->
                  MiniParse.Spec.Int.mk_u16 8 <: MiniParse.Spec.Int.bounded_u16 10
                | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8 ->
                  MiniParse.Spec.Int.mk_u16 7 <: MiniParse.Spec.Int.bounded_u16 10
                | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7 ->
                  MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 10
                | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6 ->
                  MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 10
                | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5 ->
                  MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 10
                | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4 ->
                  MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 10
                | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3 ->
                  MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 10
                | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2 ->
                  MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 10
                | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1 ->
                  MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 10
                | _ -> MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10)
              <:
              MiniParse.Spec.Int.bounded_u16 10)
          (fun x2 ->
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                    x2
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                          x2
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x2
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 3))
                                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 4))
                                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 5))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 6))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 7))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x2
                                                                    (MiniParse.Spec.Int.mk_u16 8))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                )
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                                )))))))))) } ->
    Prims.Tot
    (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                10)
            (fun x2 ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x2
                      (MiniParse.Spec.Int.mk_u16 0))
                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 1))
                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 2))
                              (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 3))
                                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 4))
                                          (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 5))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 6))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 7))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                            )
                                                            (fun _ ->
                                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                      10
                                                                      x2
                                                                      (MiniParse.Spec.Int.mk_u16 8))
                                                                  (fun _ ->
                                                                      Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                  )
                                                                  (fun _ ->
                                                                      Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                                  ))))))))))
            (fun x1 ->
                (match x1 with
                  | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10 ->
                    MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10
                  | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9 ->
                    MiniParse.Spec.Int.mk_u16 8 <: MiniParse.Spec.Int.bounded_u16 10
                  | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8 ->
                    MiniParse.Spec.Int.mk_u16 7 <: MiniParse.Spec.Int.bounded_u16 10
                  | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7 ->
                    MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 10
                  | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6 ->
                    MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 10
                  | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5 ->
                    MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 10
                  | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4 ->
                    MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 10
                  | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3 ->
                    MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 10
                  | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2 ->
                    MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 10
                  | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1 ->
                    MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 10
                  | _ -> MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10)
                <:
                MiniParse.Spec.Int.bounded_u16 10))))) |- _ : Prims.squash ((forall (x2: MiniParse.Spec.Int.bounded_u16 10).
        (*could not prove post-condition*)
        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10 /\
        (forall (return_val: MiniParse.Spec.Int.bounded_u16 10).
            return_val == MiniParse.Spec.Int.mk_u16 0 ==>
            (forall (any_result: Prims.bool).
                MiniParse.Spec.Int.bounded_u16_eq 10 x2 (MiniParse.Spec.Int.mk_u16 0) == any_result ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10 /\
                (forall (any_result:
                    (
                        _:
                        MiniParse.Tac.Base.ctest true
                          (MiniParse.Spec.Int.bounded_u16_eq 10 x2 (MiniParse.Spec.Int.mk_u16 0)) ->
                        Prims.Tot Bench.MiniParse.Size10.Factor10.Seed00.Goal.test)).
                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1) == any_result ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10 /\
                    (forall (x20:
                        MiniParse.Tac.Base.ctest false
                          (MiniParse.Spec.Int.bounded_u16_eq 10 x2 (MiniParse.Spec.Int.mk_u16 0))).
                        (*could not prove post-condition*)
                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 10).
                            return_val == MiniParse.Spec.Int.mk_u16 1 ==>
                            (forall (any_result: Prims.bool).
                                MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 1) ==
                                any_result ==>
                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                                (forall (any_result:
                                    (
                                        _:
                                        MiniParse.Tac.Base.ctest true
                                          (MiniParse.Spec.Int.bounded_u16_eq 10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1)) ->
                                        Prims.Tot Bench.MiniParse.Size10.Factor10.Seed00.Goal.test))
                                  .
                                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2) ==
                                    any_result ==>
                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                                    (forall (x18:
                                        MiniParse.Tac.Base.ctest false
                                          (MiniParse.Spec.Int.bounded_u16_eq 10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 1))).
                                        (*could not prove post-condition*)
                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 10 /\
                                        (forall (return_val: MiniParse.Spec.Int.bounded_u16 10).
                                            return_val == MiniParse.Spec.Int.mk_u16 2 ==>
                                            (forall (any_result: Prims.bool).
                                                MiniParse.Spec.Int.bounded_u16_eq 10
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 2) ==
                                                any_result ==>
                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 10 /\
                                                (forall (any_result:
                                                    (
                                                        _:
                                                        MiniParse.Tac.Base.ctest true
                                                          (MiniParse.Spec.Int.bounded_u16_eq 10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2)) ->
                                                        Prims.Tot
                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                    )).
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3
                                                    ) ==
                                                    any_result ==>
                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) <
                                                    10 /\
                                                    (forall (x16:
                                                        MiniParse.Tac.Base.ctest false
                                                          (MiniParse.Spec.Int.bounded_u16_eq 10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 2))).
                                                        (*could not prove post-condition*)
                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) <
                                                        10 /\
                                                        (forall (return_val:
                                                            MiniParse.Spec.Int.bounded_u16 10).
                                                            return_val ==
                                                            MiniParse.Spec.Int.mk_u16 3 ==>
                                                            (forall (any_result: Prims.bool).
                                                                MiniParse.Spec.Int.bounded_u16_eq 10
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 3) ==
                                                                any_result ==>
                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                      3) <
                                                                10 /\
                                                                (forall (any_result:
                                                                    (
                                                                        _:
                                                                        MiniParse.Tac.Base.ctest true
                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                              10
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  3)) ->
                                                                        Prims.Tot
                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                    )).
                                                                    (fun _ ->
                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4
                                                                    ) ==
                                                                    any_result ==>
                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                          3) <
                                                                    10 /\
                                                                    (forall (x14:
                                                                        MiniParse.Tac.Base.ctest false
                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                              10
                                                                              x2
                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                  3))).
                                                                        (*could not prove post-condition*)
                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                        FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                              4) <
                                                                        10 /\
                                                                        (forall (return_val:
                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                              10).
                                                                            return_val ==
                                                                            MiniParse.Spec.Int.mk_u16 
                                                                              4 ==>
                                                                            (forall (any_result:
                                                                                Prims.bool).
                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  10
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      4) ==
                                                                                any_result ==>
                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                      4) <
                                                                                10 /\
                                                                                (forall (any_result:
                                                                                    (
                                                                                        _:
                                                                                        MiniParse.Tac.Base.ctest 
                                                                                          true
                                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                              10
                                                                                              x2
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  4)
                                                                                          ) ->
                                                                                        Prims.Tot
                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                    )).
                                                                                    (fun _ ->
                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5
                                                                                    ) ==
                                                                                    any_result ==>
                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 
                                                                                          4) <
                                                                                    10 /\
                                                                                    (forall (x12:
                                                                                        MiniParse.Tac.Base.ctest 
                                                                                          false
                                                                                          (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                              10
                                                                                              x2
                                                                                              (MiniParse.Spec.Int.mk_u16 
                                                                                                  4)
                                                                                          )).
                                                                                        (*could not prove post-condition*)
                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                        FStar.UInt16.v 
                                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                                              5) <
                                                                                        10 /\
                                                                                        (forall (return_val:
                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                              10).
                                                                                            return_val ==
                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                              5 ==>
                                                                                            (forall (any_result:
                                                                                                Prims.bool)
                                                                                              .
                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                  10
                                                                                                  x2
                                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                                      5
                                                                                                    
                                                                                                  ) ==
                                                                                                any_result ==>
                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                FStar.UInt16.v 
                                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                                      5
                                                                                                    
                                                                                                  ) <
                                                                                                10 /\
                                                                                                (forall 
                                                                                                    (any_result:
                                                                                                    (
                                                                                                      
                                                                                                        _:
                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                          true
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                              10
                                                                                                              x2
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                  5
                                                                                                                
                                                                                                              )
                                                                                                            
                                                                                                          )
                                                                                                         ->
                                                                                                        Prims.Tot
                                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                    ))
                                                                                                  .
                                                                                                    (
                                                                                                      fun
                                                                                                        _
                                                                                                        ->
                                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6
                                                                                                    ) ==
                                                                                                    any_result ==>
                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                    FStar.UInt16.v 
                                                                                                      (
                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                          5
                                                                                                        
                                                                                                      )
                                                                                                     <
                                                                                                    10 /\
                                                                                                    (
                                                                                                      forall 
                                                                                                        (x10:
                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                          false
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                              10
                                                                                                              x2
                                                                                                              (
                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                  5
                                                                                                                
                                                                                                              )
                                                                                                            
                                                                                                          )
                                                                                                        )
                                                                                                      .
                                                                                                        (*could not prove post-condition*)
                                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                        FStar.UInt16.v 
                                                                                                          (
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              6
                                                                                                            
                                                                                                          )
                                                                                                         <
                                                                                                        10 /\
                                                                                                        (
                                                                                                          forall 
                                                                                                            (return_val:
                                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                                              10
                                                                                                            )
                                                                                                          .
                                                                                                            return_val ==
                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                              6
                                                                                                             ==>
                                                                                                            (
                                                                                                              forall 
                                                                                                                (any_result:
                                                                                                                Prims.bool)
                                                                                                              .
                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                  10
                                                                                                                  x2
                                                                                                                  (
                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                      6
                                                                                                                    
                                                                                                                  )
                                                                                                                 ==
                                                                                                                any_result ==>
                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                FStar.UInt16.v 
                                                                                                                  (
                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                      6
                                                                                                                    
                                                                                                                  )
                                                                                                                 <
                                                                                                                10 /\
                                                                                                                (
                                                                                                                  forall 
                                                                                                                    (any_result:
                                                                                                                    (
                                                                                                                      
                                                                                                                        _:
                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                          true
                                                                                                                          (
                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                              10
                                                                                                                              x2
                                                                                                                              (
                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                  6
                                                                                                                                
                                                                                                                              )
                                                                                                                            
                                                                                                                          )
                                                                                                                         ->
                                                                                                                        Prims.Tot
                                                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                    ))
                                                                                                                  .
                                                                                                                    (
                                                                                                                      fun
                                                                                                                        _
                                                                                                                        ->
                                                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                                                                                    ) ==
                                                                                                                    any_result ==>
                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                    FStar.UInt16.v 
                                                                                                                      (
                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                          6
                                                                                                                        
                                                                                                                      )
                                                                                                                     <
                                                                                                                    10 /\
                                                                                                                    (
                                                                                                                      forall 
                                                                                                                        (x8:
                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                          false
                                                                                                                          (
                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                              10
                                                                                                                              x2
                                                                                                                              (
                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                  6
                                                                                                                                
                                                                                                                              )
                                                                                                                            
                                                                                                                          )
                                                                                                                        )
                                                                                                                      .
                                                                                                                        (*could not prove post-condition*)
                                                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                        FStar.UInt16.v 
                                                                                                                          (
                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                              7
                                                                                                                            
                                                                                                                          )
                                                                                                                         <
                                                                                                                        10 /\
                                                                                                                        (
                                                                                                                          forall 
                                                                                                                            (return_val:
                                                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                                                              10
                                                                                                                            )
                                                                                                                          .
                                                                                                                            return_val ==
                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                              7
                                                                                                                             ==>
                                                                                                                            (
                                                                                                                              forall 
                                                                                                                                (any_result:
                                                                                                                                Prims.bool)
                                                                                                                              .
                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                  10
                                                                                                                                  x2
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      7
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                 ==
                                                                                                                                any_result ==>
                                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                FStar.UInt16.v 
                                                                                                                                  (
                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                      7
                                                                                                                                    
                                                                                                                                  )
                                                                                                                                 <
                                                                                                                                10 /\
                                                                                                                                (
                                                                                                                                  forall 
                                                                                                                                    (any_result:
                                                                                                                                    (
                                                                                                                                      
                                                                                                                                        _:
                                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                                          true
                                                                                                                                          (
                                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                              10
                                                                                                                                              x2
                                                                                                                                              (
                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                  7
                                                                                                                                                
                                                                                                                                              )
                                                                                                                                            
                                                                                                                                          )
                                                                                                                                         ->
                                                                                                                                        Prims.Tot
                                                                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                    ))
                                                                                                                                  .
                                                                                                                                    (
                                                                                                                                      fun
                                                                                                                                        _
                                                                                                                                        ->
                                                                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                                                                                                    ) ==
                                                                                                                                    any_result ==>
                                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                    FStar.UInt16.v 
                                                                                                                                      (
                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                          7
                                                                                                                                        
                                                                                                                                      )
                                                                                                                                     <
                                                                                                                                    10 /\
                                                                                                                                    (
                                                                                                                                      forall 
                                                                                                                                        (x6:
                                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                                          false
                                                                                                                                          (
                                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                              10
                                                                                                                                              x2
                                                                                                                                              (
                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                  7
                                                                                                                                                
                                                                                                                                              )
                                                                                                                                            
                                                                                                                                          )
                                                                                                                                        )
                                                                                                                                      .
                                                                                                                                        (*could not prove post-condition*)
                                                                                                                                        (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                        FStar.UInt16.v 
                                                                                                                                          (
                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                              8
                                                                                                                                            
                                                                                                                                          )
                                                                                                                                         <
                                                                                                                                        10 /\
                                                                                                                                        (
                                                                                                                                          forall 
                                                                                                                                            (return_val:
                                                                                                                                            MiniParse.Spec.Int.bounded_u16 
                                                                                                                                              10
                                                                                                                                            )
                                                                                                                                          .
                                                                                                                                            return_val ==
                                                                                                                                            MiniParse.Spec.Int.mk_u16 
                                                                                                                                              8
                                                                                                                                             ==>
                                                                                                                                            (
                                                                                                                                              forall 
                                                                                                                                                (any_result:
                                                                                                                                                Prims.bool)
                                                                                                                                              .
                                                                                                                                                MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                  10
                                                                                                                                                  x2
                                                                                                                                                  (
                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                      8
                                                                                                                                                    
                                                                                                                                                  )
                                                                                                                                                 ==
                                                                                                                                                any_result ==>
                                                                                                                                                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                FStar.UInt16.v 
                                                                                                                                                  (
                                                                                                                                                    MiniParse.Spec.Int.mk_u16 
                                                                                                                                                      8
                                                                                                                                                    
                                                                                                                                                  )
                                                                                                                                                 <
                                                                                                                                                10 /\
                                                                                                                                                (
                                                                                                                                                  forall 
                                                                                                                                                    (any_result:
                                                                                                                                                    (
                                                                                                                                                      
                                                                                                                                                        _:
                                                                                                                                                        MiniParse.Tac.Base.ctest 
                                                                                                                                                          true
                                                                                                                                                          (
                                                                                                                                                            MiniParse.Spec.Int.bounded_u16_eq 
                                                                                                                                                              10
                                                                                                                                                              x2
                                                                                                                                                              (
                                                                                                                                                                MiniParse.Spec.Int.mk_u16 
                                                                                                                                                                  8
                                                                                                                                                                
                                                                                                                                                              )
                                                                                                                                                            
                                                                                                                                                          )
                                                                                                                                                         ->
                                                                                                                                                        Prims.Tot
                                                                                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                                                                                                                                                    ))
                                                                                                                                                  .
                                                                                                                                                    (
                                                                                                                                                      fun
                                                                                                                                                        _
                                                                                                                                                        ->
                                                                                                                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                                                                                                    ) ==
                                                                                                                                                    any_result ==>
                                                                                                                                                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                                                                                                                                                    FStar.UInt16.v 
                                                                                                                                                      (
                                                                                                                                                        MiniParse.Spec.Int.mk_u16 
                                                                                                                                                          8
                                                                                                                                                        
                                                                                                                                                      )
                                                                                                                                                     <
                                                                                                                                                    10
                                                                                                                                                )
                                                                                                                                            )
                                                                                                                                        )
                                                                                                                                    )
                                                                                                                                )
                                                                                                                            )
                                                                                                                        )
                                                                                                                    )
                                                                                                                )
                                                                                                            )
                                                                                                        )
                                                                                                    )
                                                                                                ))))
                                                                                )))))))))))))))))))) /\
    (forall (any_result:
        (_: MiniParse.Spec.Int.bounded_u16 10 ->
            Prims.GTot Bench.MiniParse.Size10.Factor10.Seed00.Goal.test)).
        (fun x2 ->
            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                  x2
                  (MiniParse.Spec.Int.mk_u16 0))
              (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
              (fun _ ->
                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                        x2
                        (MiniParse.Spec.Int.mk_u16 1))
                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                    (fun _ ->
                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                              x2
                              (MiniParse.Spec.Int.mk_u16 2))
                          (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                          (fun _ ->
                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                    x2
                                    (MiniParse.Spec.Int.mk_u16 3))
                                (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                                (fun _ ->
                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 4))
                                      (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                                      (fun _ ->
                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                10
                                                x2
                                                (MiniParse.Spec.Int.mk_u16 5))
                                            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6
                                            )
                                            (fun _ ->
                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                      10
                                                      x2
                                                      (MiniParse.Spec.Int.mk_u16 6))
                                                  (fun _ ->
                                                      Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                  )
                                                  (fun _ ->
                                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                            10
                                                            x2
                                                            (MiniParse.Spec.Int.mk_u16 7))
                                                        (fun _ ->
                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                        )
                                                        (fun _ ->
                                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                  10
                                                                  x2
                                                                  (MiniParse.Spec.Int.mk_u16 8))
                                                              (fun _ ->
                                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                              )
                                                              (fun _ ->
                                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                              )))))))))) ==
        any_result ==>
        (forall (any_result:
            (
                f2:
                (_: Bench.MiniParse.Size10.Factor10.Seed00.Goal.test ->
                    Prims.GTot (MiniParse.Spec.Int.bounded_u16 10)) ->
                u2394018:
                Prims.squash (MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16' 10
                      Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
                      (fun x2 ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x2
                                (MiniParse.Spec.Int.mk_u16 0))
                            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 1))
                                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 2))
                                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 3))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 4))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 5))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x2
                                                                    (MiniParse.Spec.Int.mk_u16 6))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                                )
                                                                (fun _ ->
                                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                          10
                                                                          x2
                                                                          (MiniParse.Spec.Int.mk_u16 
                                                                              7))
                                                                      (fun _ ->
                                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                                      )
                                                                      (fun _ ->
                                                                          MiniParse.Tac.Base.mk_if_t 
                                                                            (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                10
                                                                                x2
                                                                                (MiniParse.Spec.Int.mk_u16 
                                                                                    8))
                                                                            (fun _ ->
                                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                            )
                                                                            (fun _ ->
                                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                                            ))))))))))
                      f2) ->
                Prims.Tot
                (Prims.squash (MiniParse.Spec.Combinators.synth_inverse f2
                        (fun x2 ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 0))
                              (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 1))
                                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 2))
                                          (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 3))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 4))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 5))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6
                                                            )
                                                            (fun _ ->
                                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                      10
                                                                      x2
                                                                      (MiniParse.Spec.Int.mk_u16 6))
                                                                  (fun _ ->
                                                                      Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                                  )
                                                                  (fun _ ->
                                                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                            10
                                                                            x2
                                                                            (MiniParse.Spec.Int.mk_u16 
                                                                                7))
                                                                        (fun _ ->
                                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                                        )
                                                                        (fun _ ->
                                                                            MiniParse.Tac.Base.mk_if_t 
                                                                              (MiniParse.Spec.Int.bounded_u16_eq 
                                                                                  10
                                                                                  x2
                                                                                  (MiniParse.Spec.Int.mk_u16 
                                                                                      8))
                                                                              (fun _ ->
                                                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                              )
                                                                              (fun _ ->
                                                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                                              ))))))))))))))
            (x1: Bench.MiniParse.Size10.Factor10.Seed00.Goal.test).
            (*could not prove post-condition*)
            C10? x1 == true ==>
            (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
            FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 9) < 10 /\
            ~(C10? x1 == true) ==>
            (C9? x1 == true ==>
              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 8) < 10) /\
            (~(C9? x1 == true) ==>
              C8? x1 == true ==>
              (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
              FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 7) < 10 /\
              ~(C8? x1 == true) ==>
              (C7? x1 == true ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 6) < 10) /\
              (~(C7? x1 == true) ==>
                C6? x1 == true ==>
                (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 5) < 10 /\
                ~(C6? x1 == true) ==>
                (C5? x1 == true ==>
                  (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                  FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 4) < 10) /\
                (~(C5? x1 == true) ==>
                  C4? x1 == true ==>
                  (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                  FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 3) < 10 /\
                  ~(C4? x1 == true) ==>
                  (C3? x1 == true ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 2) < 10) /\
                  (~(C3? x1 == true) ==>
                    C2? x1 == true ==>
                    (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                    FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 1) < 10 /\
                    ~(C2? x1 == true) ==>
                    (C1? x1 == true ==>
                      (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                      FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 0) < 10) /\
                    (~(C1? x1 == true) ==>
                      (forall (b: Bench.MiniParse.Size10.Factor10.Seed00.Goal.test).
                          x1 == b ==>
                          (*Subtyping check failed; expected type MiniParse.Spec.Int.bounded_u16 10; got type FStar.UInt16.t*)
                          FStar.UInt16.v (MiniParse.Spec.Int.mk_u16 9) < 10)))))))))
SMT goals (0):

TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> No goals left
TAC>> Checking success for: synth_inverse_forall_bounded_u16_solve
TAC>> Success: synth_inverse_forall_bounded_u16_solve
TAC>> Checking success for: return_squash imm_solve
TAC>> Success: return_squash imm_solve
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
proof-state: State dump @ depth 47 (synth_inverse_forall_tenum_solve FAILED here:):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Spec.TEnum.fst(183,12-183,66)
ACTIVE goals (1):
(x:
(_: MiniParse.Spec.Int.bounded_u16 10 -> Prims.GTot Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
          x2
          (MiniParse.Spec.Int.mk_u16 0))
      (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 6))
                                          (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 7))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 8))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                      )
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                      )))))))))) ==
x), (x:
(
    f2':
    (x: MiniParse.Spec.Int.bounded_u16 10 ->
        Prims.Tot
        (y:
          Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
            { y ==
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                    x
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                          x
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x
                                      (MiniParse.Spec.Int.mk_u16 3))
                                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x
                                            (MiniParse.Spec.Int.mk_u16 4))
                                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x
                                                  (MiniParse.Spec.Int.mk_u16 5))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x
                                                        (MiniParse.Spec.Int.mk_u16 6))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x
                                                              (MiniParse.Spec.Int.mk_u16 7))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x
                                                                    (MiniParse.Spec.Int.mk_u16 8))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                )
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                                ))))))))) })) ->
    g1:
    (_: Bench.MiniParse.Size10.Factor10.Seed00.Goal.test ->
        Prims.GTot (MiniParse.Spec.Int.bounded_u16 10)) ->
    u3476338:
    u3476379:
    Prims.unit
      { MiniParse.Spec.Combinators.synth_inverse g1
          (fun x2 ->
              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                    x2
                    (MiniParse.Spec.Int.mk_u16 0))
                (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
                (fun _ ->
                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                          x2
                          (MiniParse.Spec.Int.mk_u16 1))
                      (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                      (fun _ ->
                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                x2
                                (MiniParse.Spec.Int.mk_u16 2))
                            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                            (fun _ ->
                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                      x2
                                      (MiniParse.Spec.Int.mk_u16 3))
                                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                                  (fun _ ->
                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                            x2
                                            (MiniParse.Spec.Int.mk_u16 4))
                                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                                        (fun _ ->
                                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                  10
                                                  x2
                                                  (MiniParse.Spec.Int.mk_u16 5))
                                              (fun _ ->
                                                  Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6)
                                              (fun _ ->
                                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                        10
                                                        x2
                                                        (MiniParse.Spec.Int.mk_u16 6))
                                                    (fun _ ->
                                                        Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                    )
                                                    (fun _ ->
                                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                              10
                                                              x2
                                                              (MiniParse.Spec.Int.mk_u16 7))
                                                          (fun _ ->
                                                              Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                          )
                                                          (fun _ ->
                                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                    10
                                                                    x2
                                                                    (MiniParse.Spec.Int.mk_u16 8))
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                )
                                                                (fun _ ->
                                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                                )))))))))) } ->
    Prims.Tot
    (MiniParse.Impl.Base.parser_impl (MiniParse.Spec.Combinators.parse_synth (MiniParse.Spec.Int.parse_bounded_u16 
                10)
            (fun x2 ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x2
                      (MiniParse.Spec.Int.mk_u16 0))
                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 1))
                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 2))
                              (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 3))
                                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 4))
                                          (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 5))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 6))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 7))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                            )
                                                            (fun _ ->
                                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                      10
                                                                      x2
                                                                      (MiniParse.Spec.Int.mk_u16 8))
                                                                  (fun _ ->
                                                                      Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                                  )
                                                                  (fun _ ->
                                                                      Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                                  ))))))))))
            g1)))), (x:
(x: MiniParse.Spec.Int.bounded_u16 10 ->
    Prims.Tot
    (y:
      Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
        { y ==
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x
                                                    (MiniParse.Spec.Int.mk_u16 6))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x
                                                          (MiniParse.Spec.Int.mk_u16 7))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x
                                                                (MiniParse.Spec.Int.mk_u16 8))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                            )
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                            ))))))))) }))), (_:
(fun x0 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
          x0
          (MiniParse.Spec.Int.mk_u16 0))
      (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x0
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x0
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x0
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x0
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x0
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x0
                                              (MiniParse.Spec.Int.mk_u16 6))
                                          (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x0
                                                    (MiniParse.Spec.Int.mk_u16 7))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x0
                                                          (MiniParse.Spec.Int.mk_u16 8))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                      )
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                      )))))))))) ==
x), (x:
(_: Bench.MiniParse.Size10.Factor10.Seed00.Goal.test ->
    Prims.GTot (MiniParse.Spec.Int.bounded_u16 10))), (x:
u3476439:
Prims.unit
  { MiniParse.Spec.Combinators.synth_inverse x
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 6))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 7))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 8))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                            )
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                            )))))))))) }), (x:
(_: MiniParse.Spec.Int.bounded_u16 10 -> Prims.GTot Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
          x2
          (MiniParse.Spec.Int.mk_u16 0))
      (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 6))
                                          (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 7))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 8))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                      )
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                      )))))))))) ==
x) |- _ : Prims.squash (MiniParse.Spec.Combinators.synth_inverse x
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 6))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 7))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 8))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                            )
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                            )))))))))))
SMT goals (0):

TAC>> Checking success for: assumption
TAC>> Success: assumption
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
proof-state: State dump @ depth 39 (synth_inverse_forall_tenum_solve FAILED here:):
Location: /home/guido/r/fstar/examples/miniparse/MiniParse.Spec.TEnum.fst(183,12-183,66)
ACTIVE goals (1):
(x:
(_: MiniParse.Spec.Int.bounded_u16 10 -> Prims.GTot Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
          x2
          (MiniParse.Spec.Int.mk_u16 0))
      (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 6))
                                          (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 7))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 8))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                      )
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                      )))))))))) ==
x), (x:
(x: MiniParse.Spec.Int.bounded_u16 10 ->
    Prims.Tot
    (y:
      Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
        { y ==
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x
                                                    (MiniParse.Spec.Int.mk_u16 6))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x
                                                          (MiniParse.Spec.Int.mk_u16 7))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x
                                                                (MiniParse.Spec.Int.mk_u16 8))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                            )
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                            ))))))))) }))), (x:
(_: Bench.MiniParse.Size10.Factor10.Seed00.Goal.test ->
    Prims.GTot (MiniParse.Spec.Int.bounded_u16 10))), (x:
u4567535:
Prims.unit
  { MiniParse.Spec.Combinators.synth_inverse x
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 6))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 7))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 8))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                            )
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                            )))))))))) }), (x:
(_: MiniParse.Spec.Int.bounded_u16 10 -> Prims.GTot Bench.MiniParse.Size10.Factor10.Seed00.Goal.test
)), (_:
(fun x2 ->
    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
          x2
          (MiniParse.Spec.Int.mk_u16 0))
      (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
      (fun _ ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x2
                (MiniParse.Spec.Int.mk_u16 1))
            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x2
                      (MiniParse.Spec.Int.mk_u16 2))
                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 3))
                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 4))
                              (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 5))
                                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 6))
                                          (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 7))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 8))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                      )
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                      )))))))))) ==
x) |- _ : Prims.squash (MiniParse.Spec.Combinators.synth_inverse x
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 6))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 7))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 8))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                            )
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                            )))))))))))
SMT goals (0):

TAC>> Checking success for: assumption
TAC>> Success: assumption
TAC>> Applied: forall_intro
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> Applied: forall_intro
TAC>> Applied: implies_intro
TAC>> Checking success for: trivial
TAC>> Success: trivial
TAC>> No goals left
TAC>> gen_parser_impl spits:
TAC>> MiniParse.Impl.Combinators.parse_synth_impl (MiniParse.Impl.Int.parse_bounded_u16_impl 10)
  (fun x2 ->
      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
            x2
            (MiniParse.Spec.Int.mk_u16 0))
        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
        (fun _ ->
            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                  x2
                  (MiniParse.Spec.Int.mk_u16 1))
              (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
              (fun _ ->
                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                        x2
                        (MiniParse.Spec.Int.mk_u16 2))
                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                    (fun _ ->
                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                              x2
                              (MiniParse.Spec.Int.mk_u16 3))
                          (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                          (fun _ ->
                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                    x2
                                    (MiniParse.Spec.Int.mk_u16 4))
                                (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                                (fun _ ->
                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                          x2
                                          (MiniParse.Spec.Int.mk_u16 5))
                                      (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6)
                                      (fun _ ->
                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                10
                                                x2
                                                (MiniParse.Spec.Int.mk_u16 6))
                                            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7
                                            )
                                            (fun _ ->
                                                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                      10
                                                      x2
                                                      (MiniParse.Spec.Int.mk_u16 7))
                                                  (fun _ ->
                                                      Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                  )
                                                  (fun _ ->
                                                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                            10
                                                            x2
                                                            (MiniParse.Spec.Int.mk_u16 8))
                                                        (fun _ ->
                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                        )
                                                        (fun _ ->
                                                            Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                        ))))))))))
  (fun x0 ->
      (fun x2 ->
          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                x2
                (MiniParse.Spec.Int.mk_u16 0))
            (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1)
            (fun _ ->
                MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                      x2
                      (MiniParse.Spec.Int.mk_u16 1))
                  (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2)
                  (fun _ ->
                      MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                            x2
                            (MiniParse.Spec.Int.mk_u16 2))
                        (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3)
                        (fun _ ->
                            MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                  x2
                                  (MiniParse.Spec.Int.mk_u16 3))
                              (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4)
                              (fun _ ->
                                  MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 10
                                        x2
                                        (MiniParse.Spec.Int.mk_u16 4))
                                    (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5)
                                    (fun _ ->
                                        MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                              10
                                              x2
                                              (MiniParse.Spec.Int.mk_u16 5))
                                          (fun _ -> Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6)
                                          (fun _ ->
                                              MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                    10
                                                    x2
                                                    (MiniParse.Spec.Int.mk_u16 6))
                                                (fun _ ->
                                                    Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7)
                                                (fun _ ->
                                                    MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                          10
                                                          x2
                                                          (MiniParse.Spec.Int.mk_u16 7))
                                                      (fun _ ->
                                                          Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8
                                                      )
                                                      (fun _ ->
                                                          MiniParse.Tac.Base.mk_if_t (MiniParse.Spec.Int.bounded_u16_eq 
                                                                10
                                                                x2
                                                                (MiniParse.Spec.Int.mk_u16 8))
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9
                                                            )
                                                            (fun _ ->
                                                                Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10
                                                            )))))))))) x0)
  (fun x1 ->
      (match x1 with
        | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C10 ->
          MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10
        | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C9 ->
          MiniParse.Spec.Int.mk_u16 8 <: MiniParse.Spec.Int.bounded_u16 10
        | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C8 ->
          MiniParse.Spec.Int.mk_u16 7 <: MiniParse.Spec.Int.bounded_u16 10
        | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C7 ->
          MiniParse.Spec.Int.mk_u16 6 <: MiniParse.Spec.Int.bounded_u16 10
        | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C6 ->
          MiniParse.Spec.Int.mk_u16 5 <: MiniParse.Spec.Int.bounded_u16 10
        | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C5 ->
          MiniParse.Spec.Int.mk_u16 4 <: MiniParse.Spec.Int.bounded_u16 10
        | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C4 ->
          MiniParse.Spec.Int.mk_u16 3 <: MiniParse.Spec.Int.bounded_u16 10
        | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C3 ->
          MiniParse.Spec.Int.mk_u16 2 <: MiniParse.Spec.Int.bounded_u16 10
        | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C2 ->
          MiniParse.Spec.Int.mk_u16 1 <: MiniParse.Spec.Int.bounded_u16 10
        | Bench.MiniParse.Size10.Factor10.Seed00.Goal.C1 ->
          MiniParse.Spec.Int.mk_u16 0 <: MiniParse.Spec.Int.bounded_u16 10
        | _ -> MiniParse.Spec.Int.mk_u16 9 <: MiniParse.Spec.Int.bounded_u16 10)
      <:
      MiniParse.Spec.Int.bounded_u16 10)
  ()
Tactic fun _ ->
  MiniParse.Tac.Impl.gen_parser_impl (FStar.Tactics.Types.Goal)
  <:
  FStar.Tactics.Effect.TAC Prims.unit ran in 134515 ms (Goal)
Verified module: Bench.MiniParse.Size10.Factor10.Seed00.Goal (215930 milliseconds)
All verification conditions discharged successfully
